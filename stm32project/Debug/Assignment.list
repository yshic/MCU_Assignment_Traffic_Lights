
Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000519c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  080052a8  080052a8  000152a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005558  08005558  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  08005558  08005558  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005558  08005558  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005558  08005558  00015558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800555c  0800555c  0001555c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08005560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  200000fc  0800565c  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  0800565c  000204cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e3a0  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002969  00000000  00000000  0002e508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc8  00000000  00000000  00030e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a9b  00000000  00000000  00031c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018fb3  00000000  00000000  000326db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011676  00000000  00000000  0004b68e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b422  00000000  00000000  0005cd04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c3c  00000000  00000000  000e8128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000ebd64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000fc 	.word	0x200000fc
 8000128:	00000000 	.word	0x00000000
 800012c:	08005290 	.word	0x08005290

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000100 	.word	0x20000100
 8000148:	08005290 	.word	0x08005290

0800014c <getKeyInput>:
int TimeOutForKeyPress[NUM_BUTTONS] = {200};
int BT_flag[NUM_BUTTONS] = {0};
int BT_hold_flag[NUM_BUTTONS] = {0};


void getKeyInput(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUTTONS; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e07a      	b.n	800024e <getKeyInput+0x102>
		KeyReg2[i] = KeyReg1[i];
 8000158:	4a41      	ldr	r2, [pc, #260]	; (8000260 <getKeyInput+0x114>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000160:	4940      	ldr	r1, [pc, #256]	; (8000264 <getKeyInput+0x118>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 8000168:	4a3f      	ldr	r2, [pc, #252]	; (8000268 <getKeyInput+0x11c>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000170:	493b      	ldr	r1, [pc, #236]	; (8000260 <getKeyInput+0x114>)
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//Add your button here
		KeyReg0[i] = HAL_GPIO_ReadPin(btPort[i], btArr[i]);
 8000178:	4a3c      	ldr	r2, [pc, #240]	; (800026c <getKeyInput+0x120>)
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000180:	493b      	ldr	r1, [pc, #236]	; (8000270 <getKeyInput+0x124>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000188:	4619      	mov	r1, r3
 800018a:	4610      	mov	r0, r2
 800018c:	f002 fe2c 	bl	8002de8 <HAL_GPIO_ReadPin>
 8000190:	4603      	mov	r3, r0
 8000192:	4619      	mov	r1, r3
 8000194:	4a34      	ldr	r2, [pc, #208]	; (8000268 <getKeyInput+0x11c>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 800019c:	4a30      	ldr	r2, [pc, #192]	; (8000260 <getKeyInput+0x114>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a4:	4930      	ldr	r1, [pc, #192]	; (8000268 <getKeyInput+0x11c>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001ac:	429a      	cmp	r2, r3
 80001ae:	d14b      	bne.n	8000248 <getKeyInput+0xfc>
 80001b0:	4a2b      	ldr	r2, [pc, #172]	; (8000260 <getKeyInput+0x114>)
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b8:	492a      	ldr	r1, [pc, #168]	; (8000264 <getKeyInput+0x118>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001c0:	429a      	cmp	r2, r3
 80001c2:	d141      	bne.n	8000248 <getKeyInput+0xfc>
			if (KeyReg2[i] != KeyReg3[i]){
 80001c4:	4a27      	ldr	r2, [pc, #156]	; (8000264 <getKeyInput+0x118>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001cc:	4929      	ldr	r1, [pc, #164]	; (8000274 <getKeyInput+0x128>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001d4:	429a      	cmp	r2, r3
 80001d6:	d018      	beq.n	800020a <getKeyInput+0xbe>
				KeyReg3[i] = KeyReg2[i];
 80001d8:	4a22      	ldr	r2, [pc, #136]	; (8000264 <getKeyInput+0x118>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e0:	4924      	ldr	r1, [pc, #144]	; (8000274 <getKeyInput+0x128>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg3[i] == PRESSED_STATE){
 80001e8:	4a22      	ldr	r2, [pc, #136]	; (8000274 <getKeyInput+0x128>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d129      	bne.n	8000248 <getKeyInput+0xfc>
						TimeOutForKeyPress[i] = 200;
 80001f4:	4a20      	ldr	r2, [pc, #128]	; (8000278 <getKeyInput+0x12c>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	21c8      	movs	r1, #200	; 0xc8
 80001fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						BT_flag[i] = 1;				}
 80001fe:	4a1f      	ldr	r2, [pc, #124]	; (800027c <getKeyInput+0x130>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	2101      	movs	r1, #1
 8000204:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000208:	e01e      	b.n	8000248 <getKeyInput+0xfc>
			}else{
				TimeOutForKeyPress[i]--;
 800020a:	4a1b      	ldr	r2, [pc, #108]	; (8000278 <getKeyInput+0x12c>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000212:	1e5a      	subs	r2, r3, #1
 8000214:	4918      	ldr	r1, [pc, #96]	; (8000278 <getKeyInput+0x12c>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 800021c:	4a16      	ldr	r2, [pc, #88]	; (8000278 <getKeyInput+0x12c>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000224:	2b00      	cmp	r3, #0
 8000226:	d10f      	bne.n	8000248 <getKeyInput+0xfc>
					TimeOutForKeyPress[i] = 200;
 8000228:	4a13      	ldr	r2, [pc, #76]	; (8000278 <getKeyInput+0x12c>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	21c8      	movs	r1, #200	; 0xc8
 800022e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if(KeyReg0[i] == PRESSED_STATE){
 8000232:	4a0d      	ldr	r2, [pc, #52]	; (8000268 <getKeyInput+0x11c>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d104      	bne.n	8000248 <getKeyInput+0xfc>
						BT_hold_flag[i] = 1;
 800023e:	4a10      	ldr	r2, [pc, #64]	; (8000280 <getKeyInput+0x134>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2101      	movs	r1, #1
 8000244:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_BUTTONS; i++){
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	3301      	adds	r3, #1
 800024c:	607b      	str	r3, [r7, #4]
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	2b03      	cmp	r3, #3
 8000252:	dd81      	ble.n	8000158 <getKeyInput+0xc>
					}
				}
			}
		}
	}
}
 8000254:	bf00      	nop
 8000256:	bf00      	nop
 8000258:	3708      	adds	r7, #8
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	20000028 	.word	0x20000028
 8000264:	20000038 	.word	0x20000038
 8000268:	20000018 	.word	0x20000018
 800026c:	20000008 	.word	0x20000008
 8000270:	20000000 	.word	0x20000000
 8000274:	20000048 	.word	0x20000048
 8000278:	20000058 	.word	0x20000058
 800027c:	20000118 	.word	0x20000118
 8000280:	20000128 	.word	0x20000128

08000284 <isBTPressed>:


int isBTPressed(int index){
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
	if(BT_flag[index] == 1){
 800028c:	4a09      	ldr	r2, [pc, #36]	; (80002b4 <isBTPressed+0x30>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000294:	2b01      	cmp	r3, #1
 8000296:	d106      	bne.n	80002a6 <isBTPressed+0x22>
		BT_flag[index] = 0;
 8000298:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <isBTPressed+0x30>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2100      	movs	r1, #0
 800029e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80002a2:	2301      	movs	r3, #1
 80002a4:	e000      	b.n	80002a8 <isBTPressed+0x24>
	}
	return 0;
 80002a6:	2300      	movs	r3, #0
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	370c      	adds	r7, #12
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	20000118 	.word	0x20000118

080002b8 <isBTHold>:

int isBTHold(int index){
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
	if(BT_hold_flag[index] == 1){
 80002c0:	4a09      	ldr	r2, [pc, #36]	; (80002e8 <isBTHold+0x30>)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002c8:	2b01      	cmp	r3, #1
 80002ca:	d106      	bne.n	80002da <isBTHold+0x22>
		BT_hold_flag[index] = 0;
 80002cc:	4a06      	ldr	r2, [pc, #24]	; (80002e8 <isBTHold+0x30>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	2100      	movs	r1, #0
 80002d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80002d6:	2301      	movs	r3, #1
 80002d8:	e000      	b.n	80002dc <isBTHold+0x24>
	}
	return 0;
 80002da:	2300      	movs	r3, #0
}
 80002dc:	4618      	mov	r0, r3
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bc80      	pop	{r7}
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	20000128 	.word	0x20000128

080002ec <buzzer_init>:

int ped_green[8] = {NOTE_E7, NOTE_C7, NOTE_E7, NOTE_C7, NOTE_E7, NOTE_C7, NOTE_E7, NOTE_C7};

//Used timer: timer 4

void buzzer_init(TIM_TypeDef *tim){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
	tempPSC = tim->PSC;
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002f8:	4a04      	ldr	r2, [pc, #16]	; (800030c <buzzer_init+0x20>)
 80002fa:	6013      	str	r3, [r2, #0]
	setTimer(10, 4);
 80002fc:	2104      	movs	r1, #4
 80002fe:	200a      	movs	r0, #10
 8000300:	f002 f8a4 	bl	800244c <setTimer>
}
 8000304:	bf00      	nop
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	2000013c 	.word	0x2000013c

08000310 <buzzer_sound>:

void buzzer_sound(TIM_HandleTypeDef htim ,int volume){
 8000310:	b084      	sub	sp, #16
 8000312:	b580      	push	{r7, lr}
 8000314:	af00      	add	r7, sp, #0
 8000316:	f107 0c08 	add.w	ip, r7, #8
 800031a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	TIM_CCxChannelCmd(TIM3, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800031e:	2201      	movs	r2, #1
 8000320:	2100      	movs	r1, #0
 8000322:	480f      	ldr	r0, [pc, #60]	; (8000360 <buzzer_sound+0x50>)
 8000324:	f004 f89e 	bl	8004464 <TIM_CCxChannelCmd>
	__HAL_TIM_SET_COMPARE(&htim,TIM_CHANNEL_1,volume);
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800032c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->PSC = 64000/ped_green[idx%8];
 800032e:	4b0d      	ldr	r3, [pc, #52]	; (8000364 <buzzer_sound+0x54>)
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	f003 0307 	and.w	r3, r3, #7
 8000336:	4a0c      	ldr	r2, [pc, #48]	; (8000368 <buzzer_sound+0x58>)
 8000338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800033c:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000340:	fb92 f2f3 	sdiv	r2, r2, r3
 8000344:	4b06      	ldr	r3, [pc, #24]	; (8000360 <buzzer_sound+0x50>)
 8000346:	629a      	str	r2, [r3, #40]	; 0x28
	idx++;
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <buzzer_sound+0x54>)
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	3301      	adds	r3, #1
 800034e:	b2da      	uxtb	r2, r3
 8000350:	4b04      	ldr	r3, [pc, #16]	; (8000364 <buzzer_sound+0x54>)
 8000352:	701a      	strb	r2, [r3, #0]
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr
 8000360:	40000400 	.word	0x40000400
 8000364:	20000138 	.word	0x20000138
 8000368:	20000068 	.word	0x20000068

0800036c <buzzer_run>:

void buzzer_run(){
 800036c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800036e:	b091      	sub	sp, #68	; 0x44
 8000370:	af10      	add	r7, sp, #64	; 0x40
	if(buzzer_state == 0){
 8000372:	4b28      	ldr	r3, [pc, #160]	; (8000414 <buzzer_run+0xa8>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d10b      	bne.n	8000392 <buzzer_run+0x26>
		TIM_CCxChannelCmd(TIM3, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800037a:	2200      	movs	r2, #0
 800037c:	2100      	movs	r1, #0
 800037e:	4826      	ldr	r0, [pc, #152]	; (8000418 <buzzer_run+0xac>)
 8000380:	f004 f870 	bl	8004464 <TIM_CCxChannelCmd>
		idx = 0;
 8000384:	4b25      	ldr	r3, [pc, #148]	; (800041c <buzzer_run+0xb0>)
 8000386:	2200      	movs	r2, #0
 8000388:	701a      	strb	r2, [r3, #0]
		TIM3->PSC = tempPSC;
 800038a:	4a23      	ldr	r2, [pc, #140]	; (8000418 <buzzer_run+0xac>)
 800038c:	4b24      	ldr	r3, [pc, #144]	; (8000420 <buzzer_run+0xb4>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	6293      	str	r3, [r2, #40]	; 0x28
	}
	if(timer_flag[4] == 1){
 8000392:	4b24      	ldr	r3, [pc, #144]	; (8000424 <buzzer_run+0xb8>)
 8000394:	691b      	ldr	r3, [r3, #16]
 8000396:	2b01      	cmp	r3, #1
 8000398:	d137      	bne.n	800040a <buzzer_run+0x9e>
		if(buzzer_state == 2){
 800039a:	4b1e      	ldr	r3, [pc, #120]	; (8000414 <buzzer_run+0xa8>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	2b02      	cmp	r3, #2
 80003a0:	d117      	bne.n	80003d2 <buzzer_run+0x66>
			buzzer_sound(htim3, 20);
 80003a2:	4e21      	ldr	r6, [pc, #132]	; (8000428 <buzzer_run+0xbc>)
 80003a4:	2314      	movs	r3, #20
 80003a6:	930e      	str	r3, [sp, #56]	; 0x38
 80003a8:	466d      	mov	r5, sp
 80003aa:	f106 0410 	add.w	r4, r6, #16
 80003ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80003be:	e885 0003 	stmia.w	r5, {r0, r1}
 80003c2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80003c6:	f7ff ffa3 	bl	8000310 <buzzer_sound>
			setTimer(100, 4);
 80003ca:	2104      	movs	r1, #4
 80003cc:	2064      	movs	r0, #100	; 0x64
 80003ce:	f002 f83d 	bl	800244c <setTimer>
		}
		if(buzzer_state == 1){
 80003d2:	4b10      	ldr	r3, [pc, #64]	; (8000414 <buzzer_run+0xa8>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d117      	bne.n	800040a <buzzer_run+0x9e>
			buzzer_sound(htim3, 20);
 80003da:	4e13      	ldr	r6, [pc, #76]	; (8000428 <buzzer_run+0xbc>)
 80003dc:	2314      	movs	r3, #20
 80003de:	930e      	str	r3, [sp, #56]	; 0x38
 80003e0:	466d      	mov	r5, sp
 80003e2:	f106 0410 	add.w	r4, r6, #16
 80003e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80003f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80003fa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80003fe:	f7ff ff87 	bl	8000310 <buzzer_sound>
			setTimer(250, 4);
 8000402:	2104      	movs	r1, #4
 8000404:	20fa      	movs	r0, #250	; 0xfa
 8000406:	f002 f821 	bl	800244c <setTimer>
		}
	}
}
 800040a:	bf00      	nop
 800040c:	3704      	adds	r7, #4
 800040e:	46bd      	mov	sp, r7
 8000410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000412:	bf00      	nop
 8000414:	20000140 	.word	0x20000140
 8000418:	40000400 	.word	0x40000400
 800041c:	20000138 	.word	0x20000138
 8000420:	2000013c 	.word	0x2000013c
 8000424:	2000035c 	.word	0x2000035c
 8000428:	200001dc 	.word	0x200001dc

0800042c <buzzer_set>:


void buzzer_set(int value){
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
	switch(value){
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	2b02      	cmp	r3, #2
 8000438:	d011      	beq.n	800045e <buzzer_set+0x32>
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	2b02      	cmp	r3, #2
 800043e:	dc12      	bgt.n	8000466 <buzzer_set+0x3a>
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d003      	beq.n	800044e <buzzer_set+0x22>
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d004      	beq.n	8000456 <buzzer_set+0x2a>
 800044c:	e00b      	b.n	8000466 <buzzer_set+0x3a>
	case 0:
		buzzer_state = 0;
 800044e:	4b0a      	ldr	r3, [pc, #40]	; (8000478 <buzzer_set+0x4c>)
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
		break;
 8000454:	e00b      	b.n	800046e <buzzer_set+0x42>
	case 1:
		buzzer_state = 1;
 8000456:	4b08      	ldr	r3, [pc, #32]	; (8000478 <buzzer_set+0x4c>)
 8000458:	2201      	movs	r2, #1
 800045a:	601a      	str	r2, [r3, #0]
		break;
 800045c:	e007      	b.n	800046e <buzzer_set+0x42>
	case 2:
		buzzer_state = 2;
 800045e:	4b06      	ldr	r3, [pc, #24]	; (8000478 <buzzer_set+0x4c>)
 8000460:	2202      	movs	r2, #2
 8000462:	601a      	str	r2, [r3, #0]
		break;
 8000464:	e003      	b.n	800046e <buzzer_set+0x42>
	default:
		buzzer_state = 0;
 8000466:	4b04      	ldr	r3, [pc, #16]	; (8000478 <buzzer_set+0x4c>)
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
		break;
 800046c:	bf00      	nop
	}
}
 800046e:	bf00      	nop
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	20000140 	.word	0x20000140

0800047c <fsm_automatic_run>:
int counter2_buffer1;
int counter2_buffer2;

// Used timers: timer[0]: counter decrease (1000)
//				timer[1]: ped timeout (5000)
void fsm_automatic_run(){
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af02      	add	r7, sp, #8
	switch(status){
 8000482:	4b91      	ldr	r3, [pc, #580]	; (80006c8 <fsm_automatic_run+0x24c>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	2b04      	cmp	r3, #4
 8000488:	f200 8413 	bhi.w	8000cb2 <fsm_automatic_run+0x836>
 800048c:	a201      	add	r2, pc, #4	; (adr r2, 8000494 <fsm_automatic_run+0x18>)
 800048e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000492:	bf00      	nop
 8000494:	080004a9 	.word	0x080004a9
 8000498:	08000507 	.word	0x08000507
 800049c:	08000719 	.word	0x08000719
 80004a0:	080008fd 	.word	0x080008fd
 80004a4:	08000af9 	.word	0x08000af9
	case INIT:
		clearTrafficLights();
 80004a8:	f001 faca 	bl	8001a40 <clearTrafficLights>
		status = AUTO_RED;
 80004ac:	4b86      	ldr	r3, [pc, #536]	; (80006c8 <fsm_automatic_run+0x24c>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	701a      	strb	r2, [r3, #0]
		setTimer(1000, 0);						//timer for counters
 80004b2:	2100      	movs	r1, #0
 80004b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004b8:	f001 ffc8 	bl	800244c <setTimer>
		counter1 = red;
 80004bc:	4b83      	ldr	r3, [pc, #524]	; (80006cc <fsm_automatic_run+0x250>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a83      	ldr	r2, [pc, #524]	; (80006d0 <fsm_automatic_run+0x254>)
 80004c2:	6013      	str	r3, [r2, #0]
		counter2 = green;
 80004c4:	4b83      	ldr	r3, [pc, #524]	; (80006d4 <fsm_automatic_run+0x258>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a83      	ldr	r2, [pc, #524]	; (80006d8 <fsm_automatic_run+0x25c>)
 80004ca:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!AUTOMATIC#\r\n"), 1000);
 80004cc:	4983      	ldr	r1, [pc, #524]	; (80006dc <fsm_automatic_run+0x260>)
 80004ce:	4884      	ldr	r0, [pc, #528]	; (80006e0 <fsm_automatic_run+0x264>)
 80004d0:	f004 fa2c 	bl	800492c <siprintf>
 80004d4:	4603      	mov	r3, r0
 80004d6:	b29a      	uxth	r2, r3
 80004d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004dc:	4980      	ldr	r1, [pc, #512]	; (80006e0 <fsm_automatic_run+0x264>)
 80004de:	4881      	ldr	r0, [pc, #516]	; (80006e4 <fsm_automatic_run+0x268>)
 80004e0:	f004 f8a4 	bl	800462c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d||%d#\r\n",counter1, counter2), 1000);
 80004e4:	4b7a      	ldr	r3, [pc, #488]	; (80006d0 <fsm_automatic_run+0x254>)
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	4b7b      	ldr	r3, [pc, #492]	; (80006d8 <fsm_automatic_run+0x25c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	497e      	ldr	r1, [pc, #504]	; (80006e8 <fsm_automatic_run+0x26c>)
 80004ee:	487c      	ldr	r0, [pc, #496]	; (80006e0 <fsm_automatic_run+0x264>)
 80004f0:	f004 fa1c 	bl	800492c <siprintf>
 80004f4:	4603      	mov	r3, r0
 80004f6:	b29a      	uxth	r2, r3
 80004f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004fc:	4978      	ldr	r1, [pc, #480]	; (80006e0 <fsm_automatic_run+0x264>)
 80004fe:	4879      	ldr	r0, [pc, #484]	; (80006e4 <fsm_automatic_run+0x268>)
 8000500:	f004 f894 	bl	800462c <HAL_UART_Transmit>
		break;
 8000504:	e3de      	b.n	8000cc4 <fsm_automatic_run+0x848>
	case AUTO_RED:
		controlTrafficLights(RED, GREEN);
 8000506:	2165      	movs	r1, #101	; 0x65
 8000508:	2064      	movs	r0, #100	; 0x64
 800050a:	f001 f9c3 	bl	8001894 <controlTrafficLights>
		if(timer_flag[0] == 1){
 800050e:	4b77      	ldr	r3, [pc, #476]	; (80006ec <fsm_automatic_run+0x270>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d16a      	bne.n	80005ec <fsm_automatic_run+0x170>
			counter1--;
 8000516:	4b6e      	ldr	r3, [pc, #440]	; (80006d0 <fsm_automatic_run+0x254>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	3b01      	subs	r3, #1
 800051c:	4a6c      	ldr	r2, [pc, #432]	; (80006d0 <fsm_automatic_run+0x254>)
 800051e:	6013      	str	r3, [r2, #0]
			counter2--;
 8000520:	4b6d      	ldr	r3, [pc, #436]	; (80006d8 <fsm_automatic_run+0x25c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	3b01      	subs	r3, #1
 8000526:	4a6c      	ldr	r2, [pc, #432]	; (80006d8 <fsm_automatic_run+0x25c>)
 8000528:	6013      	str	r3, [r2, #0]
			if(counter2 == 0){
 800052a:	4b6b      	ldr	r3, [pc, #428]	; (80006d8 <fsm_automatic_run+0x25c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d10d      	bne.n	800054e <fsm_automatic_run+0xd2>
				status = AUTO_RED1_YELLOW2;
 8000532:	4b65      	ldr	r3, [pc, #404]	; (80006c8 <fsm_automatic_run+0x24c>)
 8000534:	2204      	movs	r2, #4
 8000536:	701a      	strb	r2, [r3, #0]
				if(isPed == 1){
 8000538:	4b6d      	ldr	r3, [pc, #436]	; (80006f0 <fsm_automatic_run+0x274>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d102      	bne.n	8000546 <fsm_automatic_run+0xca>
					buzzer_set(2);
 8000540:	2002      	movs	r0, #2
 8000542:	f7ff ff73 	bl	800042c <buzzer_set>
				}
				counter2 = yellow;
 8000546:	4b6b      	ldr	r3, [pc, #428]	; (80006f4 <fsm_automatic_run+0x278>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a63      	ldr	r2, [pc, #396]	; (80006d8 <fsm_automatic_run+0x25c>)
 800054c:	6013      	str	r3, [r2, #0]
			}
			counter1_buffer1 = counter1 / 10;
 800054e:	4b60      	ldr	r3, [pc, #384]	; (80006d0 <fsm_automatic_run+0x254>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4a69      	ldr	r2, [pc, #420]	; (80006f8 <fsm_automatic_run+0x27c>)
 8000554:	fb82 1203 	smull	r1, r2, r2, r3
 8000558:	1092      	asrs	r2, r2, #2
 800055a:	17db      	asrs	r3, r3, #31
 800055c:	1ad3      	subs	r3, r2, r3
 800055e:	4a67      	ldr	r2, [pc, #412]	; (80006fc <fsm_automatic_run+0x280>)
 8000560:	6013      	str	r3, [r2, #0]
			counter1_buffer2 = counter1 % 10;
 8000562:	4b5b      	ldr	r3, [pc, #364]	; (80006d0 <fsm_automatic_run+0x254>)
 8000564:	6819      	ldr	r1, [r3, #0]
 8000566:	4b64      	ldr	r3, [pc, #400]	; (80006f8 <fsm_automatic_run+0x27c>)
 8000568:	fb83 2301 	smull	r2, r3, r3, r1
 800056c:	109a      	asrs	r2, r3, #2
 800056e:	17cb      	asrs	r3, r1, #31
 8000570:	1ad2      	subs	r2, r2, r3
 8000572:	4613      	mov	r3, r2
 8000574:	009b      	lsls	r3, r3, #2
 8000576:	4413      	add	r3, r2
 8000578:	005b      	lsls	r3, r3, #1
 800057a:	1aca      	subs	r2, r1, r3
 800057c:	4b60      	ldr	r3, [pc, #384]	; (8000700 <fsm_automatic_run+0x284>)
 800057e:	601a      	str	r2, [r3, #0]
			counter2_buffer1 = counter2 / 10;
 8000580:	4b55      	ldr	r3, [pc, #340]	; (80006d8 <fsm_automatic_run+0x25c>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a5c      	ldr	r2, [pc, #368]	; (80006f8 <fsm_automatic_run+0x27c>)
 8000586:	fb82 1203 	smull	r1, r2, r2, r3
 800058a:	1092      	asrs	r2, r2, #2
 800058c:	17db      	asrs	r3, r3, #31
 800058e:	1ad3      	subs	r3, r2, r3
 8000590:	4a5c      	ldr	r2, [pc, #368]	; (8000704 <fsm_automatic_run+0x288>)
 8000592:	6013      	str	r3, [r2, #0]
			counter2_buffer2 = counter2 % 10;
 8000594:	4b50      	ldr	r3, [pc, #320]	; (80006d8 <fsm_automatic_run+0x25c>)
 8000596:	6819      	ldr	r1, [r3, #0]
 8000598:	4b57      	ldr	r3, [pc, #348]	; (80006f8 <fsm_automatic_run+0x27c>)
 800059a:	fb83 2301 	smull	r2, r3, r3, r1
 800059e:	109a      	asrs	r2, r3, #2
 80005a0:	17cb      	asrs	r3, r1, #31
 80005a2:	1ad2      	subs	r2, r2, r3
 80005a4:	4613      	mov	r3, r2
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	4413      	add	r3, r2
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	1aca      	subs	r2, r1, r3
 80005ae:	4b56      	ldr	r3, [pc, #344]	; (8000708 <fsm_automatic_run+0x28c>)
 80005b0:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d||%d%d#\r\n",
 80005b2:	4b52      	ldr	r3, [pc, #328]	; (80006fc <fsm_automatic_run+0x280>)
 80005b4:	6819      	ldr	r1, [r3, #0]
 80005b6:	4b52      	ldr	r3, [pc, #328]	; (8000700 <fsm_automatic_run+0x284>)
 80005b8:	6818      	ldr	r0, [r3, #0]
 80005ba:	4b52      	ldr	r3, [pc, #328]	; (8000704 <fsm_automatic_run+0x288>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a52      	ldr	r2, [pc, #328]	; (8000708 <fsm_automatic_run+0x28c>)
 80005c0:	6812      	ldr	r2, [r2, #0]
 80005c2:	9201      	str	r2, [sp, #4]
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	4603      	mov	r3, r0
 80005c8:	460a      	mov	r2, r1
 80005ca:	4950      	ldr	r1, [pc, #320]	; (800070c <fsm_automatic_run+0x290>)
 80005cc:	4844      	ldr	r0, [pc, #272]	; (80006e0 <fsm_automatic_run+0x264>)
 80005ce:	f004 f9ad 	bl	800492c <siprintf>
 80005d2:	4603      	mov	r3, r0
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	4941      	ldr	r1, [pc, #260]	; (80006e0 <fsm_automatic_run+0x264>)
 80005dc:	4841      	ldr	r0, [pc, #260]	; (80006e4 <fsm_automatic_run+0x268>)
 80005de:	f004 f825 	bl	800462c <HAL_UART_Transmit>
								counter1_buffer1, counter1_buffer2, counter2_buffer1, counter2_buffer2), 1000);
			setTimer(1000, 0);
 80005e2:	2100      	movs	r1, #0
 80005e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e8:	f001 ff30 	bl	800244c <setTimer>
		}
		if(timer_flag[1] == 1){ //ped timeout
 80005ec:	4b3f      	ldr	r3, [pc, #252]	; (80006ec <fsm_automatic_run+0x270>)
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d118      	bne.n	8000626 <fsm_automatic_run+0x1aa>
			if(isPed == 1){
 80005f4:	4b3e      	ldr	r3, [pc, #248]	; (80006f0 <fsm_automatic_run+0x274>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d114      	bne.n	8000626 <fsm_automatic_run+0x1aa>
				isPed = 0;
 80005fc:	4b3c      	ldr	r3, [pc, #240]	; (80006f0 <fsm_automatic_run+0x274>)
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
				buzzer_set(0);
 8000602:	2000      	movs	r0, #0
 8000604:	f7ff ff12 	bl	800042c <buzzer_set>
				controlPedLights(OFF);
 8000608:	2067      	movs	r0, #103	; 0x67
 800060a:	f001 f9c7 	bl	800199c <controlPedLights>
				HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_OFF#\r\n"), 1000);
 800060e:	4940      	ldr	r1, [pc, #256]	; (8000710 <fsm_automatic_run+0x294>)
 8000610:	4833      	ldr	r0, [pc, #204]	; (80006e0 <fsm_automatic_run+0x264>)
 8000612:	f004 f98b 	bl	800492c <siprintf>
 8000616:	4603      	mov	r3, r0
 8000618:	b29a      	uxth	r2, r3
 800061a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061e:	4930      	ldr	r1, [pc, #192]	; (80006e0 <fsm_automatic_run+0x264>)
 8000620:	4830      	ldr	r0, [pc, #192]	; (80006e4 <fsm_automatic_run+0x268>)
 8000622:	f004 f803 	bl	800462c <HAL_UART_Transmit>
			}
		}
		if(isBTPressed(0) == 1){
 8000626:	2000      	movs	r0, #0
 8000628:	f7ff fe2c 	bl	8000284 <isBTPressed>
 800062c:	4603      	mov	r3, r0
 800062e:	2b01      	cmp	r3, #1
 8000630:	d11d      	bne.n	800066e <fsm_automatic_run+0x1f2>
			status = MANUAL_INIT;
 8000632:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <fsm_automatic_run+0x24c>)
 8000634:	2205      	movs	r2, #5
 8000636:	701a      	strb	r2, [r3, #0]
			clearTrafficLights();
 8000638:	f001 fa02 	bl	8001a40 <clearTrafficLights>
			if(isPed == 1){
 800063c:	4b2c      	ldr	r3, [pc, #176]	; (80006f0 <fsm_automatic_run+0x274>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d114      	bne.n	800066e <fsm_automatic_run+0x1f2>
				isPed = 0;
 8000644:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <fsm_automatic_run+0x274>)
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
				buzzer_set(0);
 800064a:	2000      	movs	r0, #0
 800064c:	f7ff feee 	bl	800042c <buzzer_set>
				controlPedLights(OFF);
 8000650:	2067      	movs	r0, #103	; 0x67
 8000652:	f001 f9a3 	bl	800199c <controlPedLights>
				HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_OFF#\r\n"), 1000);
 8000656:	492e      	ldr	r1, [pc, #184]	; (8000710 <fsm_automatic_run+0x294>)
 8000658:	4821      	ldr	r0, [pc, #132]	; (80006e0 <fsm_automatic_run+0x264>)
 800065a:	f004 f967 	bl	800492c <siprintf>
 800065e:	4603      	mov	r3, r0
 8000660:	b29a      	uxth	r2, r3
 8000662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000666:	491e      	ldr	r1, [pc, #120]	; (80006e0 <fsm_automatic_run+0x264>)
 8000668:	481e      	ldr	r0, [pc, #120]	; (80006e4 <fsm_automatic_run+0x268>)
 800066a:	f003 ffdf 	bl	800462c <HAL_UART_Transmit>
			}
		}
		if(isBTPressed(3) == 1){
 800066e:	2003      	movs	r0, #3
 8000670:	f7ff fe08 	bl	8000284 <isBTPressed>
 8000674:	4603      	mov	r3, r0
 8000676:	2b01      	cmp	r3, #1
 8000678:	d116      	bne.n	80006a8 <fsm_automatic_run+0x22c>
			isPed = 1;
 800067a:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <fsm_automatic_run+0x274>)
 800067c:	2201      	movs	r2, #1
 800067e:	601a      	str	r2, [r3, #0]
			setTimer(PEDESTRIAN_TIMER, 1);
 8000680:	2101      	movs	r1, #1
 8000682:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000686:	f001 fee1 	bl	800244c <setTimer>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_GREEN#\r\n"), 1000);
 800068a:	4922      	ldr	r1, [pc, #136]	; (8000714 <fsm_automatic_run+0x298>)
 800068c:	4814      	ldr	r0, [pc, #80]	; (80006e0 <fsm_automatic_run+0x264>)
 800068e:	f004 f94d 	bl	800492c <siprintf>
 8000692:	4603      	mov	r3, r0
 8000694:	b29a      	uxth	r2, r3
 8000696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800069a:	4911      	ldr	r1, [pc, #68]	; (80006e0 <fsm_automatic_run+0x264>)
 800069c:	4811      	ldr	r0, [pc, #68]	; (80006e4 <fsm_automatic_run+0x268>)
 800069e:	f003 ffc5 	bl	800462c <HAL_UART_Transmit>
			buzzer_set(1);
 80006a2:	2001      	movs	r0, #1
 80006a4:	f7ff fec2 	bl	800042c <buzzer_set>
		}
		if(isPed == 1){
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <fsm_automatic_run+0x274>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d102      	bne.n	80006b6 <fsm_automatic_run+0x23a>
			controlPedLights(GREEN);
 80006b0:	2065      	movs	r0, #101	; 0x65
 80006b2:	f001 f973 	bl	800199c <controlPedLights>
		}
		if(isPed == 0){
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <fsm_automatic_run+0x274>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	f040 82fb 	bne.w	8000cb6 <fsm_automatic_run+0x83a>
			controlPedLights(OFF);
 80006c0:	2067      	movs	r0, #103	; 0x67
 80006c2:	f001 f96b 	bl	800199c <controlPedLights>
		}
		break;
 80006c6:	e2f6      	b.n	8000cb6 <fsm_automatic_run+0x83a>
 80006c8:	20000192 	.word	0x20000192
 80006cc:	20000094 	.word	0x20000094
 80006d0:	20000144 	.word	0x20000144
 80006d4:	20000098 	.word	0x20000098
 80006d8:	20000148 	.word	0x20000148
 80006dc:	080052a8 	.word	0x080052a8
 80006e0:	20000160 	.word	0x20000160
 80006e4:	20000224 	.word	0x20000224
 80006e8:	080052b8 	.word	0x080052b8
 80006ec:	2000035c 	.word	0x2000035c
 80006f0:	2000015c 	.word	0x2000015c
 80006f4:	2000009c 	.word	0x2000009c
 80006f8:	66666667 	.word	0x66666667
 80006fc:	2000014c 	.word	0x2000014c
 8000700:	20000150 	.word	0x20000150
 8000704:	20000154 	.word	0x20000154
 8000708:	20000158 	.word	0x20000158
 800070c:	080052c8 	.word	0x080052c8
 8000710:	080052dc 	.word	0x080052dc
 8000714:	080052f0 	.word	0x080052f0
	case AUTO_GREEN:
		controlTrafficLights(GREEN, RED);
 8000718:	2164      	movs	r1, #100	; 0x64
 800071a:	2065      	movs	r0, #101	; 0x65
 800071c:	f001 f8ba 	bl	8001894 <controlTrafficLights>
		if(timer_flag[0] == 1){
 8000720:	4b66      	ldr	r3, [pc, #408]	; (80008bc <fsm_automatic_run+0x440>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b01      	cmp	r3, #1
 8000726:	d163      	bne.n	80007f0 <fsm_automatic_run+0x374>
			counter1--;
 8000728:	4b65      	ldr	r3, [pc, #404]	; (80008c0 <fsm_automatic_run+0x444>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	3b01      	subs	r3, #1
 800072e:	4a64      	ldr	r2, [pc, #400]	; (80008c0 <fsm_automatic_run+0x444>)
 8000730:	6013      	str	r3, [r2, #0]
			counter2--;
 8000732:	4b64      	ldr	r3, [pc, #400]	; (80008c4 <fsm_automatic_run+0x448>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	3b01      	subs	r3, #1
 8000738:	4a62      	ldr	r2, [pc, #392]	; (80008c4 <fsm_automatic_run+0x448>)
 800073a:	6013      	str	r3, [r2, #0]
			if(counter1 == 0){
 800073c:	4b60      	ldr	r3, [pc, #384]	; (80008c0 <fsm_automatic_run+0x444>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d106      	bne.n	8000752 <fsm_automatic_run+0x2d6>
				status = AUTO_YELLOW;
 8000744:	4b60      	ldr	r3, [pc, #384]	; (80008c8 <fsm_automatic_run+0x44c>)
 8000746:	2203      	movs	r2, #3
 8000748:	701a      	strb	r2, [r3, #0]
				counter1 = yellow;
 800074a:	4b60      	ldr	r3, [pc, #384]	; (80008cc <fsm_automatic_run+0x450>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a5c      	ldr	r2, [pc, #368]	; (80008c0 <fsm_automatic_run+0x444>)
 8000750:	6013      	str	r3, [r2, #0]
			}
			counter1_buffer1 = counter1 / 10;
 8000752:	4b5b      	ldr	r3, [pc, #364]	; (80008c0 <fsm_automatic_run+0x444>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a5e      	ldr	r2, [pc, #376]	; (80008d0 <fsm_automatic_run+0x454>)
 8000758:	fb82 1203 	smull	r1, r2, r2, r3
 800075c:	1092      	asrs	r2, r2, #2
 800075e:	17db      	asrs	r3, r3, #31
 8000760:	1ad3      	subs	r3, r2, r3
 8000762:	4a5c      	ldr	r2, [pc, #368]	; (80008d4 <fsm_automatic_run+0x458>)
 8000764:	6013      	str	r3, [r2, #0]
			counter1_buffer2 = counter1 % 10;
 8000766:	4b56      	ldr	r3, [pc, #344]	; (80008c0 <fsm_automatic_run+0x444>)
 8000768:	6819      	ldr	r1, [r3, #0]
 800076a:	4b59      	ldr	r3, [pc, #356]	; (80008d0 <fsm_automatic_run+0x454>)
 800076c:	fb83 2301 	smull	r2, r3, r3, r1
 8000770:	109a      	asrs	r2, r3, #2
 8000772:	17cb      	asrs	r3, r1, #31
 8000774:	1ad2      	subs	r2, r2, r3
 8000776:	4613      	mov	r3, r2
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	4413      	add	r3, r2
 800077c:	005b      	lsls	r3, r3, #1
 800077e:	1aca      	subs	r2, r1, r3
 8000780:	4b55      	ldr	r3, [pc, #340]	; (80008d8 <fsm_automatic_run+0x45c>)
 8000782:	601a      	str	r2, [r3, #0]
			counter2_buffer1 = counter2 / 10;
 8000784:	4b4f      	ldr	r3, [pc, #316]	; (80008c4 <fsm_automatic_run+0x448>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a51      	ldr	r2, [pc, #324]	; (80008d0 <fsm_automatic_run+0x454>)
 800078a:	fb82 1203 	smull	r1, r2, r2, r3
 800078e:	1092      	asrs	r2, r2, #2
 8000790:	17db      	asrs	r3, r3, #31
 8000792:	1ad3      	subs	r3, r2, r3
 8000794:	4a51      	ldr	r2, [pc, #324]	; (80008dc <fsm_automatic_run+0x460>)
 8000796:	6013      	str	r3, [r2, #0]
			counter2_buffer2 = counter2 % 10;
 8000798:	4b4a      	ldr	r3, [pc, #296]	; (80008c4 <fsm_automatic_run+0x448>)
 800079a:	6819      	ldr	r1, [r3, #0]
 800079c:	4b4c      	ldr	r3, [pc, #304]	; (80008d0 <fsm_automatic_run+0x454>)
 800079e:	fb83 2301 	smull	r2, r3, r3, r1
 80007a2:	109a      	asrs	r2, r3, #2
 80007a4:	17cb      	asrs	r3, r1, #31
 80007a6:	1ad2      	subs	r2, r2, r3
 80007a8:	4613      	mov	r3, r2
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	4413      	add	r3, r2
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	1aca      	subs	r2, r1, r3
 80007b2:	4b4b      	ldr	r3, [pc, #300]	; (80008e0 <fsm_automatic_run+0x464>)
 80007b4:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d||%d%d#\r\n",
 80007b6:	4b47      	ldr	r3, [pc, #284]	; (80008d4 <fsm_automatic_run+0x458>)
 80007b8:	6819      	ldr	r1, [r3, #0]
 80007ba:	4b47      	ldr	r3, [pc, #284]	; (80008d8 <fsm_automatic_run+0x45c>)
 80007bc:	6818      	ldr	r0, [r3, #0]
 80007be:	4b47      	ldr	r3, [pc, #284]	; (80008dc <fsm_automatic_run+0x460>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a47      	ldr	r2, [pc, #284]	; (80008e0 <fsm_automatic_run+0x464>)
 80007c4:	6812      	ldr	r2, [r2, #0]
 80007c6:	9201      	str	r2, [sp, #4]
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	4603      	mov	r3, r0
 80007cc:	460a      	mov	r2, r1
 80007ce:	4945      	ldr	r1, [pc, #276]	; (80008e4 <fsm_automatic_run+0x468>)
 80007d0:	4845      	ldr	r0, [pc, #276]	; (80008e8 <fsm_automatic_run+0x46c>)
 80007d2:	f004 f8ab 	bl	800492c <siprintf>
 80007d6:	4603      	mov	r3, r0
 80007d8:	b29a      	uxth	r2, r3
 80007da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007de:	4942      	ldr	r1, [pc, #264]	; (80008e8 <fsm_automatic_run+0x46c>)
 80007e0:	4842      	ldr	r0, [pc, #264]	; (80008ec <fsm_automatic_run+0x470>)
 80007e2:	f003 ff23 	bl	800462c <HAL_UART_Transmit>
													counter1_buffer1, counter1_buffer2, counter2_buffer1, counter2_buffer2), 1000);
			setTimer(1000, 0);
 80007e6:	2100      	movs	r1, #0
 80007e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007ec:	f001 fe2e 	bl	800244c <setTimer>
		}
		if(timer_flag[1] == 1){
 80007f0:	4b32      	ldr	r3, [pc, #200]	; (80008bc <fsm_automatic_run+0x440>)
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d115      	bne.n	8000824 <fsm_automatic_run+0x3a8>
			if(isPed == 1){
 80007f8:	4b3d      	ldr	r3, [pc, #244]	; (80008f0 <fsm_automatic_run+0x474>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d111      	bne.n	8000824 <fsm_automatic_run+0x3a8>
				isPed = 0;
 8000800:	4b3b      	ldr	r3, [pc, #236]	; (80008f0 <fsm_automatic_run+0x474>)
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
				controlPedLights(OFF);
 8000806:	2067      	movs	r0, #103	; 0x67
 8000808:	f001 f8c8 	bl	800199c <controlPedLights>
				HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_OFF#\r\n"), 1000);
 800080c:	4939      	ldr	r1, [pc, #228]	; (80008f4 <fsm_automatic_run+0x478>)
 800080e:	4836      	ldr	r0, [pc, #216]	; (80008e8 <fsm_automatic_run+0x46c>)
 8000810:	f004 f88c 	bl	800492c <siprintf>
 8000814:	4603      	mov	r3, r0
 8000816:	b29a      	uxth	r2, r3
 8000818:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800081c:	4932      	ldr	r1, [pc, #200]	; (80008e8 <fsm_automatic_run+0x46c>)
 800081e:	4833      	ldr	r0, [pc, #204]	; (80008ec <fsm_automatic_run+0x470>)
 8000820:	f003 ff04 	bl	800462c <HAL_UART_Transmit>
			}
		}
		if(isBTPressed(0) == 1){
 8000824:	2000      	movs	r0, #0
 8000826:	f7ff fd2d 	bl	8000284 <isBTPressed>
 800082a:	4603      	mov	r3, r0
 800082c:	2b01      	cmp	r3, #1
 800082e:	d11a      	bne.n	8000866 <fsm_automatic_run+0x3ea>
			status = MANUAL_INIT;
 8000830:	4b25      	ldr	r3, [pc, #148]	; (80008c8 <fsm_automatic_run+0x44c>)
 8000832:	2205      	movs	r2, #5
 8000834:	701a      	strb	r2, [r3, #0]
			clearTrafficLights();
 8000836:	f001 f903 	bl	8001a40 <clearTrafficLights>
			if(isPed == 1){
 800083a:	4b2d      	ldr	r3, [pc, #180]	; (80008f0 <fsm_automatic_run+0x474>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d111      	bne.n	8000866 <fsm_automatic_run+0x3ea>
				isPed = 0;
 8000842:	4b2b      	ldr	r3, [pc, #172]	; (80008f0 <fsm_automatic_run+0x474>)
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
				controlPedLights(OFF);
 8000848:	2067      	movs	r0, #103	; 0x67
 800084a:	f001 f8a7 	bl	800199c <controlPedLights>
				HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_OFF#\r\n"), 1000);
 800084e:	4929      	ldr	r1, [pc, #164]	; (80008f4 <fsm_automatic_run+0x478>)
 8000850:	4825      	ldr	r0, [pc, #148]	; (80008e8 <fsm_automatic_run+0x46c>)
 8000852:	f004 f86b 	bl	800492c <siprintf>
 8000856:	4603      	mov	r3, r0
 8000858:	b29a      	uxth	r2, r3
 800085a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085e:	4922      	ldr	r1, [pc, #136]	; (80008e8 <fsm_automatic_run+0x46c>)
 8000860:	4822      	ldr	r0, [pc, #136]	; (80008ec <fsm_automatic_run+0x470>)
 8000862:	f003 fee3 	bl	800462c <HAL_UART_Transmit>
			}
		}
		if(isBTPressed(3) == 1){
 8000866:	2003      	movs	r0, #3
 8000868:	f7ff fd0c 	bl	8000284 <isBTPressed>
 800086c:	4603      	mov	r3, r0
 800086e:	2b01      	cmp	r3, #1
 8000870:	d113      	bne.n	800089a <fsm_automatic_run+0x41e>
			isPed = 1;
 8000872:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <fsm_automatic_run+0x474>)
 8000874:	2201      	movs	r2, #1
 8000876:	601a      	str	r2, [r3, #0]
			setTimer(PEDESTRIAN_TIMER, 1);
 8000878:	2101      	movs	r1, #1
 800087a:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800087e:	f001 fde5 	bl	800244c <setTimer>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_RED#\r\n"), 1000);
 8000882:	491d      	ldr	r1, [pc, #116]	; (80008f8 <fsm_automatic_run+0x47c>)
 8000884:	4818      	ldr	r0, [pc, #96]	; (80008e8 <fsm_automatic_run+0x46c>)
 8000886:	f004 f851 	bl	800492c <siprintf>
 800088a:	4603      	mov	r3, r0
 800088c:	b29a      	uxth	r2, r3
 800088e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000892:	4915      	ldr	r1, [pc, #84]	; (80008e8 <fsm_automatic_run+0x46c>)
 8000894:	4815      	ldr	r0, [pc, #84]	; (80008ec <fsm_automatic_run+0x470>)
 8000896:	f003 fec9 	bl	800462c <HAL_UART_Transmit>
		}
		if(isPed == 1){
 800089a:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <fsm_automatic_run+0x474>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d102      	bne.n	80008a8 <fsm_automatic_run+0x42c>
			controlPedLights(RED);
 80008a2:	2064      	movs	r0, #100	; 0x64
 80008a4:	f001 f87a 	bl	800199c <controlPedLights>
		}
		if(isPed == 0){
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <fsm_automatic_run+0x474>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	f040 8204 	bne.w	8000cba <fsm_automatic_run+0x83e>
			controlPedLights(OFF);
 80008b2:	2067      	movs	r0, #103	; 0x67
 80008b4:	f001 f872 	bl	800199c <controlPedLights>
		}
		break;
 80008b8:	e1ff      	b.n	8000cba <fsm_automatic_run+0x83e>
 80008ba:	bf00      	nop
 80008bc:	2000035c 	.word	0x2000035c
 80008c0:	20000144 	.word	0x20000144
 80008c4:	20000148 	.word	0x20000148
 80008c8:	20000192 	.word	0x20000192
 80008cc:	2000009c 	.word	0x2000009c
 80008d0:	66666667 	.word	0x66666667
 80008d4:	2000014c 	.word	0x2000014c
 80008d8:	20000150 	.word	0x20000150
 80008dc:	20000154 	.word	0x20000154
 80008e0:	20000158 	.word	0x20000158
 80008e4:	080052c8 	.word	0x080052c8
 80008e8:	20000160 	.word	0x20000160
 80008ec:	20000224 	.word	0x20000224
 80008f0:	2000015c 	.word	0x2000015c
 80008f4:	080052dc 	.word	0x080052dc
 80008f8:	08005308 	.word	0x08005308
	case AUTO_YELLOW:
		controlTrafficLights(YELLOW, RED);
 80008fc:	2164      	movs	r1, #100	; 0x64
 80008fe:	2066      	movs	r0, #102	; 0x66
 8000900:	f000 ffc8 	bl	8001894 <controlTrafficLights>
		if(timer_flag[0] == 1){
 8000904:	4b6b      	ldr	r3, [pc, #428]	; (8000ab4 <fsm_automatic_run+0x638>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d16e      	bne.n	80009ea <fsm_automatic_run+0x56e>
			counter1--;
 800090c:	4b6a      	ldr	r3, [pc, #424]	; (8000ab8 <fsm_automatic_run+0x63c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	3b01      	subs	r3, #1
 8000912:	4a69      	ldr	r2, [pc, #420]	; (8000ab8 <fsm_automatic_run+0x63c>)
 8000914:	6013      	str	r3, [r2, #0]
			counter2--;
 8000916:	4b69      	ldr	r3, [pc, #420]	; (8000abc <fsm_automatic_run+0x640>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	3b01      	subs	r3, #1
 800091c:	4a67      	ldr	r2, [pc, #412]	; (8000abc <fsm_automatic_run+0x640>)
 800091e:	6013      	str	r3, [r2, #0]
			if(counter1 <= 0){
 8000920:	4b65      	ldr	r3, [pc, #404]	; (8000ab8 <fsm_automatic_run+0x63c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	dc11      	bgt.n	800094c <fsm_automatic_run+0x4d0>
				status = AUTO_RED;
 8000928:	4b65      	ldr	r3, [pc, #404]	; (8000ac0 <fsm_automatic_run+0x644>)
 800092a:	2201      	movs	r2, #1
 800092c:	701a      	strb	r2, [r3, #0]
				counter1 = red;
 800092e:	4b65      	ldr	r3, [pc, #404]	; (8000ac4 <fsm_automatic_run+0x648>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a61      	ldr	r2, [pc, #388]	; (8000ab8 <fsm_automatic_run+0x63c>)
 8000934:	6013      	str	r3, [r2, #0]
				counter2 = green;
 8000936:	4b64      	ldr	r3, [pc, #400]	; (8000ac8 <fsm_automatic_run+0x64c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a60      	ldr	r2, [pc, #384]	; (8000abc <fsm_automatic_run+0x640>)
 800093c:	6013      	str	r3, [r2, #0]
				if(isPed == 1){
 800093e:	4b63      	ldr	r3, [pc, #396]	; (8000acc <fsm_automatic_run+0x650>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d102      	bne.n	800094c <fsm_automatic_run+0x4d0>
					buzzer_set(1);
 8000946:	2001      	movs	r0, #1
 8000948:	f7ff fd70 	bl	800042c <buzzer_set>
				}
			}
			counter1_buffer1 = counter1 / 10;
 800094c:	4b5a      	ldr	r3, [pc, #360]	; (8000ab8 <fsm_automatic_run+0x63c>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a5f      	ldr	r2, [pc, #380]	; (8000ad0 <fsm_automatic_run+0x654>)
 8000952:	fb82 1203 	smull	r1, r2, r2, r3
 8000956:	1092      	asrs	r2, r2, #2
 8000958:	17db      	asrs	r3, r3, #31
 800095a:	1ad3      	subs	r3, r2, r3
 800095c:	4a5d      	ldr	r2, [pc, #372]	; (8000ad4 <fsm_automatic_run+0x658>)
 800095e:	6013      	str	r3, [r2, #0]
			counter1_buffer2 = counter1 % 10;
 8000960:	4b55      	ldr	r3, [pc, #340]	; (8000ab8 <fsm_automatic_run+0x63c>)
 8000962:	6819      	ldr	r1, [r3, #0]
 8000964:	4b5a      	ldr	r3, [pc, #360]	; (8000ad0 <fsm_automatic_run+0x654>)
 8000966:	fb83 2301 	smull	r2, r3, r3, r1
 800096a:	109a      	asrs	r2, r3, #2
 800096c:	17cb      	asrs	r3, r1, #31
 800096e:	1ad2      	subs	r2, r2, r3
 8000970:	4613      	mov	r3, r2
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	4413      	add	r3, r2
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	1aca      	subs	r2, r1, r3
 800097a:	4b57      	ldr	r3, [pc, #348]	; (8000ad8 <fsm_automatic_run+0x65c>)
 800097c:	601a      	str	r2, [r3, #0]
			counter2_buffer1 = counter2 / 10;
 800097e:	4b4f      	ldr	r3, [pc, #316]	; (8000abc <fsm_automatic_run+0x640>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a53      	ldr	r2, [pc, #332]	; (8000ad0 <fsm_automatic_run+0x654>)
 8000984:	fb82 1203 	smull	r1, r2, r2, r3
 8000988:	1092      	asrs	r2, r2, #2
 800098a:	17db      	asrs	r3, r3, #31
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	4a53      	ldr	r2, [pc, #332]	; (8000adc <fsm_automatic_run+0x660>)
 8000990:	6013      	str	r3, [r2, #0]
			counter2_buffer2 = counter2 % 10;
 8000992:	4b4a      	ldr	r3, [pc, #296]	; (8000abc <fsm_automatic_run+0x640>)
 8000994:	6819      	ldr	r1, [r3, #0]
 8000996:	4b4e      	ldr	r3, [pc, #312]	; (8000ad0 <fsm_automatic_run+0x654>)
 8000998:	fb83 2301 	smull	r2, r3, r3, r1
 800099c:	109a      	asrs	r2, r3, #2
 800099e:	17cb      	asrs	r3, r1, #31
 80009a0:	1ad2      	subs	r2, r2, r3
 80009a2:	4613      	mov	r3, r2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	4413      	add	r3, r2
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	1aca      	subs	r2, r1, r3
 80009ac:	4b4c      	ldr	r3, [pc, #304]	; (8000ae0 <fsm_automatic_run+0x664>)
 80009ae:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d||%d%d#\r\n",
 80009b0:	4b48      	ldr	r3, [pc, #288]	; (8000ad4 <fsm_automatic_run+0x658>)
 80009b2:	6819      	ldr	r1, [r3, #0]
 80009b4:	4b48      	ldr	r3, [pc, #288]	; (8000ad8 <fsm_automatic_run+0x65c>)
 80009b6:	6818      	ldr	r0, [r3, #0]
 80009b8:	4b48      	ldr	r3, [pc, #288]	; (8000adc <fsm_automatic_run+0x660>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a48      	ldr	r2, [pc, #288]	; (8000ae0 <fsm_automatic_run+0x664>)
 80009be:	6812      	ldr	r2, [r2, #0]
 80009c0:	9201      	str	r2, [sp, #4]
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	4603      	mov	r3, r0
 80009c6:	460a      	mov	r2, r1
 80009c8:	4946      	ldr	r1, [pc, #280]	; (8000ae4 <fsm_automatic_run+0x668>)
 80009ca:	4847      	ldr	r0, [pc, #284]	; (8000ae8 <fsm_automatic_run+0x66c>)
 80009cc:	f003 ffae 	bl	800492c <siprintf>
 80009d0:	4603      	mov	r3, r0
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d8:	4943      	ldr	r1, [pc, #268]	; (8000ae8 <fsm_automatic_run+0x66c>)
 80009da:	4844      	ldr	r0, [pc, #272]	; (8000aec <fsm_automatic_run+0x670>)
 80009dc:	f003 fe26 	bl	800462c <HAL_UART_Transmit>
																counter1_buffer1, counter1_buffer2, counter2_buffer1, counter2_buffer2), 1000);
			setTimer(1000, 0);
 80009e0:	2100      	movs	r1, #0
 80009e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009e6:	f001 fd31 	bl	800244c <setTimer>
		}
		if(timer_flag[1] == 1){
 80009ea:	4b32      	ldr	r3, [pc, #200]	; (8000ab4 <fsm_automatic_run+0x638>)
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d115      	bne.n	8000a1e <fsm_automatic_run+0x5a2>
			if(isPed == 1){
 80009f2:	4b36      	ldr	r3, [pc, #216]	; (8000acc <fsm_automatic_run+0x650>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d111      	bne.n	8000a1e <fsm_automatic_run+0x5a2>
				isPed = 0;
 80009fa:	4b34      	ldr	r3, [pc, #208]	; (8000acc <fsm_automatic_run+0x650>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
				controlPedLights(OFF);
 8000a00:	2067      	movs	r0, #103	; 0x67
 8000a02:	f000 ffcb 	bl	800199c <controlPedLights>
				HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_OFF#\r\n"), 1000);
 8000a06:	493a      	ldr	r1, [pc, #232]	; (8000af0 <fsm_automatic_run+0x674>)
 8000a08:	4837      	ldr	r0, [pc, #220]	; (8000ae8 <fsm_automatic_run+0x66c>)
 8000a0a:	f003 ff8f 	bl	800492c <siprintf>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a16:	4934      	ldr	r1, [pc, #208]	; (8000ae8 <fsm_automatic_run+0x66c>)
 8000a18:	4834      	ldr	r0, [pc, #208]	; (8000aec <fsm_automatic_run+0x670>)
 8000a1a:	f003 fe07 	bl	800462c <HAL_UART_Transmit>
			}
		}
		if(isBTPressed(0) == 1){
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f7ff fc30 	bl	8000284 <isBTPressed>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d11a      	bne.n	8000a60 <fsm_automatic_run+0x5e4>
			status = MANUAL_INIT;
 8000a2a:	4b25      	ldr	r3, [pc, #148]	; (8000ac0 <fsm_automatic_run+0x644>)
 8000a2c:	2205      	movs	r2, #5
 8000a2e:	701a      	strb	r2, [r3, #0]
			clearTrafficLights();
 8000a30:	f001 f806 	bl	8001a40 <clearTrafficLights>
			if(isPed == 1){
 8000a34:	4b25      	ldr	r3, [pc, #148]	; (8000acc <fsm_automatic_run+0x650>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d111      	bne.n	8000a60 <fsm_automatic_run+0x5e4>
				isPed = 0;
 8000a3c:	4b23      	ldr	r3, [pc, #140]	; (8000acc <fsm_automatic_run+0x650>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
				controlPedLights(OFF);
 8000a42:	2067      	movs	r0, #103	; 0x67
 8000a44:	f000 ffaa 	bl	800199c <controlPedLights>
				HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_OFF#\r\n"), 1000);
 8000a48:	4929      	ldr	r1, [pc, #164]	; (8000af0 <fsm_automatic_run+0x674>)
 8000a4a:	4827      	ldr	r0, [pc, #156]	; (8000ae8 <fsm_automatic_run+0x66c>)
 8000a4c:	f003 ff6e 	bl	800492c <siprintf>
 8000a50:	4603      	mov	r3, r0
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a58:	4923      	ldr	r1, [pc, #140]	; (8000ae8 <fsm_automatic_run+0x66c>)
 8000a5a:	4824      	ldr	r0, [pc, #144]	; (8000aec <fsm_automatic_run+0x670>)
 8000a5c:	f003 fde6 	bl	800462c <HAL_UART_Transmit>
			}
		}
		if(isBTPressed(3) == 1){
 8000a60:	2003      	movs	r0, #3
 8000a62:	f7ff fc0f 	bl	8000284 <isBTPressed>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d113      	bne.n	8000a94 <fsm_automatic_run+0x618>
			isPed = 1;
 8000a6c:	4b17      	ldr	r3, [pc, #92]	; (8000acc <fsm_automatic_run+0x650>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	601a      	str	r2, [r3, #0]
			setTimer(PEDESTRIAN_TIMER, 1);
 8000a72:	2101      	movs	r1, #1
 8000a74:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000a78:	f001 fce8 	bl	800244c <setTimer>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_RED#\r\n"), 1000);
 8000a7c:	491d      	ldr	r1, [pc, #116]	; (8000af4 <fsm_automatic_run+0x678>)
 8000a7e:	481a      	ldr	r0, [pc, #104]	; (8000ae8 <fsm_automatic_run+0x66c>)
 8000a80:	f003 ff54 	bl	800492c <siprintf>
 8000a84:	4603      	mov	r3, r0
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8c:	4916      	ldr	r1, [pc, #88]	; (8000ae8 <fsm_automatic_run+0x66c>)
 8000a8e:	4817      	ldr	r0, [pc, #92]	; (8000aec <fsm_automatic_run+0x670>)
 8000a90:	f003 fdcc 	bl	800462c <HAL_UART_Transmit>
		}
		if(isPed == 1){
 8000a94:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <fsm_automatic_run+0x650>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d102      	bne.n	8000aa2 <fsm_automatic_run+0x626>
			controlPedLights(RED);
 8000a9c:	2064      	movs	r0, #100	; 0x64
 8000a9e:	f000 ff7d 	bl	800199c <controlPedLights>
		}
		if(isPed == 0){
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <fsm_automatic_run+0x650>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	f040 8109 	bne.w	8000cbe <fsm_automatic_run+0x842>
			controlPedLights(OFF);
 8000aac:	2067      	movs	r0, #103	; 0x67
 8000aae:	f000 ff75 	bl	800199c <controlPedLights>
		}
		break;
 8000ab2:	e104      	b.n	8000cbe <fsm_automatic_run+0x842>
 8000ab4:	2000035c 	.word	0x2000035c
 8000ab8:	20000144 	.word	0x20000144
 8000abc:	20000148 	.word	0x20000148
 8000ac0:	20000192 	.word	0x20000192
 8000ac4:	20000094 	.word	0x20000094
 8000ac8:	20000098 	.word	0x20000098
 8000acc:	2000015c 	.word	0x2000015c
 8000ad0:	66666667 	.word	0x66666667
 8000ad4:	2000014c 	.word	0x2000014c
 8000ad8:	20000150 	.word	0x20000150
 8000adc:	20000154 	.word	0x20000154
 8000ae0:	20000158 	.word	0x20000158
 8000ae4:	080052c8 	.word	0x080052c8
 8000ae8:	20000160 	.word	0x20000160
 8000aec:	20000224 	.word	0x20000224
 8000af0:	080052dc 	.word	0x080052dc
 8000af4:	08005308 	.word	0x08005308
	case AUTO_RED1_YELLOW2:
		controlTrafficLights(RED, YELLOW);
 8000af8:	2166      	movs	r1, #102	; 0x66
 8000afa:	2064      	movs	r0, #100	; 0x64
 8000afc:	f000 feca 	bl	8001894 <controlTrafficLights>
		if(timer_flag[0] == 1){
 8000b00:	4b72      	ldr	r3, [pc, #456]	; (8000ccc <fsm_automatic_run+0x850>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d16a      	bne.n	8000bde <fsm_automatic_run+0x762>
			counter1--;
 8000b08:	4b71      	ldr	r3, [pc, #452]	; (8000cd0 <fsm_automatic_run+0x854>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	4a70      	ldr	r2, [pc, #448]	; (8000cd0 <fsm_automatic_run+0x854>)
 8000b10:	6013      	str	r3, [r2, #0]
			counter2--;
 8000b12:	4b70      	ldr	r3, [pc, #448]	; (8000cd4 <fsm_automatic_run+0x858>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	4a6e      	ldr	r2, [pc, #440]	; (8000cd4 <fsm_automatic_run+0x858>)
 8000b1a:	6013      	str	r3, [r2, #0]
			if(counter2 == 0){
 8000b1c:	4b6d      	ldr	r3, [pc, #436]	; (8000cd4 <fsm_automatic_run+0x858>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d10d      	bne.n	8000b40 <fsm_automatic_run+0x6c4>
				counter1 = green;
 8000b24:	4b6c      	ldr	r3, [pc, #432]	; (8000cd8 <fsm_automatic_run+0x85c>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a69      	ldr	r2, [pc, #420]	; (8000cd0 <fsm_automatic_run+0x854>)
 8000b2a:	6013      	str	r3, [r2, #0]
				counter2 = red;
 8000b2c:	4b6b      	ldr	r3, [pc, #428]	; (8000cdc <fsm_automatic_run+0x860>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a68      	ldr	r2, [pc, #416]	; (8000cd4 <fsm_automatic_run+0x858>)
 8000b32:	6013      	str	r3, [r2, #0]
				status = AUTO_GREEN;
 8000b34:	4b6a      	ldr	r3, [pc, #424]	; (8000ce0 <fsm_automatic_run+0x864>)
 8000b36:	2202      	movs	r2, #2
 8000b38:	701a      	strb	r2, [r3, #0]
				buzzer_set(0);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f7ff fc76 	bl	800042c <buzzer_set>
			}
			counter1_buffer1 = counter1 / 10;
 8000b40:	4b63      	ldr	r3, [pc, #396]	; (8000cd0 <fsm_automatic_run+0x854>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a67      	ldr	r2, [pc, #412]	; (8000ce4 <fsm_automatic_run+0x868>)
 8000b46:	fb82 1203 	smull	r1, r2, r2, r3
 8000b4a:	1092      	asrs	r2, r2, #2
 8000b4c:	17db      	asrs	r3, r3, #31
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	4a65      	ldr	r2, [pc, #404]	; (8000ce8 <fsm_automatic_run+0x86c>)
 8000b52:	6013      	str	r3, [r2, #0]
			counter1_buffer2 = counter1 % 10;
 8000b54:	4b5e      	ldr	r3, [pc, #376]	; (8000cd0 <fsm_automatic_run+0x854>)
 8000b56:	6819      	ldr	r1, [r3, #0]
 8000b58:	4b62      	ldr	r3, [pc, #392]	; (8000ce4 <fsm_automatic_run+0x868>)
 8000b5a:	fb83 2301 	smull	r2, r3, r3, r1
 8000b5e:	109a      	asrs	r2, r3, #2
 8000b60:	17cb      	asrs	r3, r1, #31
 8000b62:	1ad2      	subs	r2, r2, r3
 8000b64:	4613      	mov	r3, r2
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	4413      	add	r3, r2
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	1aca      	subs	r2, r1, r3
 8000b6e:	4b5f      	ldr	r3, [pc, #380]	; (8000cec <fsm_automatic_run+0x870>)
 8000b70:	601a      	str	r2, [r3, #0]
			counter2_buffer1 = counter2 / 10;
 8000b72:	4b58      	ldr	r3, [pc, #352]	; (8000cd4 <fsm_automatic_run+0x858>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a5b      	ldr	r2, [pc, #364]	; (8000ce4 <fsm_automatic_run+0x868>)
 8000b78:	fb82 1203 	smull	r1, r2, r2, r3
 8000b7c:	1092      	asrs	r2, r2, #2
 8000b7e:	17db      	asrs	r3, r3, #31
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	4a5b      	ldr	r2, [pc, #364]	; (8000cf0 <fsm_automatic_run+0x874>)
 8000b84:	6013      	str	r3, [r2, #0]
			counter2_buffer2 = counter2 % 10;
 8000b86:	4b53      	ldr	r3, [pc, #332]	; (8000cd4 <fsm_automatic_run+0x858>)
 8000b88:	6819      	ldr	r1, [r3, #0]
 8000b8a:	4b56      	ldr	r3, [pc, #344]	; (8000ce4 <fsm_automatic_run+0x868>)
 8000b8c:	fb83 2301 	smull	r2, r3, r3, r1
 8000b90:	109a      	asrs	r2, r3, #2
 8000b92:	17cb      	asrs	r3, r1, #31
 8000b94:	1ad2      	subs	r2, r2, r3
 8000b96:	4613      	mov	r3, r2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	4413      	add	r3, r2
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	1aca      	subs	r2, r1, r3
 8000ba0:	4b54      	ldr	r3, [pc, #336]	; (8000cf4 <fsm_automatic_run+0x878>)
 8000ba2:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d||%d%d#\r\n",
 8000ba4:	4b50      	ldr	r3, [pc, #320]	; (8000ce8 <fsm_automatic_run+0x86c>)
 8000ba6:	6819      	ldr	r1, [r3, #0]
 8000ba8:	4b50      	ldr	r3, [pc, #320]	; (8000cec <fsm_automatic_run+0x870>)
 8000baa:	6818      	ldr	r0, [r3, #0]
 8000bac:	4b50      	ldr	r3, [pc, #320]	; (8000cf0 <fsm_automatic_run+0x874>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a50      	ldr	r2, [pc, #320]	; (8000cf4 <fsm_automatic_run+0x878>)
 8000bb2:	6812      	ldr	r2, [r2, #0]
 8000bb4:	9201      	str	r2, [sp, #4]
 8000bb6:	9300      	str	r3, [sp, #0]
 8000bb8:	4603      	mov	r3, r0
 8000bba:	460a      	mov	r2, r1
 8000bbc:	494e      	ldr	r1, [pc, #312]	; (8000cf8 <fsm_automatic_run+0x87c>)
 8000bbe:	484f      	ldr	r0, [pc, #316]	; (8000cfc <fsm_automatic_run+0x880>)
 8000bc0:	f003 feb4 	bl	800492c <siprintf>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bcc:	494b      	ldr	r1, [pc, #300]	; (8000cfc <fsm_automatic_run+0x880>)
 8000bce:	484c      	ldr	r0, [pc, #304]	; (8000d00 <fsm_automatic_run+0x884>)
 8000bd0:	f003 fd2c 	bl	800462c <HAL_UART_Transmit>
																counter1_buffer1, counter1_buffer2, counter2_buffer1, counter2_buffer2), 1000);

			setTimer(1000, 0);
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bda:	f001 fc37 	bl	800244c <setTimer>
		}
		if(timer_flag[1] == 1){
 8000bde:	4b3b      	ldr	r3, [pc, #236]	; (8000ccc <fsm_automatic_run+0x850>)
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d118      	bne.n	8000c18 <fsm_automatic_run+0x79c>
			if(isPed == 1){
 8000be6:	4b47      	ldr	r3, [pc, #284]	; (8000d04 <fsm_automatic_run+0x888>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d114      	bne.n	8000c18 <fsm_automatic_run+0x79c>
				isPed = 0;
 8000bee:	4b45      	ldr	r3, [pc, #276]	; (8000d04 <fsm_automatic_run+0x888>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
				buzzer_set(0);
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f7ff fc19 	bl	800042c <buzzer_set>
				controlPedLights(OFF);
 8000bfa:	2067      	movs	r0, #103	; 0x67
 8000bfc:	f000 fece 	bl	800199c <controlPedLights>
				HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_OFF#\r\n"), 1000);
 8000c00:	4941      	ldr	r1, [pc, #260]	; (8000d08 <fsm_automatic_run+0x88c>)
 8000c02:	483e      	ldr	r0, [pc, #248]	; (8000cfc <fsm_automatic_run+0x880>)
 8000c04:	f003 fe92 	bl	800492c <siprintf>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c10:	493a      	ldr	r1, [pc, #232]	; (8000cfc <fsm_automatic_run+0x880>)
 8000c12:	483b      	ldr	r0, [pc, #236]	; (8000d00 <fsm_automatic_run+0x884>)
 8000c14:	f003 fd0a 	bl	800462c <HAL_UART_Transmit>
			}
		}
		if(isBTPressed(0) == 1){
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff fb33 	bl	8000284 <isBTPressed>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d11d      	bne.n	8000c60 <fsm_automatic_run+0x7e4>
			status = MANUAL_INIT;
 8000c24:	4b2e      	ldr	r3, [pc, #184]	; (8000ce0 <fsm_automatic_run+0x864>)
 8000c26:	2205      	movs	r2, #5
 8000c28:	701a      	strb	r2, [r3, #0]
			clearTrafficLights();
 8000c2a:	f000 ff09 	bl	8001a40 <clearTrafficLights>
			if(isPed == 1){
 8000c2e:	4b35      	ldr	r3, [pc, #212]	; (8000d04 <fsm_automatic_run+0x888>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d114      	bne.n	8000c60 <fsm_automatic_run+0x7e4>
				isPed = 0;
 8000c36:	4b33      	ldr	r3, [pc, #204]	; (8000d04 <fsm_automatic_run+0x888>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
				buzzer_set(0);
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff fbf5 	bl	800042c <buzzer_set>
				controlPedLights(OFF);
 8000c42:	2067      	movs	r0, #103	; 0x67
 8000c44:	f000 feaa 	bl	800199c <controlPedLights>
				HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_OFF#\r\n"), 1000);
 8000c48:	492f      	ldr	r1, [pc, #188]	; (8000d08 <fsm_automatic_run+0x88c>)
 8000c4a:	482c      	ldr	r0, [pc, #176]	; (8000cfc <fsm_automatic_run+0x880>)
 8000c4c:	f003 fe6e 	bl	800492c <siprintf>
 8000c50:	4603      	mov	r3, r0
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c58:	4928      	ldr	r1, [pc, #160]	; (8000cfc <fsm_automatic_run+0x880>)
 8000c5a:	4829      	ldr	r0, [pc, #164]	; (8000d00 <fsm_automatic_run+0x884>)
 8000c5c:	f003 fce6 	bl	800462c <HAL_UART_Transmit>
			}
		}
		if(isBTPressed(3) == 1){
 8000c60:	2003      	movs	r0, #3
 8000c62:	f7ff fb0f 	bl	8000284 <isBTPressed>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d113      	bne.n	8000c94 <fsm_automatic_run+0x818>
			isPed = 1;
 8000c6c:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <fsm_automatic_run+0x888>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	601a      	str	r2, [r3, #0]
			setTimer(PEDESTRIAN_TIMER, 1);
 8000c72:	2101      	movs	r1, #1
 8000c74:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000c78:	f001 fbe8 	bl	800244c <setTimer>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_YELLOW#\r\n"), 1000);
 8000c7c:	4923      	ldr	r1, [pc, #140]	; (8000d0c <fsm_automatic_run+0x890>)
 8000c7e:	481f      	ldr	r0, [pc, #124]	; (8000cfc <fsm_automatic_run+0x880>)
 8000c80:	f003 fe54 	bl	800492c <siprintf>
 8000c84:	4603      	mov	r3, r0
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8c:	491b      	ldr	r1, [pc, #108]	; (8000cfc <fsm_automatic_run+0x880>)
 8000c8e:	481c      	ldr	r0, [pc, #112]	; (8000d00 <fsm_automatic_run+0x884>)
 8000c90:	f003 fccc 	bl	800462c <HAL_UART_Transmit>
		}
		if(isPed == 1){
 8000c94:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <fsm_automatic_run+0x888>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d102      	bne.n	8000ca2 <fsm_automatic_run+0x826>
			controlPedLights(YELLOW);
 8000c9c:	2066      	movs	r0, #102	; 0x66
 8000c9e:	f000 fe7d 	bl	800199c <controlPedLights>
		}
		if(isPed == 0){
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <fsm_automatic_run+0x888>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10b      	bne.n	8000cc2 <fsm_automatic_run+0x846>
			controlPedLights(OFF);
 8000caa:	2067      	movs	r0, #103	; 0x67
 8000cac:	f000 fe76 	bl	800199c <controlPedLights>
		}
		break;
 8000cb0:	e007      	b.n	8000cc2 <fsm_automatic_run+0x846>
	default:
		break;
 8000cb2:	bf00      	nop
 8000cb4:	e006      	b.n	8000cc4 <fsm_automatic_run+0x848>
		break;
 8000cb6:	bf00      	nop
 8000cb8:	e004      	b.n	8000cc4 <fsm_automatic_run+0x848>
		break;
 8000cba:	bf00      	nop
 8000cbc:	e002      	b.n	8000cc4 <fsm_automatic_run+0x848>
		break;
 8000cbe:	bf00      	nop
 8000cc0:	e000      	b.n	8000cc4 <fsm_automatic_run+0x848>
		break;
 8000cc2:	bf00      	nop
	}
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	2000035c 	.word	0x2000035c
 8000cd0:	20000144 	.word	0x20000144
 8000cd4:	20000148 	.word	0x20000148
 8000cd8:	20000098 	.word	0x20000098
 8000cdc:	20000094 	.word	0x20000094
 8000ce0:	20000192 	.word	0x20000192
 8000ce4:	66666667 	.word	0x66666667
 8000ce8:	2000014c 	.word	0x2000014c
 8000cec:	20000150 	.word	0x20000150
 8000cf0:	20000154 	.word	0x20000154
 8000cf4:	20000158 	.word	0x20000158
 8000cf8:	080052c8 	.word	0x080052c8
 8000cfc:	20000160 	.word	0x20000160
 8000d00:	20000224 	.word	0x20000224
 8000d04:	2000015c 	.word	0x2000015c
 8000d08:	080052dc 	.word	0x080052dc
 8000d0c:	0800531c 	.word	0x0800531c

08000d10 <fsm_manual_run>:
#include "button.h"
#include "buzzer.h"

// Used timers: timer[2]: Ped timeout(5000)

void fsm_manual_run(){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	switch(status){
 8000d14:	4b83      	ldr	r3, [pc, #524]	; (8000f24 <fsm_manual_run+0x214>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	3b05      	subs	r3, #5
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	f200 81ee 	bhi.w	80010fc <fsm_manual_run+0x3ec>
 8000d20:	a201      	add	r2, pc, #4	; (adr r2, 8000d28 <fsm_manual_run+0x18>)
 8000d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d26:	bf00      	nop
 8000d28:	08000d3d 	.word	0x08000d3d
 8000d2c:	08000d63 	.word	0x08000d63
 8000d30:	08000e43 	.word	0x08000e43
 8000d34:	08000f49 	.word	0x08000f49
 8000d38:	0800101f 	.word	0x0800101f
	case MANUAL_INIT:
		status = MANUAL_RED;
 8000d3c:	4b79      	ldr	r3, [pc, #484]	; (8000f24 <fsm_manual_run+0x214>)
 8000d3e:	2206      	movs	r2, #6
 8000d40:	701a      	strb	r2, [r3, #0]
		buzzer_set(0);
 8000d42:	2000      	movs	r0, #0
 8000d44:	f7ff fb72 	bl	800042c <buzzer_set>
		HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!MANUAL#\r\n"), 1000);
 8000d48:	4977      	ldr	r1, [pc, #476]	; (8000f28 <fsm_manual_run+0x218>)
 8000d4a:	4878      	ldr	r0, [pc, #480]	; (8000f2c <fsm_manual_run+0x21c>)
 8000d4c:	f003 fdee 	bl	800492c <siprintf>
 8000d50:	4603      	mov	r3, r0
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d58:	4974      	ldr	r1, [pc, #464]	; (8000f2c <fsm_manual_run+0x21c>)
 8000d5a:	4875      	ldr	r0, [pc, #468]	; (8000f30 <fsm_manual_run+0x220>)
 8000d5c:	f003 fc66 	bl	800462c <HAL_UART_Transmit>
	break;
 8000d60:	e1d5      	b.n	800110e <fsm_manual_run+0x3fe>
	case MANUAL_RED:
		controlTrafficLights(RED, GREEN);
 8000d62:	2165      	movs	r1, #101	; 0x65
 8000d64:	2064      	movs	r0, #100	; 0x64
 8000d66:	f000 fd95 	bl	8001894 <controlTrafficLights>
		if(timer_flag[2] == 1 && isPed == 1){
 8000d6a:	4b72      	ldr	r3, [pc, #456]	; (8000f34 <fsm_manual_run+0x224>)
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d115      	bne.n	8000d9e <fsm_manual_run+0x8e>
 8000d72:	4b71      	ldr	r3, [pc, #452]	; (8000f38 <fsm_manual_run+0x228>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d111      	bne.n	8000d9e <fsm_manual_run+0x8e>
			isPed = 0;
 8000d7a:	4b6f      	ldr	r3, [pc, #444]	; (8000f38 <fsm_manual_run+0x228>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
			controlPedLights(OFF);
 8000d80:	2067      	movs	r0, #103	; 0x67
 8000d82:	f000 fe0b 	bl	800199c <controlPedLights>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_OFF#\r\n"), 1000);
 8000d86:	496d      	ldr	r1, [pc, #436]	; (8000f3c <fsm_manual_run+0x22c>)
 8000d88:	4868      	ldr	r0, [pc, #416]	; (8000f2c <fsm_manual_run+0x21c>)
 8000d8a:	f003 fdcf 	bl	800492c <siprintf>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	b29a      	uxth	r2, r3
 8000d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d96:	4965      	ldr	r1, [pc, #404]	; (8000f2c <fsm_manual_run+0x21c>)
 8000d98:	4865      	ldr	r0, [pc, #404]	; (8000f30 <fsm_manual_run+0x220>)
 8000d9a:	f003 fc47 	bl	800462c <HAL_UART_Transmit>
		}
		if(isBTPressed(0) == 1){
 8000d9e:	2000      	movs	r0, #0
 8000da0:	f7ff fa70 	bl	8000284 <isBTPressed>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d118      	bne.n	8000ddc <fsm_manual_run+0xcc>
			status = TUNING_INIT;
 8000daa:	4b5e      	ldr	r3, [pc, #376]	; (8000f24 <fsm_manual_run+0x214>)
 8000dac:	220a      	movs	r2, #10
 8000dae:	701a      	strb	r2, [r3, #0]
			if(isPed == 1){
 8000db0:	4b61      	ldr	r3, [pc, #388]	; (8000f38 <fsm_manual_run+0x228>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d111      	bne.n	8000ddc <fsm_manual_run+0xcc>
				isPed = 0;
 8000db8:	4b5f      	ldr	r3, [pc, #380]	; (8000f38 <fsm_manual_run+0x228>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
				controlPedLights(OFF);
 8000dbe:	2067      	movs	r0, #103	; 0x67
 8000dc0:	f000 fdec 	bl	800199c <controlPedLights>
				HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_OFF#\r\n"), 1000);
 8000dc4:	495d      	ldr	r1, [pc, #372]	; (8000f3c <fsm_manual_run+0x22c>)
 8000dc6:	4859      	ldr	r0, [pc, #356]	; (8000f2c <fsm_manual_run+0x21c>)
 8000dc8:	f003 fdb0 	bl	800492c <siprintf>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd4:	4955      	ldr	r1, [pc, #340]	; (8000f2c <fsm_manual_run+0x21c>)
 8000dd6:	4856      	ldr	r0, [pc, #344]	; (8000f30 <fsm_manual_run+0x220>)
 8000dd8:	f003 fc28 	bl	800462c <HAL_UART_Transmit>
			}
		}
		if(isBTPressed(1) == 1){
 8000ddc:	2001      	movs	r0, #1
 8000dde:	f7ff fa51 	bl	8000284 <isBTPressed>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d102      	bne.n	8000dee <fsm_manual_run+0xde>
			status = MANUAL_RED1_YELLOW2;
 8000de8:	4b4e      	ldr	r3, [pc, #312]	; (8000f24 <fsm_manual_run+0x214>)
 8000dea:	2209      	movs	r2, #9
 8000dec:	701a      	strb	r2, [r3, #0]
		}
		if(isBTPressed(3) == 1){
 8000dee:	2003      	movs	r0, #3
 8000df0:	f7ff fa48 	bl	8000284 <isBTPressed>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d113      	bne.n	8000e22 <fsm_manual_run+0x112>
			isPed = 1;
 8000dfa:	4b4f      	ldr	r3, [pc, #316]	; (8000f38 <fsm_manual_run+0x228>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	601a      	str	r2, [r3, #0]
			setTimer(PEDESTRIAN_TIMER, 2);
 8000e00:	2102      	movs	r1, #2
 8000e02:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000e06:	f001 fb21 	bl	800244c <setTimer>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_GREEN#\r\n"), 1000);
 8000e0a:	494d      	ldr	r1, [pc, #308]	; (8000f40 <fsm_manual_run+0x230>)
 8000e0c:	4847      	ldr	r0, [pc, #284]	; (8000f2c <fsm_manual_run+0x21c>)
 8000e0e:	f003 fd8d 	bl	800492c <siprintf>
 8000e12:	4603      	mov	r3, r0
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1a:	4944      	ldr	r1, [pc, #272]	; (8000f2c <fsm_manual_run+0x21c>)
 8000e1c:	4844      	ldr	r0, [pc, #272]	; (8000f30 <fsm_manual_run+0x220>)
 8000e1e:	f003 fc05 	bl	800462c <HAL_UART_Transmit>
		}
		if(isPed == 1){
 8000e22:	4b45      	ldr	r3, [pc, #276]	; (8000f38 <fsm_manual_run+0x228>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d102      	bne.n	8000e30 <fsm_manual_run+0x120>
			controlPedLights(GREEN);
 8000e2a:	2065      	movs	r0, #101	; 0x65
 8000e2c:	f000 fdb6 	bl	800199c <controlPedLights>
		}
		if(isPed == 0){
 8000e30:	4b41      	ldr	r3, [pc, #260]	; (8000f38 <fsm_manual_run+0x228>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	f040 8163 	bne.w	8001100 <fsm_manual_run+0x3f0>
			controlPedLights(OFF);
 8000e3a:	2067      	movs	r0, #103	; 0x67
 8000e3c:	f000 fdae 	bl	800199c <controlPedLights>
		}
		break;
 8000e40:	e15e      	b.n	8001100 <fsm_manual_run+0x3f0>
	case MANUAL_GREEN:
		controlTrafficLights(GREEN, RED);
 8000e42:	2164      	movs	r1, #100	; 0x64
 8000e44:	2065      	movs	r0, #101	; 0x65
 8000e46:	f000 fd25 	bl	8001894 <controlTrafficLights>
		if(timer_flag[2] == 1 && isPed == 1){
 8000e4a:	4b3a      	ldr	r3, [pc, #232]	; (8000f34 <fsm_manual_run+0x224>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d115      	bne.n	8000e7e <fsm_manual_run+0x16e>
 8000e52:	4b39      	ldr	r3, [pc, #228]	; (8000f38 <fsm_manual_run+0x228>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d111      	bne.n	8000e7e <fsm_manual_run+0x16e>
			isPed = 0;
 8000e5a:	4b37      	ldr	r3, [pc, #220]	; (8000f38 <fsm_manual_run+0x228>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
			controlPedLights(OFF);
 8000e60:	2067      	movs	r0, #103	; 0x67
 8000e62:	f000 fd9b 	bl	800199c <controlPedLights>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_OFF#\r\n"), 1000);
 8000e66:	4935      	ldr	r1, [pc, #212]	; (8000f3c <fsm_manual_run+0x22c>)
 8000e68:	4830      	ldr	r0, [pc, #192]	; (8000f2c <fsm_manual_run+0x21c>)
 8000e6a:	f003 fd5f 	bl	800492c <siprintf>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e76:	492d      	ldr	r1, [pc, #180]	; (8000f2c <fsm_manual_run+0x21c>)
 8000e78:	482d      	ldr	r0, [pc, #180]	; (8000f30 <fsm_manual_run+0x220>)
 8000e7a:	f003 fbd7 	bl	800462c <HAL_UART_Transmit>
		}
		if(isBTPressed(0) == 1){
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f7ff fa00 	bl	8000284 <isBTPressed>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d118      	bne.n	8000ebc <fsm_manual_run+0x1ac>
			status = TUNING_INIT;
 8000e8a:	4b26      	ldr	r3, [pc, #152]	; (8000f24 <fsm_manual_run+0x214>)
 8000e8c:	220a      	movs	r2, #10
 8000e8e:	701a      	strb	r2, [r3, #0]
			if(isPed == 1){
 8000e90:	4b29      	ldr	r3, [pc, #164]	; (8000f38 <fsm_manual_run+0x228>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d111      	bne.n	8000ebc <fsm_manual_run+0x1ac>
				isPed = 0;
 8000e98:	4b27      	ldr	r3, [pc, #156]	; (8000f38 <fsm_manual_run+0x228>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
				controlPedLights(OFF);
 8000e9e:	2067      	movs	r0, #103	; 0x67
 8000ea0:	f000 fd7c 	bl	800199c <controlPedLights>
				HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_OFF#\r\n"), 1000);
 8000ea4:	4925      	ldr	r1, [pc, #148]	; (8000f3c <fsm_manual_run+0x22c>)
 8000ea6:	4821      	ldr	r0, [pc, #132]	; (8000f2c <fsm_manual_run+0x21c>)
 8000ea8:	f003 fd40 	bl	800492c <siprintf>
 8000eac:	4603      	mov	r3, r0
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb4:	491d      	ldr	r1, [pc, #116]	; (8000f2c <fsm_manual_run+0x21c>)
 8000eb6:	481e      	ldr	r0, [pc, #120]	; (8000f30 <fsm_manual_run+0x220>)
 8000eb8:	f003 fbb8 	bl	800462c <HAL_UART_Transmit>
			}
		}
		if(isBTPressed(1) == 1){
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f7ff f9e1 	bl	8000284 <isBTPressed>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d102      	bne.n	8000ece <fsm_manual_run+0x1be>
			status = MANUAL_YELLOW;
 8000ec8:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <fsm_manual_run+0x214>)
 8000eca:	2208      	movs	r2, #8
 8000ecc:	701a      	strb	r2, [r3, #0]
		}
		if(isBTPressed(3) == 1){
 8000ece:	2003      	movs	r0, #3
 8000ed0:	f7ff f9d8 	bl	8000284 <isBTPressed>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d113      	bne.n	8000f02 <fsm_manual_run+0x1f2>
			isPed = 1;
 8000eda:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <fsm_manual_run+0x228>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	601a      	str	r2, [r3, #0]
			setTimer(PEDESTRIAN_TIMER, 2);
 8000ee0:	2102      	movs	r1, #2
 8000ee2:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000ee6:	f001 fab1 	bl	800244c <setTimer>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_RED#\r\n"), 1000);
 8000eea:	4916      	ldr	r1, [pc, #88]	; (8000f44 <fsm_manual_run+0x234>)
 8000eec:	480f      	ldr	r0, [pc, #60]	; (8000f2c <fsm_manual_run+0x21c>)
 8000eee:	f003 fd1d 	bl	800492c <siprintf>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efa:	490c      	ldr	r1, [pc, #48]	; (8000f2c <fsm_manual_run+0x21c>)
 8000efc:	480c      	ldr	r0, [pc, #48]	; (8000f30 <fsm_manual_run+0x220>)
 8000efe:	f003 fb95 	bl	800462c <HAL_UART_Transmit>
		}
		if(isPed == 1){
 8000f02:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <fsm_manual_run+0x228>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d102      	bne.n	8000f10 <fsm_manual_run+0x200>
			controlPedLights(RED);
 8000f0a:	2064      	movs	r0, #100	; 0x64
 8000f0c:	f000 fd46 	bl	800199c <controlPedLights>
		}
		if(isPed == 0){
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <fsm_manual_run+0x228>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	f040 80f5 	bne.w	8001104 <fsm_manual_run+0x3f4>
			controlPedLights(OFF);
 8000f1a:	2067      	movs	r0, #103	; 0x67
 8000f1c:	f000 fd3e 	bl	800199c <controlPedLights>
		}
		break;
 8000f20:	e0f0      	b.n	8001104 <fsm_manual_run+0x3f4>
 8000f22:	bf00      	nop
 8000f24:	20000192 	.word	0x20000192
 8000f28:	08005334 	.word	0x08005334
 8000f2c:	20000160 	.word	0x20000160
 8000f30:	20000224 	.word	0x20000224
 8000f34:	2000035c 	.word	0x2000035c
 8000f38:	2000015c 	.word	0x2000015c
 8000f3c:	08005340 	.word	0x08005340
 8000f40:	08005354 	.word	0x08005354
 8000f44:	0800536c 	.word	0x0800536c
	case MANUAL_YELLOW:
		controlTrafficLights(YELLOW, RED);
 8000f48:	2164      	movs	r1, #100	; 0x64
 8000f4a:	2066      	movs	r0, #102	; 0x66
 8000f4c:	f000 fca2 	bl	8001894 <controlTrafficLights>
		if(timer_flag[2] == 1){
 8000f50:	4b70      	ldr	r3, [pc, #448]	; (8001114 <fsm_manual_run+0x404>)
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d111      	bne.n	8000f7c <fsm_manual_run+0x26c>
			isPed = 0;
 8000f58:	4b6f      	ldr	r3, [pc, #444]	; (8001118 <fsm_manual_run+0x408>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
			controlPedLights(OFF);
 8000f5e:	2067      	movs	r0, #103	; 0x67
 8000f60:	f000 fd1c 	bl	800199c <controlPedLights>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_OFF#\r\n"), 1000);
 8000f64:	496d      	ldr	r1, [pc, #436]	; (800111c <fsm_manual_run+0x40c>)
 8000f66:	486e      	ldr	r0, [pc, #440]	; (8001120 <fsm_manual_run+0x410>)
 8000f68:	f003 fce0 	bl	800492c <siprintf>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f74:	496a      	ldr	r1, [pc, #424]	; (8001120 <fsm_manual_run+0x410>)
 8000f76:	486b      	ldr	r0, [pc, #428]	; (8001124 <fsm_manual_run+0x414>)
 8000f78:	f003 fb58 	bl	800462c <HAL_UART_Transmit>
		}
		if(isBTPressed(0) == 1){
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f7ff f981 	bl	8000284 <isBTPressed>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d118      	bne.n	8000fba <fsm_manual_run+0x2aa>
			status = TUNING_INIT;
 8000f88:	4b67      	ldr	r3, [pc, #412]	; (8001128 <fsm_manual_run+0x418>)
 8000f8a:	220a      	movs	r2, #10
 8000f8c:	701a      	strb	r2, [r3, #0]
			if(isPed == 1){
 8000f8e:	4b62      	ldr	r3, [pc, #392]	; (8001118 <fsm_manual_run+0x408>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d111      	bne.n	8000fba <fsm_manual_run+0x2aa>
				isPed = 0;
 8000f96:	4b60      	ldr	r3, [pc, #384]	; (8001118 <fsm_manual_run+0x408>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
				controlPedLights(OFF);
 8000f9c:	2067      	movs	r0, #103	; 0x67
 8000f9e:	f000 fcfd 	bl	800199c <controlPedLights>
				HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_OFF#\r\n"), 1000);
 8000fa2:	495e      	ldr	r1, [pc, #376]	; (800111c <fsm_manual_run+0x40c>)
 8000fa4:	485e      	ldr	r0, [pc, #376]	; (8001120 <fsm_manual_run+0x410>)
 8000fa6:	f003 fcc1 	bl	800492c <siprintf>
 8000faa:	4603      	mov	r3, r0
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb2:	495b      	ldr	r1, [pc, #364]	; (8001120 <fsm_manual_run+0x410>)
 8000fb4:	485b      	ldr	r0, [pc, #364]	; (8001124 <fsm_manual_run+0x414>)
 8000fb6:	f003 fb39 	bl	800462c <HAL_UART_Transmit>
			}
		}
		if(isBTPressed(1) == 1){
 8000fba:	2001      	movs	r0, #1
 8000fbc:	f7ff f962 	bl	8000284 <isBTPressed>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d102      	bne.n	8000fcc <fsm_manual_run+0x2bc>
			status = MANUAL_RED;
 8000fc6:	4b58      	ldr	r3, [pc, #352]	; (8001128 <fsm_manual_run+0x418>)
 8000fc8:	2206      	movs	r2, #6
 8000fca:	701a      	strb	r2, [r3, #0]
		}
		if(isBTPressed(3) == 1){
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f7ff f959 	bl	8000284 <isBTPressed>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d113      	bne.n	8001000 <fsm_manual_run+0x2f0>
			isPed = 1;
 8000fd8:	4b4f      	ldr	r3, [pc, #316]	; (8001118 <fsm_manual_run+0x408>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	601a      	str	r2, [r3, #0]
			setTimer(PEDESTRIAN_TIMER, 2);
 8000fde:	2102      	movs	r1, #2
 8000fe0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000fe4:	f001 fa32 	bl	800244c <setTimer>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_RED#\r\n"), 1000);
 8000fe8:	4950      	ldr	r1, [pc, #320]	; (800112c <fsm_manual_run+0x41c>)
 8000fea:	484d      	ldr	r0, [pc, #308]	; (8001120 <fsm_manual_run+0x410>)
 8000fec:	f003 fc9e 	bl	800492c <siprintf>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff8:	4949      	ldr	r1, [pc, #292]	; (8001120 <fsm_manual_run+0x410>)
 8000ffa:	484a      	ldr	r0, [pc, #296]	; (8001124 <fsm_manual_run+0x414>)
 8000ffc:	f003 fb16 	bl	800462c <HAL_UART_Transmit>
		}
		if(isPed == 1){
 8001000:	4b45      	ldr	r3, [pc, #276]	; (8001118 <fsm_manual_run+0x408>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d102      	bne.n	800100e <fsm_manual_run+0x2fe>
			controlPedLights(RED);
 8001008:	2064      	movs	r0, #100	; 0x64
 800100a:	f000 fcc7 	bl	800199c <controlPedLights>
		}
		if(isPed == 0){
 800100e:	4b42      	ldr	r3, [pc, #264]	; (8001118 <fsm_manual_run+0x408>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d178      	bne.n	8001108 <fsm_manual_run+0x3f8>
			controlPedLights(OFF);
 8001016:	2067      	movs	r0, #103	; 0x67
 8001018:	f000 fcc0 	bl	800199c <controlPedLights>
		}
		break;
 800101c:	e074      	b.n	8001108 <fsm_manual_run+0x3f8>
	case MANUAL_RED1_YELLOW2:
		controlTrafficLights(RED, YELLOW);
 800101e:	2166      	movs	r1, #102	; 0x66
 8001020:	2064      	movs	r0, #100	; 0x64
 8001022:	f000 fc37 	bl	8001894 <controlTrafficLights>
		if(timer_flag[2] == 1 && isPed == 1){
 8001026:	4b3b      	ldr	r3, [pc, #236]	; (8001114 <fsm_manual_run+0x404>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d115      	bne.n	800105a <fsm_manual_run+0x34a>
 800102e:	4b3a      	ldr	r3, [pc, #232]	; (8001118 <fsm_manual_run+0x408>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d111      	bne.n	800105a <fsm_manual_run+0x34a>
			isPed = 0;
 8001036:	4b38      	ldr	r3, [pc, #224]	; (8001118 <fsm_manual_run+0x408>)
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
			controlPedLights(OFF);
 800103c:	2067      	movs	r0, #103	; 0x67
 800103e:	f000 fcad 	bl	800199c <controlPedLights>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_OFF#\r\n"), 1000);
 8001042:	4936      	ldr	r1, [pc, #216]	; (800111c <fsm_manual_run+0x40c>)
 8001044:	4836      	ldr	r0, [pc, #216]	; (8001120 <fsm_manual_run+0x410>)
 8001046:	f003 fc71 	bl	800492c <siprintf>
 800104a:	4603      	mov	r3, r0
 800104c:	b29a      	uxth	r2, r3
 800104e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001052:	4933      	ldr	r1, [pc, #204]	; (8001120 <fsm_manual_run+0x410>)
 8001054:	4833      	ldr	r0, [pc, #204]	; (8001124 <fsm_manual_run+0x414>)
 8001056:	f003 fae9 	bl	800462c <HAL_UART_Transmit>
		}
		if(isBTPressed(0) == 1){
 800105a:	2000      	movs	r0, #0
 800105c:	f7ff f912 	bl	8000284 <isBTPressed>
 8001060:	4603      	mov	r3, r0
 8001062:	2b01      	cmp	r3, #1
 8001064:	d118      	bne.n	8001098 <fsm_manual_run+0x388>
			status = TUNING_INIT;
 8001066:	4b30      	ldr	r3, [pc, #192]	; (8001128 <fsm_manual_run+0x418>)
 8001068:	220a      	movs	r2, #10
 800106a:	701a      	strb	r2, [r3, #0]
			if(isPed == 1){
 800106c:	4b2a      	ldr	r3, [pc, #168]	; (8001118 <fsm_manual_run+0x408>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d111      	bne.n	8001098 <fsm_manual_run+0x388>
				isPed = 0;
 8001074:	4b28      	ldr	r3, [pc, #160]	; (8001118 <fsm_manual_run+0x408>)
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
				controlPedLights(OFF);
 800107a:	2067      	movs	r0, #103	; 0x67
 800107c:	f000 fc8e 	bl	800199c <controlPedLights>
				HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_OFF#\r\n"), 1000);
 8001080:	4926      	ldr	r1, [pc, #152]	; (800111c <fsm_manual_run+0x40c>)
 8001082:	4827      	ldr	r0, [pc, #156]	; (8001120 <fsm_manual_run+0x410>)
 8001084:	f003 fc52 	bl	800492c <siprintf>
 8001088:	4603      	mov	r3, r0
 800108a:	b29a      	uxth	r2, r3
 800108c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001090:	4923      	ldr	r1, [pc, #140]	; (8001120 <fsm_manual_run+0x410>)
 8001092:	4824      	ldr	r0, [pc, #144]	; (8001124 <fsm_manual_run+0x414>)
 8001094:	f003 faca 	bl	800462c <HAL_UART_Transmit>
			}
		}
		if(isBTPressed(1) == 1){
 8001098:	2001      	movs	r0, #1
 800109a:	f7ff f8f3 	bl	8000284 <isBTPressed>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d102      	bne.n	80010aa <fsm_manual_run+0x39a>
			status = MANUAL_GREEN;
 80010a4:	4b20      	ldr	r3, [pc, #128]	; (8001128 <fsm_manual_run+0x418>)
 80010a6:	2207      	movs	r2, #7
 80010a8:	701a      	strb	r2, [r3, #0]
		}
		if(isBTPressed(3) == 1){
 80010aa:	2003      	movs	r0, #3
 80010ac:	f7ff f8ea 	bl	8000284 <isBTPressed>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d113      	bne.n	80010de <fsm_manual_run+0x3ce>
			isPed = 1;
 80010b6:	4b18      	ldr	r3, [pc, #96]	; (8001118 <fsm_manual_run+0x408>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	601a      	str	r2, [r3, #0]
			setTimer(PEDESTRIAN_TIMER, 2);
 80010bc:	2102      	movs	r1, #2
 80010be:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80010c2:	f001 f9c3 	bl	800244c <setTimer>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_YELLOW#\r\n"), 1000);
 80010c6:	491a      	ldr	r1, [pc, #104]	; (8001130 <fsm_manual_run+0x420>)
 80010c8:	4815      	ldr	r0, [pc, #84]	; (8001120 <fsm_manual_run+0x410>)
 80010ca:	f003 fc2f 	bl	800492c <siprintf>
 80010ce:	4603      	mov	r3, r0
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d6:	4912      	ldr	r1, [pc, #72]	; (8001120 <fsm_manual_run+0x410>)
 80010d8:	4812      	ldr	r0, [pc, #72]	; (8001124 <fsm_manual_run+0x414>)
 80010da:	f003 faa7 	bl	800462c <HAL_UART_Transmit>
		}
		if(isPed == 1){
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <fsm_manual_run+0x408>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d102      	bne.n	80010ec <fsm_manual_run+0x3dc>
			controlPedLights(YELLOW);
 80010e6:	2066      	movs	r0, #102	; 0x66
 80010e8:	f000 fc58 	bl	800199c <controlPedLights>
		}
		if(isPed == 0){
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <fsm_manual_run+0x408>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d10b      	bne.n	800110c <fsm_manual_run+0x3fc>
			controlPedLights(OFF);
 80010f4:	2067      	movs	r0, #103	; 0x67
 80010f6:	f000 fc51 	bl	800199c <controlPedLights>
		}
		break;
 80010fa:	e007      	b.n	800110c <fsm_manual_run+0x3fc>
	default:
		break;
 80010fc:	bf00      	nop
 80010fe:	e006      	b.n	800110e <fsm_manual_run+0x3fe>
		break;
 8001100:	bf00      	nop
 8001102:	e004      	b.n	800110e <fsm_manual_run+0x3fe>
		break;
 8001104:	bf00      	nop
 8001106:	e002      	b.n	800110e <fsm_manual_run+0x3fe>
		break;
 8001108:	bf00      	nop
 800110a:	e000      	b.n	800110e <fsm_manual_run+0x3fe>
		break;
 800110c:	bf00      	nop
	}
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	2000035c 	.word	0x2000035c
 8001118:	2000015c 	.word	0x2000015c
 800111c:	08005340 	.word	0x08005340
 8001120:	20000160 	.word	0x20000160
 8001124:	20000224 	.word	0x20000224
 8001128:	20000192 	.word	0x20000192
 800112c:	0800536c 	.word	0x0800536c
 8001130:	08005380 	.word	0x08005380

08001134 <ledBalance>:

int redTemp = 1;
int greenTemp = 1;
int yellowTemp = 1;

void ledBalance(){
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
	if(red == (green + yellow)) return;
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <ledBalance+0x50>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <ledBalance+0x54>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	441a      	add	r2, r3
 8001142:	4b12      	ldr	r3, [pc, #72]	; (800118c <ledBalance+0x58>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	429a      	cmp	r2, r3
 8001148:	d018      	beq.n	800117c <ledBalance+0x48>
	else if(red > (green + yellow)){
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <ledBalance+0x50>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <ledBalance+0x54>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	441a      	add	r2, r3
 8001154:	4b0d      	ldr	r3, [pc, #52]	; (800118c <ledBalance+0x58>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	429a      	cmp	r2, r3
 800115a:	da07      	bge.n	800116c <ledBalance+0x38>
		red = green + yellow;
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <ledBalance+0x50>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b09      	ldr	r3, [pc, #36]	; (8001188 <ledBalance+0x54>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4413      	add	r3, r2
 8001166:	4a09      	ldr	r2, [pc, #36]	; (800118c <ledBalance+0x58>)
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	e008      	b.n	800117e <ledBalance+0x4a>
	}
	else{
		yellow = red - green;
 800116c:	4b07      	ldr	r3, [pc, #28]	; (800118c <ledBalance+0x58>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <ledBalance+0x50>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	4a04      	ldr	r2, [pc, #16]	; (8001188 <ledBalance+0x54>)
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	e000      	b.n	800117e <ledBalance+0x4a>
	if(red == (green + yellow)) return;
 800117c:	bf00      	nop
	}
}
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr
 8001184:	20000098 	.word	0x20000098
 8001188:	2000009c 	.word	0x2000009c
 800118c:	20000094 	.word	0x20000094

08001190 <fsm_tuning_run>:

//Used timers: timer[3]: led blinking
void fsm_tuning_run(){
 8001190:	b580      	push	{r7, lr}
 8001192:	b09a      	sub	sp, #104	; 0x68
 8001194:	af00      	add	r7, sp, #0
	switch(status){
 8001196:	4b9e      	ldr	r3, [pc, #632]	; (8001410 <fsm_tuning_run+0x280>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	3b0a      	subs	r3, #10
 800119c:	2b03      	cmp	r3, #3
 800119e:	f200 8354 	bhi.w	800184a <fsm_tuning_run+0x6ba>
 80011a2:	a201      	add	r2, pc, #4	; (adr r2, 80011a8 <fsm_tuning_run+0x18>)
 80011a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a8:	080011b9 	.word	0x080011b9
 80011ac:	0800122b 	.word	0x0800122b
 80011b0:	0800144d 	.word	0x0800144d
 80011b4:	08001669 	.word	0x08001669
	case TUNING_INIT:
		status = TUNING_RED;
 80011b8:	4b95      	ldr	r3, [pc, #596]	; (8001410 <fsm_tuning_run+0x280>)
 80011ba:	220b      	movs	r2, #11
 80011bc:	701a      	strb	r2, [r3, #0]
		setTimer(250, 3);		//timer for led blinking
 80011be:	2103      	movs	r1, #3
 80011c0:	20fa      	movs	r0, #250	; 0xfa
 80011c2:	f001 f943 	bl	800244c <setTimer>
		HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!TUNING#\r\n"), 1000);
 80011c6:	4993      	ldr	r1, [pc, #588]	; (8001414 <fsm_tuning_run+0x284>)
 80011c8:	4893      	ldr	r0, [pc, #588]	; (8001418 <fsm_tuning_run+0x288>)
 80011ca:	f003 fbaf 	bl	800492c <siprintf>
 80011ce:	4603      	mov	r3, r0
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d6:	4990      	ldr	r1, [pc, #576]	; (8001418 <fsm_tuning_run+0x288>)
 80011d8:	4890      	ldr	r0, [pc, #576]	; (800141c <fsm_tuning_run+0x28c>)
 80011da:	f003 fa27 	bl	800462c <HAL_UART_Transmit>
		int buffer1 = redTemp / 10;
 80011de:	4b90      	ldr	r3, [pc, #576]	; (8001420 <fsm_tuning_run+0x290>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a90      	ldr	r2, [pc, #576]	; (8001424 <fsm_tuning_run+0x294>)
 80011e4:	fb82 1203 	smull	r1, r2, r2, r3
 80011e8:	1092      	asrs	r2, r2, #2
 80011ea:	17db      	asrs	r3, r3, #31
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	607b      	str	r3, [r7, #4]
		int buffer2 = redTemp % 10;
 80011f0:	4b8b      	ldr	r3, [pc, #556]	; (8001420 <fsm_tuning_run+0x290>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b8b      	ldr	r3, [pc, #556]	; (8001424 <fsm_tuning_run+0x294>)
 80011f6:	fb83 1302 	smull	r1, r3, r3, r2
 80011fa:	1099      	asrs	r1, r3, #2
 80011fc:	17d3      	asrs	r3, r2, #31
 80011fe:	1ac9      	subs	r1, r1, r3
 8001200:	460b      	mov	r3, r1
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	440b      	add	r3, r1
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	603b      	str	r3, [r7, #0]
		HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#TUNING_RED\r\n", buffer1, buffer2), 1000);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	4985      	ldr	r1, [pc, #532]	; (8001428 <fsm_tuning_run+0x298>)
 8001212:	4881      	ldr	r0, [pc, #516]	; (8001418 <fsm_tuning_run+0x288>)
 8001214:	f003 fb8a 	bl	800492c <siprintf>
 8001218:	4603      	mov	r3, r0
 800121a:	b29a      	uxth	r2, r3
 800121c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001220:	497d      	ldr	r1, [pc, #500]	; (8001418 <fsm_tuning_run+0x288>)
 8001222:	487e      	ldr	r0, [pc, #504]	; (800141c <fsm_tuning_run+0x28c>)
 8001224:	f003 fa02 	bl	800462c <HAL_UART_Transmit>
		break;
 8001228:	e316      	b.n	8001858 <fsm_tuning_run+0x6c8>
	case TUNING_RED:
		if(timer_flag[3] == 1){
 800122a:	4b80      	ldr	r3, [pc, #512]	; (800142c <fsm_tuning_run+0x29c>)
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d105      	bne.n	800123e <fsm_tuning_run+0xae>
			toggleRedLED();
 8001232:	f000 fc23 	bl	8001a7c <toggleRedLED>
			setTimer(250, 3);
 8001236:	2103      	movs	r1, #3
 8001238:	20fa      	movs	r0, #250	; 0xfa
 800123a:	f001 f907 	bl	800244c <setTimer>
		}
		if(isBTPressed(0) == 1){
 800123e:	2000      	movs	r0, #0
 8001240:	f7ff f820 	bl	8000284 <isBTPressed>
 8001244:	4603      	mov	r3, r0
 8001246:	2b01      	cmp	r3, #1
 8001248:	d12c      	bne.n	80012a4 <fsm_tuning_run+0x114>
			status = TUNING_YELLOW;
 800124a:	4b71      	ldr	r3, [pc, #452]	; (8001410 <fsm_tuning_run+0x280>)
 800124c:	220d      	movs	r2, #13
 800124e:	701a      	strb	r2, [r3, #0]
			redTemp = 1;
 8001250:	4b73      	ldr	r3, [pc, #460]	; (8001420 <fsm_tuning_run+0x290>)
 8001252:	2201      	movs	r2, #1
 8001254:	601a      	str	r2, [r3, #0]
			clearTrafficLights();
 8001256:	f000 fbf3 	bl	8001a40 <clearTrafficLights>
			int buffer1 = yellowTemp / 10;
 800125a:	4b75      	ldr	r3, [pc, #468]	; (8001430 <fsm_tuning_run+0x2a0>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a71      	ldr	r2, [pc, #452]	; (8001424 <fsm_tuning_run+0x294>)
 8001260:	fb82 1203 	smull	r1, r2, r2, r3
 8001264:	1092      	asrs	r2, r2, #2
 8001266:	17db      	asrs	r3, r3, #31
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
			int buffer2 = yellowTemp % 10;
 800126c:	4b70      	ldr	r3, [pc, #448]	; (8001430 <fsm_tuning_run+0x2a0>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b6c      	ldr	r3, [pc, #432]	; (8001424 <fsm_tuning_run+0x294>)
 8001272:	fb83 1302 	smull	r1, r3, r3, r2
 8001276:	1099      	asrs	r1, r3, #2
 8001278:	17d3      	asrs	r3, r2, #31
 800127a:	1ac9      	subs	r1, r1, r3
 800127c:	460b      	mov	r3, r1
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	440b      	add	r3, r1
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	623b      	str	r3, [r7, #32]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#TUNING_YELLOW\r\n", buffer1, buffer2), 1000);
 8001288:	6a3b      	ldr	r3, [r7, #32]
 800128a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800128c:	4969      	ldr	r1, [pc, #420]	; (8001434 <fsm_tuning_run+0x2a4>)
 800128e:	4862      	ldr	r0, [pc, #392]	; (8001418 <fsm_tuning_run+0x288>)
 8001290:	f003 fb4c 	bl	800492c <siprintf>
 8001294:	4603      	mov	r3, r0
 8001296:	b29a      	uxth	r2, r3
 8001298:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129c:	495e      	ldr	r1, [pc, #376]	; (8001418 <fsm_tuning_run+0x288>)
 800129e:	485f      	ldr	r0, [pc, #380]	; (800141c <fsm_tuning_run+0x28c>)
 80012a0:	f003 f9c4 	bl	800462c <HAL_UART_Transmit>
		}
		if(isBTHold(0) == 1){
 80012a4:	2000      	movs	r0, #0
 80012a6:	f7ff f807 	bl	80002b8 <isBTHold>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d10f      	bne.n	80012d0 <fsm_tuning_run+0x140>
			status = INIT;
 80012b0:	4b57      	ldr	r3, [pc, #348]	; (8001410 <fsm_tuning_run+0x280>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]
			redTemp = 1; greenTemp = 1; yellowTemp = 1;
 80012b6:	4b5a      	ldr	r3, [pc, #360]	; (8001420 <fsm_tuning_run+0x290>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	4b5e      	ldr	r3, [pc, #376]	; (8001438 <fsm_tuning_run+0x2a8>)
 80012be:	2201      	movs	r2, #1
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	4b5b      	ldr	r3, [pc, #364]	; (8001430 <fsm_tuning_run+0x2a0>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	601a      	str	r2, [r3, #0]
			ledBalance();
 80012c8:	f7ff ff34 	bl	8001134 <ledBalance>
			clearTrafficLights();
 80012cc:	f000 fbb8 	bl	8001a40 <clearTrafficLights>
		}
		if(isBTPressed(1) == 1){
 80012d0:	2001      	movs	r0, #1
 80012d2:	f7fe ffd7 	bl	8000284 <isBTPressed>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d130      	bne.n	800133e <fsm_tuning_run+0x1ae>
			redTemp++;
 80012dc:	4b50      	ldr	r3, [pc, #320]	; (8001420 <fsm_tuning_run+0x290>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	3301      	adds	r3, #1
 80012e2:	4a4f      	ldr	r2, [pc, #316]	; (8001420 <fsm_tuning_run+0x290>)
 80012e4:	6013      	str	r3, [r2, #0]
			if(redTemp > 99) redTemp = 1;
 80012e6:	4b4e      	ldr	r3, [pc, #312]	; (8001420 <fsm_tuning_run+0x290>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b63      	cmp	r3, #99	; 0x63
 80012ec:	dd02      	ble.n	80012f4 <fsm_tuning_run+0x164>
 80012ee:	4b4c      	ldr	r3, [pc, #304]	; (8001420 <fsm_tuning_run+0x290>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	601a      	str	r2, [r3, #0]
			int buffer1 = redTemp / 10;
 80012f4:	4b4a      	ldr	r3, [pc, #296]	; (8001420 <fsm_tuning_run+0x290>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a4a      	ldr	r2, [pc, #296]	; (8001424 <fsm_tuning_run+0x294>)
 80012fa:	fb82 1203 	smull	r1, r2, r2, r3
 80012fe:	1092      	asrs	r2, r2, #2
 8001300:	17db      	asrs	r3, r3, #31
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	61fb      	str	r3, [r7, #28]
			int buffer2 = redTemp % 10;
 8001306:	4b46      	ldr	r3, [pc, #280]	; (8001420 <fsm_tuning_run+0x290>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	4b46      	ldr	r3, [pc, #280]	; (8001424 <fsm_tuning_run+0x294>)
 800130c:	fb83 1302 	smull	r1, r3, r3, r2
 8001310:	1099      	asrs	r1, r3, #2
 8001312:	17d3      	asrs	r3, r2, #31
 8001314:	1ac9      	subs	r1, r1, r3
 8001316:	460b      	mov	r3, r1
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	440b      	add	r3, r1
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	61bb      	str	r3, [r7, #24]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#TUNING_RED(+1)\r\n", buffer1, buffer2), 1000);
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	69fa      	ldr	r2, [r7, #28]
 8001326:	4945      	ldr	r1, [pc, #276]	; (800143c <fsm_tuning_run+0x2ac>)
 8001328:	483b      	ldr	r0, [pc, #236]	; (8001418 <fsm_tuning_run+0x288>)
 800132a:	f003 faff 	bl	800492c <siprintf>
 800132e:	4603      	mov	r3, r0
 8001330:	b29a      	uxth	r2, r3
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	4938      	ldr	r1, [pc, #224]	; (8001418 <fsm_tuning_run+0x288>)
 8001338:	4838      	ldr	r0, [pc, #224]	; (800141c <fsm_tuning_run+0x28c>)
 800133a:	f003 f977 	bl	800462c <HAL_UART_Transmit>
		}
		if(isBTHold(1) == 1){
 800133e:	2001      	movs	r0, #1
 8001340:	f7fe ffba 	bl	80002b8 <isBTHold>
 8001344:	4603      	mov	r3, r0
 8001346:	2b01      	cmp	r3, #1
 8001348:	d130      	bne.n	80013ac <fsm_tuning_run+0x21c>
			redTemp += 10;
 800134a:	4b35      	ldr	r3, [pc, #212]	; (8001420 <fsm_tuning_run+0x290>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	330a      	adds	r3, #10
 8001350:	4a33      	ldr	r2, [pc, #204]	; (8001420 <fsm_tuning_run+0x290>)
 8001352:	6013      	str	r3, [r2, #0]
			if(redTemp > 99) redTemp = 1;
 8001354:	4b32      	ldr	r3, [pc, #200]	; (8001420 <fsm_tuning_run+0x290>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b63      	cmp	r3, #99	; 0x63
 800135a:	dd02      	ble.n	8001362 <fsm_tuning_run+0x1d2>
 800135c:	4b30      	ldr	r3, [pc, #192]	; (8001420 <fsm_tuning_run+0x290>)
 800135e:	2201      	movs	r2, #1
 8001360:	601a      	str	r2, [r3, #0]
			int buffer1 = redTemp / 10;
 8001362:	4b2f      	ldr	r3, [pc, #188]	; (8001420 <fsm_tuning_run+0x290>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a2f      	ldr	r2, [pc, #188]	; (8001424 <fsm_tuning_run+0x294>)
 8001368:	fb82 1203 	smull	r1, r2, r2, r3
 800136c:	1092      	asrs	r2, r2, #2
 800136e:	17db      	asrs	r3, r3, #31
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	617b      	str	r3, [r7, #20]
			int buffer2 = redTemp % 10;
 8001374:	4b2a      	ldr	r3, [pc, #168]	; (8001420 <fsm_tuning_run+0x290>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4b2a      	ldr	r3, [pc, #168]	; (8001424 <fsm_tuning_run+0x294>)
 800137a:	fb83 1302 	smull	r1, r3, r3, r2
 800137e:	1099      	asrs	r1, r3, #2
 8001380:	17d3      	asrs	r3, r2, #31
 8001382:	1ac9      	subs	r1, r1, r3
 8001384:	460b      	mov	r3, r1
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	440b      	add	r3, r1
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	613b      	str	r3, [r7, #16]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#TUNING_RED(+10)\r\n", buffer1, buffer2), 1000);
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	492a      	ldr	r1, [pc, #168]	; (8001440 <fsm_tuning_run+0x2b0>)
 8001396:	4820      	ldr	r0, [pc, #128]	; (8001418 <fsm_tuning_run+0x288>)
 8001398:	f003 fac8 	bl	800492c <siprintf>
 800139c:	4603      	mov	r3, r0
 800139e:	b29a      	uxth	r2, r3
 80013a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a4:	491c      	ldr	r1, [pc, #112]	; (8001418 <fsm_tuning_run+0x288>)
 80013a6:	481d      	ldr	r0, [pc, #116]	; (800141c <fsm_tuning_run+0x28c>)
 80013a8:	f003 f940 	bl	800462c <HAL_UART_Transmit>
		}
		if(isBTPressed(2) == 1){
 80013ac:	2002      	movs	r0, #2
 80013ae:	f7fe ff69 	bl	8000284 <isBTPressed>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	f040 824a 	bne.w	800184e <fsm_tuning_run+0x6be>
			red = redTemp;
 80013ba:	4b19      	ldr	r3, [pc, #100]	; (8001420 <fsm_tuning_run+0x290>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a21      	ldr	r2, [pc, #132]	; (8001444 <fsm_tuning_run+0x2b4>)
 80013c0:	6013      	str	r3, [r2, #0]
			int buffer1 = red / 10;
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <fsm_tuning_run+0x2b4>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a17      	ldr	r2, [pc, #92]	; (8001424 <fsm_tuning_run+0x294>)
 80013c8:	fb82 1203 	smull	r1, r2, r2, r3
 80013cc:	1092      	asrs	r2, r2, #2
 80013ce:	17db      	asrs	r3, r3, #31
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	60fb      	str	r3, [r7, #12]
			int buffer2 = red % 10;
 80013d4:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <fsm_tuning_run+0x2b4>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <fsm_tuning_run+0x294>)
 80013da:	fb83 1302 	smull	r1, r3, r3, r2
 80013de:	1099      	asrs	r1, r3, #2
 80013e0:	17d3      	asrs	r3, r2, #31
 80013e2:	1ac9      	subs	r1, r1, r3
 80013e4:	460b      	mov	r3, r1
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	440b      	add	r3, r1
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	60bb      	str	r3, [r7, #8]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#RED_SET\r\n", buffer1, buffer2), 1000);
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	4914      	ldr	r1, [pc, #80]	; (8001448 <fsm_tuning_run+0x2b8>)
 80013f6:	4808      	ldr	r0, [pc, #32]	; (8001418 <fsm_tuning_run+0x288>)
 80013f8:	f003 fa98 	bl	800492c <siprintf>
 80013fc:	4603      	mov	r3, r0
 80013fe:	b29a      	uxth	r2, r3
 8001400:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001404:	4904      	ldr	r1, [pc, #16]	; (8001418 <fsm_tuning_run+0x288>)
 8001406:	4805      	ldr	r0, [pc, #20]	; (800141c <fsm_tuning_run+0x28c>)
 8001408:	f003 f910 	bl	800462c <HAL_UART_Transmit>
		}
		break;
 800140c:	e21f      	b.n	800184e <fsm_tuning_run+0x6be>
 800140e:	bf00      	nop
 8001410:	20000192 	.word	0x20000192
 8001414:	08005398 	.word	0x08005398
 8001418:	20000160 	.word	0x20000160
 800141c:	20000224 	.word	0x20000224
 8001420:	20000088 	.word	0x20000088
 8001424:	66666667 	.word	0x66666667
 8001428:	080053a4 	.word	0x080053a4
 800142c:	2000035c 	.word	0x2000035c
 8001430:	20000090 	.word	0x20000090
 8001434:	080053bc 	.word	0x080053bc
 8001438:	2000008c 	.word	0x2000008c
 800143c:	080053d8 	.word	0x080053d8
 8001440:	080053f4 	.word	0x080053f4
 8001444:	20000094 	.word	0x20000094
 8001448:	08005414 	.word	0x08005414
	case TUNING_GREEN:
		if(timer_flag[3] == 1){
 800144c:	4b79      	ldr	r3, [pc, #484]	; (8001634 <fsm_tuning_run+0x4a4>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d105      	bne.n	8001460 <fsm_tuning_run+0x2d0>
			toggleGreenLED();
 8001454:	f000 fb2e 	bl	8001ab4 <toggleGreenLED>
			setTimer(250, 3);
 8001458:	2103      	movs	r1, #3
 800145a:	20fa      	movs	r0, #250	; 0xfa
 800145c:	f000 fff6 	bl	800244c <setTimer>
		}
		if(isBTPressed(0) == 1){
 8001460:	2000      	movs	r0, #0
 8001462:	f7fe ff0f 	bl	8000284 <isBTPressed>
 8001466:	4603      	mov	r3, r0
 8001468:	2b01      	cmp	r3, #1
 800146a:	d12e      	bne.n	80014ca <fsm_tuning_run+0x33a>
			ledBalance();
 800146c:	f7ff fe62 	bl	8001134 <ledBalance>
			status = TUNING_RED;
 8001470:	4b71      	ldr	r3, [pc, #452]	; (8001638 <fsm_tuning_run+0x4a8>)
 8001472:	220b      	movs	r2, #11
 8001474:	701a      	strb	r2, [r3, #0]
			greenTemp = 1;
 8001476:	4b71      	ldr	r3, [pc, #452]	; (800163c <fsm_tuning_run+0x4ac>)
 8001478:	2201      	movs	r2, #1
 800147a:	601a      	str	r2, [r3, #0]
			clearTrafficLights();
 800147c:	f000 fae0 	bl	8001a40 <clearTrafficLights>
			int buffer1 = redTemp / 10;
 8001480:	4b6f      	ldr	r3, [pc, #444]	; (8001640 <fsm_tuning_run+0x4b0>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a6f      	ldr	r2, [pc, #444]	; (8001644 <fsm_tuning_run+0x4b4>)
 8001486:	fb82 1203 	smull	r1, r2, r2, r3
 800148a:	1092      	asrs	r2, r2, #2
 800148c:	17db      	asrs	r3, r3, #31
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	647b      	str	r3, [r7, #68]	; 0x44
			int buffer2 = redTemp % 10;
 8001492:	4b6b      	ldr	r3, [pc, #428]	; (8001640 <fsm_tuning_run+0x4b0>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	4b6b      	ldr	r3, [pc, #428]	; (8001644 <fsm_tuning_run+0x4b4>)
 8001498:	fb83 1302 	smull	r1, r3, r3, r2
 800149c:	1099      	asrs	r1, r3, #2
 800149e:	17d3      	asrs	r3, r2, #31
 80014a0:	1ac9      	subs	r1, r1, r3
 80014a2:	460b      	mov	r3, r1
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	440b      	add	r3, r1
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	643b      	str	r3, [r7, #64]	; 0x40
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#TUNING_RED\r\n", buffer1, buffer2), 1000);
 80014ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80014b2:	4965      	ldr	r1, [pc, #404]	; (8001648 <fsm_tuning_run+0x4b8>)
 80014b4:	4865      	ldr	r0, [pc, #404]	; (800164c <fsm_tuning_run+0x4bc>)
 80014b6:	f003 fa39 	bl	800492c <siprintf>
 80014ba:	4603      	mov	r3, r0
 80014bc:	b29a      	uxth	r2, r3
 80014be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c2:	4962      	ldr	r1, [pc, #392]	; (800164c <fsm_tuning_run+0x4bc>)
 80014c4:	4862      	ldr	r0, [pc, #392]	; (8001650 <fsm_tuning_run+0x4c0>)
 80014c6:	f003 f8b1 	bl	800462c <HAL_UART_Transmit>
		}
		if(isBTHold(0) == 1){
 80014ca:	2000      	movs	r0, #0
 80014cc:	f7fe fef4 	bl	80002b8 <isBTHold>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d10f      	bne.n	80014f6 <fsm_tuning_run+0x366>
			status = INIT;
 80014d6:	4b58      	ldr	r3, [pc, #352]	; (8001638 <fsm_tuning_run+0x4a8>)
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
			redTemp = 1; greenTemp = 1; yellowTemp = 1;
 80014dc:	4b58      	ldr	r3, [pc, #352]	; (8001640 <fsm_tuning_run+0x4b0>)
 80014de:	2201      	movs	r2, #1
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	4b56      	ldr	r3, [pc, #344]	; (800163c <fsm_tuning_run+0x4ac>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	4b5a      	ldr	r3, [pc, #360]	; (8001654 <fsm_tuning_run+0x4c4>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	601a      	str	r2, [r3, #0]
			ledBalance();
 80014ee:	f7ff fe21 	bl	8001134 <ledBalance>
			clearTrafficLights();
 80014f2:	f000 faa5 	bl	8001a40 <clearTrafficLights>
		}
		if(isBTPressed(1) == 1){
 80014f6:	2001      	movs	r0, #1
 80014f8:	f7fe fec4 	bl	8000284 <isBTPressed>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d130      	bne.n	8001564 <fsm_tuning_run+0x3d4>
			greenTemp++;
 8001502:	4b4e      	ldr	r3, [pc, #312]	; (800163c <fsm_tuning_run+0x4ac>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	3301      	adds	r3, #1
 8001508:	4a4c      	ldr	r2, [pc, #304]	; (800163c <fsm_tuning_run+0x4ac>)
 800150a:	6013      	str	r3, [r2, #0]
			if(greenTemp > 99) greenTemp = 1;
 800150c:	4b4b      	ldr	r3, [pc, #300]	; (800163c <fsm_tuning_run+0x4ac>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b63      	cmp	r3, #99	; 0x63
 8001512:	dd02      	ble.n	800151a <fsm_tuning_run+0x38a>
 8001514:	4b49      	ldr	r3, [pc, #292]	; (800163c <fsm_tuning_run+0x4ac>)
 8001516:	2201      	movs	r2, #1
 8001518:	601a      	str	r2, [r3, #0]
			int buffer1 = greenTemp / 10;
 800151a:	4b48      	ldr	r3, [pc, #288]	; (800163c <fsm_tuning_run+0x4ac>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a49      	ldr	r2, [pc, #292]	; (8001644 <fsm_tuning_run+0x4b4>)
 8001520:	fb82 1203 	smull	r1, r2, r2, r3
 8001524:	1092      	asrs	r2, r2, #2
 8001526:	17db      	asrs	r3, r3, #31
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	63fb      	str	r3, [r7, #60]	; 0x3c
			int buffer2 = greenTemp % 10;
 800152c:	4b43      	ldr	r3, [pc, #268]	; (800163c <fsm_tuning_run+0x4ac>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b44      	ldr	r3, [pc, #272]	; (8001644 <fsm_tuning_run+0x4b4>)
 8001532:	fb83 1302 	smull	r1, r3, r3, r2
 8001536:	1099      	asrs	r1, r3, #2
 8001538:	17d3      	asrs	r3, r2, #31
 800153a:	1ac9      	subs	r1, r1, r3
 800153c:	460b      	mov	r3, r1
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	63bb      	str	r3, [r7, #56]	; 0x38
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#TUNING_GREEN(+1)\r\n", buffer1, buffer2), 1000);
 8001548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800154a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800154c:	4942      	ldr	r1, [pc, #264]	; (8001658 <fsm_tuning_run+0x4c8>)
 800154e:	483f      	ldr	r0, [pc, #252]	; (800164c <fsm_tuning_run+0x4bc>)
 8001550:	f003 f9ec 	bl	800492c <siprintf>
 8001554:	4603      	mov	r3, r0
 8001556:	b29a      	uxth	r2, r3
 8001558:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155c:	493b      	ldr	r1, [pc, #236]	; (800164c <fsm_tuning_run+0x4bc>)
 800155e:	483c      	ldr	r0, [pc, #240]	; (8001650 <fsm_tuning_run+0x4c0>)
 8001560:	f003 f864 	bl	800462c <HAL_UART_Transmit>
		}
		if(isBTHold(1) == 1){
 8001564:	2001      	movs	r0, #1
 8001566:	f7fe fea7 	bl	80002b8 <isBTHold>
 800156a:	4603      	mov	r3, r0
 800156c:	2b01      	cmp	r3, #1
 800156e:	d130      	bne.n	80015d2 <fsm_tuning_run+0x442>
			greenTemp += 10;
 8001570:	4b32      	ldr	r3, [pc, #200]	; (800163c <fsm_tuning_run+0x4ac>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	330a      	adds	r3, #10
 8001576:	4a31      	ldr	r2, [pc, #196]	; (800163c <fsm_tuning_run+0x4ac>)
 8001578:	6013      	str	r3, [r2, #0]
			if(greenTemp > 99) greenTemp = 1;
 800157a:	4b30      	ldr	r3, [pc, #192]	; (800163c <fsm_tuning_run+0x4ac>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2b63      	cmp	r3, #99	; 0x63
 8001580:	dd02      	ble.n	8001588 <fsm_tuning_run+0x3f8>
 8001582:	4b2e      	ldr	r3, [pc, #184]	; (800163c <fsm_tuning_run+0x4ac>)
 8001584:	2201      	movs	r2, #1
 8001586:	601a      	str	r2, [r3, #0]
			int buffer1 = greenTemp / 10;
 8001588:	4b2c      	ldr	r3, [pc, #176]	; (800163c <fsm_tuning_run+0x4ac>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a2d      	ldr	r2, [pc, #180]	; (8001644 <fsm_tuning_run+0x4b4>)
 800158e:	fb82 1203 	smull	r1, r2, r2, r3
 8001592:	1092      	asrs	r2, r2, #2
 8001594:	17db      	asrs	r3, r3, #31
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	637b      	str	r3, [r7, #52]	; 0x34
			int buffer2 = greenTemp % 10;
 800159a:	4b28      	ldr	r3, [pc, #160]	; (800163c <fsm_tuning_run+0x4ac>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	4b29      	ldr	r3, [pc, #164]	; (8001644 <fsm_tuning_run+0x4b4>)
 80015a0:	fb83 1302 	smull	r1, r3, r3, r2
 80015a4:	1099      	asrs	r1, r3, #2
 80015a6:	17d3      	asrs	r3, r2, #31
 80015a8:	1ac9      	subs	r1, r1, r3
 80015aa:	460b      	mov	r3, r1
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	440b      	add	r3, r1
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	633b      	str	r3, [r7, #48]	; 0x30
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#TUNING_GREEN(+10)\r\n", buffer1, buffer2), 1000);
 80015b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015ba:	4928      	ldr	r1, [pc, #160]	; (800165c <fsm_tuning_run+0x4cc>)
 80015bc:	4823      	ldr	r0, [pc, #140]	; (800164c <fsm_tuning_run+0x4bc>)
 80015be:	f003 f9b5 	bl	800492c <siprintf>
 80015c2:	4603      	mov	r3, r0
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ca:	4920      	ldr	r1, [pc, #128]	; (800164c <fsm_tuning_run+0x4bc>)
 80015cc:	4820      	ldr	r0, [pc, #128]	; (8001650 <fsm_tuning_run+0x4c0>)
 80015ce:	f003 f82d 	bl	800462c <HAL_UART_Transmit>
		}
		if(isBTPressed(2) == 1){
 80015d2:	2002      	movs	r0, #2
 80015d4:	f7fe fe56 	bl	8000284 <isBTPressed>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b01      	cmp	r3, #1
 80015dc:	f040 8139 	bne.w	8001852 <fsm_tuning_run+0x6c2>
			green = greenTemp;
 80015e0:	4b16      	ldr	r3, [pc, #88]	; (800163c <fsm_tuning_run+0x4ac>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a1e      	ldr	r2, [pc, #120]	; (8001660 <fsm_tuning_run+0x4d0>)
 80015e6:	6013      	str	r3, [r2, #0]
			int buffer1 = green / 10;
 80015e8:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <fsm_tuning_run+0x4d0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a15      	ldr	r2, [pc, #84]	; (8001644 <fsm_tuning_run+0x4b4>)
 80015ee:	fb82 1203 	smull	r1, r2, r2, r3
 80015f2:	1092      	asrs	r2, r2, #2
 80015f4:	17db      	asrs	r3, r3, #31
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
			int buffer2 = green % 10;
 80015fa:	4b19      	ldr	r3, [pc, #100]	; (8001660 <fsm_tuning_run+0x4d0>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <fsm_tuning_run+0x4b4>)
 8001600:	fb83 1302 	smull	r1, r3, r3, r2
 8001604:	1099      	asrs	r1, r3, #2
 8001606:	17d3      	asrs	r3, r2, #31
 8001608:	1ac9      	subs	r1, r1, r3
 800160a:	460b      	mov	r3, r1
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	440b      	add	r3, r1
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	62bb      	str	r3, [r7, #40]	; 0x28
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#GREEN_SET\r\n", buffer1, buffer2), 1000);
 8001616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800161a:	4912      	ldr	r1, [pc, #72]	; (8001664 <fsm_tuning_run+0x4d4>)
 800161c:	480b      	ldr	r0, [pc, #44]	; (800164c <fsm_tuning_run+0x4bc>)
 800161e:	f003 f985 	bl	800492c <siprintf>
 8001622:	4603      	mov	r3, r0
 8001624:	b29a      	uxth	r2, r3
 8001626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800162a:	4908      	ldr	r1, [pc, #32]	; (800164c <fsm_tuning_run+0x4bc>)
 800162c:	4808      	ldr	r0, [pc, #32]	; (8001650 <fsm_tuning_run+0x4c0>)
 800162e:	f002 fffd 	bl	800462c <HAL_UART_Transmit>
		}
		break;
 8001632:	e10e      	b.n	8001852 <fsm_tuning_run+0x6c2>
 8001634:	2000035c 	.word	0x2000035c
 8001638:	20000192 	.word	0x20000192
 800163c:	2000008c 	.word	0x2000008c
 8001640:	20000088 	.word	0x20000088
 8001644:	66666667 	.word	0x66666667
 8001648:	080053a4 	.word	0x080053a4
 800164c:	20000160 	.word	0x20000160
 8001650:	20000224 	.word	0x20000224
 8001654:	20000090 	.word	0x20000090
 8001658:	0800542c 	.word	0x0800542c
 800165c:	0800544c 	.word	0x0800544c
 8001660:	20000098 	.word	0x20000098
 8001664:	0800546c 	.word	0x0800546c
	case TUNING_YELLOW:
		if(timer_flag[3] == 1){
 8001668:	4b7d      	ldr	r3, [pc, #500]	; (8001860 <fsm_tuning_run+0x6d0>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d105      	bne.n	800167c <fsm_tuning_run+0x4ec>
			toggleYellowLED();
 8001670:	f000 fa3c 	bl	8001aec <toggleYellowLED>
			setTimer(250, 3);
 8001674:	2103      	movs	r1, #3
 8001676:	20fa      	movs	r0, #250	; 0xfa
 8001678:	f000 fee8 	bl	800244c <setTimer>
		}
		if(isBTPressed(0) == 1){
 800167c:	2000      	movs	r0, #0
 800167e:	f7fe fe01 	bl	8000284 <isBTPressed>
 8001682:	4603      	mov	r3, r0
 8001684:	2b01      	cmp	r3, #1
 8001686:	d12c      	bne.n	80016e2 <fsm_tuning_run+0x552>
			status = TUNING_GREEN;
 8001688:	4b76      	ldr	r3, [pc, #472]	; (8001864 <fsm_tuning_run+0x6d4>)
 800168a:	220c      	movs	r2, #12
 800168c:	701a      	strb	r2, [r3, #0]
			yellowTemp = 1;
 800168e:	4b76      	ldr	r3, [pc, #472]	; (8001868 <fsm_tuning_run+0x6d8>)
 8001690:	2201      	movs	r2, #1
 8001692:	601a      	str	r2, [r3, #0]
			clearTrafficLights();
 8001694:	f000 f9d4 	bl	8001a40 <clearTrafficLights>
			int buffer1 = greenTemp / 10;
 8001698:	4b74      	ldr	r3, [pc, #464]	; (800186c <fsm_tuning_run+0x6dc>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a74      	ldr	r2, [pc, #464]	; (8001870 <fsm_tuning_run+0x6e0>)
 800169e:	fb82 1203 	smull	r1, r2, r2, r3
 80016a2:	1092      	asrs	r2, r2, #2
 80016a4:	17db      	asrs	r3, r3, #31
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	667b      	str	r3, [r7, #100]	; 0x64
			int buffer2 = greenTemp % 10;
 80016aa:	4b70      	ldr	r3, [pc, #448]	; (800186c <fsm_tuning_run+0x6dc>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	4b70      	ldr	r3, [pc, #448]	; (8001870 <fsm_tuning_run+0x6e0>)
 80016b0:	fb83 1302 	smull	r1, r3, r3, r2
 80016b4:	1099      	asrs	r1, r3, #2
 80016b6:	17d3      	asrs	r3, r2, #31
 80016b8:	1ac9      	subs	r1, r1, r3
 80016ba:	460b      	mov	r3, r1
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	440b      	add	r3, r1
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	663b      	str	r3, [r7, #96]	; 0x60
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#TUNING_GREEN\r\n", buffer1, buffer2), 1000);
 80016c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016c8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80016ca:	496a      	ldr	r1, [pc, #424]	; (8001874 <fsm_tuning_run+0x6e4>)
 80016cc:	486a      	ldr	r0, [pc, #424]	; (8001878 <fsm_tuning_run+0x6e8>)
 80016ce:	f003 f92d 	bl	800492c <siprintf>
 80016d2:	4603      	mov	r3, r0
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016da:	4967      	ldr	r1, [pc, #412]	; (8001878 <fsm_tuning_run+0x6e8>)
 80016dc:	4867      	ldr	r0, [pc, #412]	; (800187c <fsm_tuning_run+0x6ec>)
 80016de:	f002 ffa5 	bl	800462c <HAL_UART_Transmit>
		}
		if(isBTHold(0) == 1){
 80016e2:	2000      	movs	r0, #0
 80016e4:	f7fe fde8 	bl	80002b8 <isBTHold>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d10f      	bne.n	800170e <fsm_tuning_run+0x57e>
			status = INIT;
 80016ee:	4b5d      	ldr	r3, [pc, #372]	; (8001864 <fsm_tuning_run+0x6d4>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
			redTemp = 1; greenTemp = 1; yellowTemp = 1;
 80016f4:	4b62      	ldr	r3, [pc, #392]	; (8001880 <fsm_tuning_run+0x6f0>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	4b5c      	ldr	r3, [pc, #368]	; (800186c <fsm_tuning_run+0x6dc>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	4b59      	ldr	r3, [pc, #356]	; (8001868 <fsm_tuning_run+0x6d8>)
 8001702:	2201      	movs	r2, #1
 8001704:	601a      	str	r2, [r3, #0]
			ledBalance();
 8001706:	f7ff fd15 	bl	8001134 <ledBalance>
			clearTrafficLights();
 800170a:	f000 f999 	bl	8001a40 <clearTrafficLights>
		}
		if(isBTPressed(1) == 1){
 800170e:	2001      	movs	r0, #1
 8001710:	f7fe fdb8 	bl	8000284 <isBTPressed>
 8001714:	4603      	mov	r3, r0
 8001716:	2b01      	cmp	r3, #1
 8001718:	d130      	bne.n	800177c <fsm_tuning_run+0x5ec>
			yellowTemp++;
 800171a:	4b53      	ldr	r3, [pc, #332]	; (8001868 <fsm_tuning_run+0x6d8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	3301      	adds	r3, #1
 8001720:	4a51      	ldr	r2, [pc, #324]	; (8001868 <fsm_tuning_run+0x6d8>)
 8001722:	6013      	str	r3, [r2, #0]
			if(yellowTemp > 99) yellowTemp = 1;
 8001724:	4b50      	ldr	r3, [pc, #320]	; (8001868 <fsm_tuning_run+0x6d8>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b63      	cmp	r3, #99	; 0x63
 800172a:	dd02      	ble.n	8001732 <fsm_tuning_run+0x5a2>
 800172c:	4b4e      	ldr	r3, [pc, #312]	; (8001868 <fsm_tuning_run+0x6d8>)
 800172e:	2201      	movs	r2, #1
 8001730:	601a      	str	r2, [r3, #0]
			int buffer1 = yellowTemp / 10;
 8001732:	4b4d      	ldr	r3, [pc, #308]	; (8001868 <fsm_tuning_run+0x6d8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a4e      	ldr	r2, [pc, #312]	; (8001870 <fsm_tuning_run+0x6e0>)
 8001738:	fb82 1203 	smull	r1, r2, r2, r3
 800173c:	1092      	asrs	r2, r2, #2
 800173e:	17db      	asrs	r3, r3, #31
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	65fb      	str	r3, [r7, #92]	; 0x5c
			int buffer2 = yellowTemp % 10;
 8001744:	4b48      	ldr	r3, [pc, #288]	; (8001868 <fsm_tuning_run+0x6d8>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4b49      	ldr	r3, [pc, #292]	; (8001870 <fsm_tuning_run+0x6e0>)
 800174a:	fb83 1302 	smull	r1, r3, r3, r2
 800174e:	1099      	asrs	r1, r3, #2
 8001750:	17d3      	asrs	r3, r2, #31
 8001752:	1ac9      	subs	r1, r1, r3
 8001754:	460b      	mov	r3, r1
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	440b      	add	r3, r1
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	65bb      	str	r3, [r7, #88]	; 0x58
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#TUNING_YELLOW(+1)\r\n", buffer1, buffer2), 1000);
 8001760:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001762:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001764:	4947      	ldr	r1, [pc, #284]	; (8001884 <fsm_tuning_run+0x6f4>)
 8001766:	4844      	ldr	r0, [pc, #272]	; (8001878 <fsm_tuning_run+0x6e8>)
 8001768:	f003 f8e0 	bl	800492c <siprintf>
 800176c:	4603      	mov	r3, r0
 800176e:	b29a      	uxth	r2, r3
 8001770:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001774:	4940      	ldr	r1, [pc, #256]	; (8001878 <fsm_tuning_run+0x6e8>)
 8001776:	4841      	ldr	r0, [pc, #260]	; (800187c <fsm_tuning_run+0x6ec>)
 8001778:	f002 ff58 	bl	800462c <HAL_UART_Transmit>
		}
		if(isBTHold(1) == 1){
 800177c:	2001      	movs	r0, #1
 800177e:	f7fe fd9b 	bl	80002b8 <isBTHold>
 8001782:	4603      	mov	r3, r0
 8001784:	2b01      	cmp	r3, #1
 8001786:	d130      	bne.n	80017ea <fsm_tuning_run+0x65a>
			yellowTemp += 10;
 8001788:	4b37      	ldr	r3, [pc, #220]	; (8001868 <fsm_tuning_run+0x6d8>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	330a      	adds	r3, #10
 800178e:	4a36      	ldr	r2, [pc, #216]	; (8001868 <fsm_tuning_run+0x6d8>)
 8001790:	6013      	str	r3, [r2, #0]
			if(yellowTemp > 99) yellowTemp = 1;
 8001792:	4b35      	ldr	r3, [pc, #212]	; (8001868 <fsm_tuning_run+0x6d8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2b63      	cmp	r3, #99	; 0x63
 8001798:	dd02      	ble.n	80017a0 <fsm_tuning_run+0x610>
 800179a:	4b33      	ldr	r3, [pc, #204]	; (8001868 <fsm_tuning_run+0x6d8>)
 800179c:	2201      	movs	r2, #1
 800179e:	601a      	str	r2, [r3, #0]
			int buffer1 = yellowTemp / 10;
 80017a0:	4b31      	ldr	r3, [pc, #196]	; (8001868 <fsm_tuning_run+0x6d8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a32      	ldr	r2, [pc, #200]	; (8001870 <fsm_tuning_run+0x6e0>)
 80017a6:	fb82 1203 	smull	r1, r2, r2, r3
 80017aa:	1092      	asrs	r2, r2, #2
 80017ac:	17db      	asrs	r3, r3, #31
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	657b      	str	r3, [r7, #84]	; 0x54
			int buffer2 = yellowTemp % 10;
 80017b2:	4b2d      	ldr	r3, [pc, #180]	; (8001868 <fsm_tuning_run+0x6d8>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	4b2e      	ldr	r3, [pc, #184]	; (8001870 <fsm_tuning_run+0x6e0>)
 80017b8:	fb83 1302 	smull	r1, r3, r3, r2
 80017bc:	1099      	asrs	r1, r3, #2
 80017be:	17d3      	asrs	r3, r2, #31
 80017c0:	1ac9      	subs	r1, r1, r3
 80017c2:	460b      	mov	r3, r1
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	440b      	add	r3, r1
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	653b      	str	r3, [r7, #80]	; 0x50
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#TUNING_YELLOW(+10)\r\n", buffer1, buffer2), 1000);
 80017ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80017d2:	492d      	ldr	r1, [pc, #180]	; (8001888 <fsm_tuning_run+0x6f8>)
 80017d4:	4828      	ldr	r0, [pc, #160]	; (8001878 <fsm_tuning_run+0x6e8>)
 80017d6:	f003 f8a9 	bl	800492c <siprintf>
 80017da:	4603      	mov	r3, r0
 80017dc:	b29a      	uxth	r2, r3
 80017de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e2:	4925      	ldr	r1, [pc, #148]	; (8001878 <fsm_tuning_run+0x6e8>)
 80017e4:	4825      	ldr	r0, [pc, #148]	; (800187c <fsm_tuning_run+0x6ec>)
 80017e6:	f002 ff21 	bl	800462c <HAL_UART_Transmit>
		}
		if(isBTPressed(2) == 1){
 80017ea:	2002      	movs	r0, #2
 80017ec:	f7fe fd4a 	bl	8000284 <isBTPressed>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d12f      	bne.n	8001856 <fsm_tuning_run+0x6c6>
			yellow = yellowTemp;
 80017f6:	4b1c      	ldr	r3, [pc, #112]	; (8001868 <fsm_tuning_run+0x6d8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a24      	ldr	r2, [pc, #144]	; (800188c <fsm_tuning_run+0x6fc>)
 80017fc:	6013      	str	r3, [r2, #0]
			int buffer1 = yellow / 10;
 80017fe:	4b23      	ldr	r3, [pc, #140]	; (800188c <fsm_tuning_run+0x6fc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a1b      	ldr	r2, [pc, #108]	; (8001870 <fsm_tuning_run+0x6e0>)
 8001804:	fb82 1203 	smull	r1, r2, r2, r3
 8001808:	1092      	asrs	r2, r2, #2
 800180a:	17db      	asrs	r3, r3, #31
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	64fb      	str	r3, [r7, #76]	; 0x4c
			int buffer2 = yellow % 10;
 8001810:	4b1e      	ldr	r3, [pc, #120]	; (800188c <fsm_tuning_run+0x6fc>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b16      	ldr	r3, [pc, #88]	; (8001870 <fsm_tuning_run+0x6e0>)
 8001816:	fb83 1302 	smull	r1, r3, r3, r2
 800181a:	1099      	asrs	r1, r3, #2
 800181c:	17d3      	asrs	r3, r2, #31
 800181e:	1ac9      	subs	r1, r1, r3
 8001820:	460b      	mov	r3, r1
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	440b      	add	r3, r1
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	64bb      	str	r3, [r7, #72]	; 0x48
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#YELLOW_SET\r\n", buffer1, buffer2), 1000);
 800182c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800182e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001830:	4917      	ldr	r1, [pc, #92]	; (8001890 <fsm_tuning_run+0x700>)
 8001832:	4811      	ldr	r0, [pc, #68]	; (8001878 <fsm_tuning_run+0x6e8>)
 8001834:	f003 f87a 	bl	800492c <siprintf>
 8001838:	4603      	mov	r3, r0
 800183a:	b29a      	uxth	r2, r3
 800183c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001840:	490d      	ldr	r1, [pc, #52]	; (8001878 <fsm_tuning_run+0x6e8>)
 8001842:	480e      	ldr	r0, [pc, #56]	; (800187c <fsm_tuning_run+0x6ec>)
 8001844:	f002 fef2 	bl	800462c <HAL_UART_Transmit>
		}
		break;
 8001848:	e005      	b.n	8001856 <fsm_tuning_run+0x6c6>
	default:
		break;
 800184a:	bf00      	nop
 800184c:	e004      	b.n	8001858 <fsm_tuning_run+0x6c8>
		break;
 800184e:	bf00      	nop
 8001850:	e002      	b.n	8001858 <fsm_tuning_run+0x6c8>
		break;
 8001852:	bf00      	nop
 8001854:	e000      	b.n	8001858 <fsm_tuning_run+0x6c8>
		break;
 8001856:	bf00      	nop
	}
}
 8001858:	bf00      	nop
 800185a:	3768      	adds	r7, #104	; 0x68
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	2000035c 	.word	0x2000035c
 8001864:	20000192 	.word	0x20000192
 8001868:	20000090 	.word	0x20000090
 800186c:	2000008c 	.word	0x2000008c
 8001870:	66666667 	.word	0x66666667
 8001874:	08005484 	.word	0x08005484
 8001878:	20000160 	.word	0x20000160
 800187c:	20000224 	.word	0x20000224
 8001880:	20000088 	.word	0x20000088
 8001884:	080054a0 	.word	0x080054a0
 8001888:	080054c0 	.word	0x080054c0
 800188c:	2000009c 	.word	0x2000009c
 8001890:	080054e0 	.word	0x080054e0

08001894 <controlTrafficLights>:
int yellow = 2;
int isPed;
char message[MAX_MESSAGE_LENGTH];
enum TRAFFIC_STATE status = INIT;

void controlTrafficLights(int color1, int color2){
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
//	index = 0 -> W-E Traffic light
//  index = 1 -> N-S Traffic light
	switch(color1){
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b66      	cmp	r3, #102	; 0x66
 80018a2:	d021      	beq.n	80018e8 <controlTrafficLights+0x54>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b66      	cmp	r3, #102	; 0x66
 80018a8:	dc2a      	bgt.n	8001900 <controlTrafficLights+0x6c>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b64      	cmp	r3, #100	; 0x64
 80018ae:	d003      	beq.n	80018b8 <controlTrafficLights+0x24>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b65      	cmp	r3, #101	; 0x65
 80018b4:	d00c      	beq.n	80018d0 <controlTrafficLights+0x3c>
 80018b6:	e023      	b.n	8001900 <controlTrafficLights+0x6c>
	case RED:
		HAL_GPIO_WritePin(D2_TF1_LED1_GPIO_Port, D2_TF1_LED1_Pin, GPIO_PIN_SET);
 80018b8:	2201      	movs	r2, #1
 80018ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018be:	4835      	ldr	r0, [pc, #212]	; (8001994 <controlTrafficLights+0x100>)
 80018c0:	f001 faa9 	bl	8002e16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_TF1_LED2_GPIO_Port, D3_TF1_LED2_Pin, GPIO_PIN_RESET);
 80018c4:	2200      	movs	r2, #0
 80018c6:	2108      	movs	r1, #8
 80018c8:	4833      	ldr	r0, [pc, #204]	; (8001998 <controlTrafficLights+0x104>)
 80018ca:	f001 faa4 	bl	8002e16 <HAL_GPIO_WritePin>
		break;
 80018ce:	e023      	b.n	8001918 <controlTrafficLights+0x84>
	case GREEN:
		HAL_GPIO_WritePin(D2_TF1_LED1_GPIO_Port, D2_TF1_LED1_Pin, GPIO_PIN_RESET);
 80018d0:	2200      	movs	r2, #0
 80018d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018d6:	482f      	ldr	r0, [pc, #188]	; (8001994 <controlTrafficLights+0x100>)
 80018d8:	f001 fa9d 	bl	8002e16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_TF1_LED2_GPIO_Port, D3_TF1_LED2_Pin, GPIO_PIN_SET);
 80018dc:	2201      	movs	r2, #1
 80018de:	2108      	movs	r1, #8
 80018e0:	482d      	ldr	r0, [pc, #180]	; (8001998 <controlTrafficLights+0x104>)
 80018e2:	f001 fa98 	bl	8002e16 <HAL_GPIO_WritePin>
		break;
 80018e6:	e017      	b.n	8001918 <controlTrafficLights+0x84>
	case YELLOW:
		HAL_GPIO_WritePin(D2_TF1_LED1_GPIO_Port, D2_TF1_LED1_Pin, GPIO_PIN_SET);
 80018e8:	2201      	movs	r2, #1
 80018ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018ee:	4829      	ldr	r0, [pc, #164]	; (8001994 <controlTrafficLights+0x100>)
 80018f0:	f001 fa91 	bl	8002e16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_TF1_LED2_GPIO_Port, D3_TF1_LED2_Pin, GPIO_PIN_SET);
 80018f4:	2201      	movs	r2, #1
 80018f6:	2108      	movs	r1, #8
 80018f8:	4827      	ldr	r0, [pc, #156]	; (8001998 <controlTrafficLights+0x104>)
 80018fa:	f001 fa8c 	bl	8002e16 <HAL_GPIO_WritePin>
		break;
 80018fe:	e00b      	b.n	8001918 <controlTrafficLights+0x84>
	default:
		HAL_GPIO_WritePin(D2_TF1_LED1_GPIO_Port, D2_TF1_LED1_Pin, GPIO_PIN_RESET);
 8001900:	2200      	movs	r2, #0
 8001902:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001906:	4823      	ldr	r0, [pc, #140]	; (8001994 <controlTrafficLights+0x100>)
 8001908:	f001 fa85 	bl	8002e16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_TF1_LED2_GPIO_Port, D3_TF1_LED2_Pin, GPIO_PIN_RESET);
 800190c:	2200      	movs	r2, #0
 800190e:	2108      	movs	r1, #8
 8001910:	4821      	ldr	r0, [pc, #132]	; (8001998 <controlTrafficLights+0x104>)
 8001912:	f001 fa80 	bl	8002e16 <HAL_GPIO_WritePin>
		break;
 8001916:	bf00      	nop
	}
	switch(color2){
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	2b66      	cmp	r3, #102	; 0x66
 800191c:	d01f      	beq.n	800195e <controlTrafficLights+0xca>
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	2b66      	cmp	r3, #102	; 0x66
 8001922:	dc27      	bgt.n	8001974 <controlTrafficLights+0xe0>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	2b64      	cmp	r3, #100	; 0x64
 8001928:	d003      	beq.n	8001932 <controlTrafficLights+0x9e>
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	2b65      	cmp	r3, #101	; 0x65
 800192e:	d00b      	beq.n	8001948 <controlTrafficLights+0xb4>
 8001930:	e020      	b.n	8001974 <controlTrafficLights+0xe0>
	case RED:
		HAL_GPIO_WritePin(D4_TF2_LED1_GPIO_Port, D4_TF2_LED1_Pin, GPIO_PIN_SET);
 8001932:	2201      	movs	r2, #1
 8001934:	2120      	movs	r1, #32
 8001936:	4818      	ldr	r0, [pc, #96]	; (8001998 <controlTrafficLights+0x104>)
 8001938:	f001 fa6d 	bl	8002e16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_TF2_LED2_GPIO_Port, D5_TF2_LED2_Pin, GPIO_PIN_RESET);
 800193c:	2200      	movs	r2, #0
 800193e:	2110      	movs	r1, #16
 8001940:	4815      	ldr	r0, [pc, #84]	; (8001998 <controlTrafficLights+0x104>)
 8001942:	f001 fa68 	bl	8002e16 <HAL_GPIO_WritePin>
		break;
 8001946:	e020      	b.n	800198a <controlTrafficLights+0xf6>
	case GREEN: // GREEN
		HAL_GPIO_WritePin(D4_TF2_LED1_GPIO_Port, D4_TF2_LED1_Pin, GPIO_PIN_RESET);
 8001948:	2200      	movs	r2, #0
 800194a:	2120      	movs	r1, #32
 800194c:	4812      	ldr	r0, [pc, #72]	; (8001998 <controlTrafficLights+0x104>)
 800194e:	f001 fa62 	bl	8002e16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_TF2_LED2_GPIO_Port, D5_TF2_LED2_Pin, GPIO_PIN_SET);
 8001952:	2201      	movs	r2, #1
 8001954:	2110      	movs	r1, #16
 8001956:	4810      	ldr	r0, [pc, #64]	; (8001998 <controlTrafficLights+0x104>)
 8001958:	f001 fa5d 	bl	8002e16 <HAL_GPIO_WritePin>
		break;
 800195c:	e015      	b.n	800198a <controlTrafficLights+0xf6>
	case YELLOW: // YELLOW
		HAL_GPIO_WritePin(D4_TF2_LED1_GPIO_Port, D4_TF2_LED1_Pin, GPIO_PIN_SET);
 800195e:	2201      	movs	r2, #1
 8001960:	2120      	movs	r1, #32
 8001962:	480d      	ldr	r0, [pc, #52]	; (8001998 <controlTrafficLights+0x104>)
 8001964:	f001 fa57 	bl	8002e16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_TF2_LED2_GPIO_Port, D5_TF2_LED2_Pin, GPIO_PIN_SET);
 8001968:	2201      	movs	r2, #1
 800196a:	2110      	movs	r1, #16
 800196c:	480a      	ldr	r0, [pc, #40]	; (8001998 <controlTrafficLights+0x104>)
 800196e:	f001 fa52 	bl	8002e16 <HAL_GPIO_WritePin>
		break;
 8001972:	e00a      	b.n	800198a <controlTrafficLights+0xf6>
	default:
		HAL_GPIO_WritePin(D4_TF2_LED1_GPIO_Port, D4_TF2_LED1_Pin, GPIO_PIN_RESET);
 8001974:	2200      	movs	r2, #0
 8001976:	2120      	movs	r1, #32
 8001978:	4807      	ldr	r0, [pc, #28]	; (8001998 <controlTrafficLights+0x104>)
 800197a:	f001 fa4c 	bl	8002e16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_TF2_LED2_GPIO_Port, D5_TF2_LED2_Pin, GPIO_PIN_RESET);
 800197e:	2200      	movs	r2, #0
 8001980:	2110      	movs	r1, #16
 8001982:	4805      	ldr	r0, [pc, #20]	; (8001998 <controlTrafficLights+0x104>)
 8001984:	f001 fa47 	bl	8002e16 <HAL_GPIO_WritePin>
		break;
 8001988:	bf00      	nop
	}
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40010800 	.word	0x40010800
 8001998:	40010c00 	.word	0x40010c00

0800199c <controlPedLights>:

void controlPedLights(int color){
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
	switch(color){
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3b64      	subs	r3, #100	; 0x64
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d83f      	bhi.n	8001a2c <controlPedLights+0x90>
 80019ac:	a201      	add	r2, pc, #4	; (adr r2, 80019b4 <controlPedLights+0x18>)
 80019ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b2:	bf00      	nop
 80019b4:	080019c5 	.word	0x080019c5
 80019b8:	080019df 	.word	0x080019df
 80019bc:	080019f9 	.word	0x080019f9
 80019c0:	08001a13 	.word	0x08001a13
	case RED: // RED
		HAL_GPIO_WritePin(D6_PDL_LED1_GPIO_Port, D6_PDL_LED1_Pin, GPIO_PIN_SET);
 80019c4:	2201      	movs	r2, #1
 80019c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019ca:	481b      	ldr	r0, [pc, #108]	; (8001a38 <controlPedLights+0x9c>)
 80019cc:	f001 fa23 	bl	8002e16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_PDL_LED2_GPIO_Port, D7_PDL_LED2_Pin, GPIO_PIN_RESET);
 80019d0:	2200      	movs	r2, #0
 80019d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019d6:	4819      	ldr	r0, [pc, #100]	; (8001a3c <controlPedLights+0xa0>)
 80019d8:	f001 fa1d 	bl	8002e16 <HAL_GPIO_WritePin>
		break;
 80019dc:	e027      	b.n	8001a2e <controlPedLights+0x92>
	case GREEN: // GREEN
		HAL_GPIO_WritePin(D6_PDL_LED1_GPIO_Port, D6_PDL_LED1_Pin, GPIO_PIN_RESET);
 80019de:	2200      	movs	r2, #0
 80019e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019e4:	4814      	ldr	r0, [pc, #80]	; (8001a38 <controlPedLights+0x9c>)
 80019e6:	f001 fa16 	bl	8002e16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_PDL_LED2_GPIO_Port, D7_PDL_LED2_Pin, GPIO_PIN_SET);
 80019ea:	2201      	movs	r2, #1
 80019ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019f0:	4812      	ldr	r0, [pc, #72]	; (8001a3c <controlPedLights+0xa0>)
 80019f2:	f001 fa10 	bl	8002e16 <HAL_GPIO_WritePin>
		break;
 80019f6:	e01a      	b.n	8001a2e <controlPedLights+0x92>
	case YELLOW: // YELLOW
		HAL_GPIO_WritePin(D6_PDL_LED1_GPIO_Port, D6_PDL_LED1_Pin, GPIO_PIN_SET);
 80019f8:	2201      	movs	r2, #1
 80019fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019fe:	480e      	ldr	r0, [pc, #56]	; (8001a38 <controlPedLights+0x9c>)
 8001a00:	f001 fa09 	bl	8002e16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_PDL_LED2_GPIO_Port, D7_PDL_LED2_Pin, GPIO_PIN_SET);
 8001a04:	2201      	movs	r2, #1
 8001a06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a0a:	480c      	ldr	r0, [pc, #48]	; (8001a3c <controlPedLights+0xa0>)
 8001a0c:	f001 fa03 	bl	8002e16 <HAL_GPIO_WritePin>
		break;
 8001a10:	e00d      	b.n	8001a2e <controlPedLights+0x92>
	case OFF: // OFF
		HAL_GPIO_WritePin(D6_PDL_LED1_GPIO_Port, D6_PDL_LED1_Pin, GPIO_PIN_RESET);
 8001a12:	2200      	movs	r2, #0
 8001a14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a18:	4807      	ldr	r0, [pc, #28]	; (8001a38 <controlPedLights+0x9c>)
 8001a1a:	f001 f9fc 	bl	8002e16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_PDL_LED2_GPIO_Port, D7_PDL_LED2_Pin, GPIO_PIN_RESET);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a24:	4805      	ldr	r0, [pc, #20]	; (8001a3c <controlPedLights+0xa0>)
 8001a26:	f001 f9f6 	bl	8002e16 <HAL_GPIO_WritePin>
		break;
 8001a2a:	e000      	b.n	8001a2e <controlPedLights+0x92>
	default:
		break;
 8001a2c:	bf00      	nop
	}
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40010c00 	.word	0x40010c00
 8001a3c:	40010800 	.word	0x40010800

08001a40 <clearTrafficLights>:

void clearTrafficLights(){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	//Main TL
	HAL_GPIO_WritePin(D2_TF1_LED1_GPIO_Port, D2_TF1_LED1_Pin, GPIO_PIN_RESET);
 8001a44:	2200      	movs	r2, #0
 8001a46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a4a:	480a      	ldr	r0, [pc, #40]	; (8001a74 <clearTrafficLights+0x34>)
 8001a4c:	f001 f9e3 	bl	8002e16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_TF1_LED2_GPIO_Port, D3_TF1_LED2_Pin, GPIO_PIN_RESET);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2108      	movs	r1, #8
 8001a54:	4808      	ldr	r0, [pc, #32]	; (8001a78 <clearTrafficLights+0x38>)
 8001a56:	f001 f9de 	bl	8002e16 <HAL_GPIO_WritePin>

	//Other TL
	HAL_GPIO_WritePin(D4_TF2_LED1_GPIO_Port, D4_TF2_LED1_Pin, GPIO_PIN_RESET);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2120      	movs	r1, #32
 8001a5e:	4806      	ldr	r0, [pc, #24]	; (8001a78 <clearTrafficLights+0x38>)
 8001a60:	f001 f9d9 	bl	8002e16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_TF2_LED2_GPIO_Port, D5_TF2_LED2_Pin, GPIO_PIN_RESET);
 8001a64:	2200      	movs	r2, #0
 8001a66:	2110      	movs	r1, #16
 8001a68:	4803      	ldr	r0, [pc, #12]	; (8001a78 <clearTrafficLights+0x38>)
 8001a6a:	f001 f9d4 	bl	8002e16 <HAL_GPIO_WritePin>
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40010800 	.word	0x40010800
 8001a78:	40010c00 	.word	0x40010c00

08001a7c <toggleRedLED>:

void toggleRedLED(){
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D3_TF1_LED2_GPIO_Port, D3_TF1_LED2_Pin, GPIO_PIN_RESET);
 8001a80:	2200      	movs	r2, #0
 8001a82:	2108      	movs	r1, #8
 8001a84:	4809      	ldr	r0, [pc, #36]	; (8001aac <toggleRedLED+0x30>)
 8001a86:	f001 f9c6 	bl	8002e16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_TF2_LED2_GPIO_Port, D5_TF2_LED2_Pin, GPIO_PIN_RESET);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2110      	movs	r1, #16
 8001a8e:	4807      	ldr	r0, [pc, #28]	; (8001aac <toggleRedLED+0x30>)
 8001a90:	f001 f9c1 	bl	8002e16 <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(D2_TF1_LED1_GPIO_Port, D2_TF1_LED1_Pin);
 8001a94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a98:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <toggleRedLED+0x34>)
 8001a9a:	f001 f9d4 	bl	8002e46 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D4_TF2_LED1_GPIO_Port, D4_TF2_LED1_Pin);
 8001a9e:	2120      	movs	r1, #32
 8001aa0:	4802      	ldr	r0, [pc, #8]	; (8001aac <toggleRedLED+0x30>)
 8001aa2:	f001 f9d0 	bl	8002e46 <HAL_GPIO_TogglePin>
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40010c00 	.word	0x40010c00
 8001ab0:	40010800 	.word	0x40010800

08001ab4 <toggleGreenLED>:

void toggleGreenLED(){
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_TF1_LED1_GPIO_Port, D2_TF1_LED1_Pin, GPIO_PIN_RESET);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001abe:	4809      	ldr	r0, [pc, #36]	; (8001ae4 <toggleGreenLED+0x30>)
 8001ac0:	f001 f9a9 	bl	8002e16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_TF2_LED1_GPIO_Port, D4_TF2_LED1_Pin, GPIO_PIN_RESET);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2120      	movs	r1, #32
 8001ac8:	4807      	ldr	r0, [pc, #28]	; (8001ae8 <toggleGreenLED+0x34>)
 8001aca:	f001 f9a4 	bl	8002e16 <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(D3_TF1_LED2_GPIO_Port, D3_TF1_LED2_Pin);
 8001ace:	2108      	movs	r1, #8
 8001ad0:	4805      	ldr	r0, [pc, #20]	; (8001ae8 <toggleGreenLED+0x34>)
 8001ad2:	f001 f9b8 	bl	8002e46 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D5_TF2_LED2_GPIO_Port, D5_TF2_LED2_Pin);
 8001ad6:	2110      	movs	r1, #16
 8001ad8:	4803      	ldr	r0, [pc, #12]	; (8001ae8 <toggleGreenLED+0x34>)
 8001ada:	f001 f9b4 	bl	8002e46 <HAL_GPIO_TogglePin>
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40010800 	.word	0x40010800
 8001ae8:	40010c00 	.word	0x40010c00

08001aec <toggleYellowLED>:

void toggleYellowLED(){
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
		HAL_GPIO_TogglePin(D2_TF1_LED1_GPIO_Port, D2_TF1_LED1_Pin);
 8001af0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001af4:	4808      	ldr	r0, [pc, #32]	; (8001b18 <toggleYellowLED+0x2c>)
 8001af6:	f001 f9a6 	bl	8002e46 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(D3_TF1_LED2_GPIO_Port, D3_TF1_LED2_Pin);
 8001afa:	2108      	movs	r1, #8
 8001afc:	4807      	ldr	r0, [pc, #28]	; (8001b1c <toggleYellowLED+0x30>)
 8001afe:	f001 f9a2 	bl	8002e46 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(D4_TF2_LED1_GPIO_Port, D4_TF2_LED1_Pin);
 8001b02:	2120      	movs	r1, #32
 8001b04:	4805      	ldr	r0, [pc, #20]	; (8001b1c <toggleYellowLED+0x30>)
 8001b06:	f001 f99e 	bl	8002e46 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(D5_TF2_LED2_GPIO_Port, D5_TF2_LED2_Pin);
 8001b0a:	2110      	movs	r1, #16
 8001b0c:	4803      	ldr	r0, [pc, #12]	; (8001b1c <toggleYellowLED+0x30>)
 8001b0e:	f001 f99a 	bl	8002e46 <HAL_GPIO_TogglePin>
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40010800 	.word	0x40010800
 8001b1c:	40010c00 	.word	0x40010c00

08001b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b24:	f000 fe6c 	bl	8002800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b28:	f000 f84a 	bl	8001bc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b2c:	f000 f95a 	bl	8001de4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001b30:	f000 f888 	bl	8001c44 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001b34:	f000 f92c 	bl	8001d90 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001b38:	f000 f8d0 	bl	8001cdc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001b3c:	4816      	ldr	r0, [pc, #88]	; (8001b98 <main+0x78>)
 8001b3e:	f001 fe17 	bl	8003770 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001b42:	2100      	movs	r1, #0
 8001b44:	4815      	ldr	r0, [pc, #84]	; (8001b9c <main+0x7c>)
 8001b46:	f001 feb5 	bl	80038b4 <HAL_TIM_PWM_Start>
  buzzer_init(TIM3);
 8001b4a:	4815      	ldr	r0, [pc, #84]	; (8001ba0 <main+0x80>)
 8001b4c:	f7fe fbce 	bl	80002ec <buzzer_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 8001b50:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <main+0x84>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	701a      	strb	r2, [r3, #0]

  SCH_Add_Task(fsm_automatic_run, 0, 1);
 8001b56:	2201      	movs	r2, #1
 8001b58:	2100      	movs	r1, #0
 8001b5a:	4813      	ldr	r0, [pc, #76]	; (8001ba8 <main+0x88>)
 8001b5c:	f000 f9e8 	bl	8001f30 <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_run, 0, 1);
 8001b60:	2201      	movs	r2, #1
 8001b62:	2100      	movs	r1, #0
 8001b64:	4811      	ldr	r0, [pc, #68]	; (8001bac <main+0x8c>)
 8001b66:	f000 f9e3 	bl	8001f30 <SCH_Add_Task>
  SCH_Add_Task(fsm_tuning_run, 0, 1);
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4810      	ldr	r0, [pc, #64]	; (8001bb0 <main+0x90>)
 8001b70:	f000 f9de 	bl	8001f30 <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 0, 1);
 8001b74:	2201      	movs	r2, #1
 8001b76:	2100      	movs	r1, #0
 8001b78:	480e      	ldr	r0, [pc, #56]	; (8001bb4 <main+0x94>)
 8001b7a:	f000 f9d9 	bl	8001f30 <SCH_Add_Task>
  SCH_Add_Task(timerRun, 0, 1);
 8001b7e:	2201      	movs	r2, #1
 8001b80:	2100      	movs	r1, #0
 8001b82:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <main+0x98>)
 8001b84:	f000 f9d4 	bl	8001f30 <SCH_Add_Task>
  SCH_Add_Task(buzzer_run, 0, 1);
 8001b88:	2201      	movs	r2, #1
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	480b      	ldr	r0, [pc, #44]	; (8001bbc <main+0x9c>)
 8001b8e:	f000 f9cf 	bl	8001f30 <SCH_Add_Task>

  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks();
 8001b92:	f000 fc17 	bl	80023c4 <SCH_Dispatch_Tasks>
 8001b96:	e7fc      	b.n	8001b92 <main+0x72>
 8001b98:	20000194 	.word	0x20000194
 8001b9c:	200001dc 	.word	0x200001dc
 8001ba0:	40000400 	.word	0x40000400
 8001ba4:	20000192 	.word	0x20000192
 8001ba8:	0800047d 	.word	0x0800047d
 8001bac:	08000d11 	.word	0x08000d11
 8001bb0:	08001191 	.word	0x08001191
 8001bb4:	0800014d 	.word	0x0800014d
 8001bb8:	0800248d 	.word	0x0800248d
 8001bbc:	0800036d 	.word	0x0800036d

08001bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b090      	sub	sp, #64	; 0x40
 8001bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bc6:	f107 0318 	add.w	r3, r7, #24
 8001bca:	2228      	movs	r2, #40	; 0x28
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f002 fecc 	bl	800496c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]
 8001be0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001be2:	2302      	movs	r3, #2
 8001be4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001be6:	2301      	movs	r3, #1
 8001be8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bea:	2310      	movs	r3, #16
 8001bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001bf6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bfc:	f107 0318 	add.w	r3, r7, #24
 8001c00:	4618      	mov	r0, r3
 8001c02:	f001 f955 	bl	8002eb0 <HAL_RCC_OscConfig>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001c0c:	f000 f962 	bl	8001ed4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c10:	230f      	movs	r3, #15
 8001c12:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c14:	2302      	movs	r3, #2
 8001c16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c26:	1d3b      	adds	r3, r7, #4
 8001c28:	2102      	movs	r1, #2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f001 fbc2 	bl	80033b4 <HAL_RCC_ClockConfig>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001c36:	f000 f94d 	bl	8001ed4 <Error_Handler>
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	3740      	adds	r7, #64	; 0x40
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c4a:	f107 0308 	add.w	r3, r7, #8
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c58:	463b      	mov	r3, r7
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c60:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <MX_TIM2_Init+0x94>)
 8001c62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001c68:	4b1b      	ldr	r3, [pc, #108]	; (8001cd8 <MX_TIM2_Init+0x94>)
 8001c6a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001c6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c70:	4b19      	ldr	r3, [pc, #100]	; (8001cd8 <MX_TIM2_Init+0x94>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 8001c76:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <MX_TIM2_Init+0x94>)
 8001c78:	224f      	movs	r2, #79	; 0x4f
 8001c7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c7c:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <MX_TIM2_Init+0x94>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <MX_TIM2_Init+0x94>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c88:	4813      	ldr	r0, [pc, #76]	; (8001cd8 <MX_TIM2_Init+0x94>)
 8001c8a:	f001 fd21 	bl	80036d0 <HAL_TIM_Base_Init>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001c94:	f000 f91e 	bl	8001ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c9e:	f107 0308 	add.w	r3, r7, #8
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	480c      	ldr	r0, [pc, #48]	; (8001cd8 <MX_TIM2_Init+0x94>)
 8001ca6:	f002 f871 	bl	8003d8c <HAL_TIM_ConfigClockSource>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001cb0:	f000 f910 	bl	8001ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cbc:	463b      	mov	r3, r7
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <MX_TIM2_Init+0x94>)
 8001cc2:	f002 fbf3 	bl	80044ac <HAL_TIMEx_MasterConfigSynchronization>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001ccc:	f000 f902 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cd0:	bf00      	nop
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000194 	.word	0x20000194

08001cdc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08a      	sub	sp, #40	; 0x28
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce2:	f107 0320 	add.w	r3, r7, #32
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cec:	1d3b      	adds	r3, r7, #4
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	605a      	str	r2, [r3, #4]
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	60da      	str	r2, [r3, #12]
 8001cf8:	611a      	str	r2, [r3, #16]
 8001cfa:	615a      	str	r2, [r3, #20]
 8001cfc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cfe:	4b22      	ldr	r3, [pc, #136]	; (8001d88 <MX_TIM3_Init+0xac>)
 8001d00:	4a22      	ldr	r2, [pc, #136]	; (8001d8c <MX_TIM3_Init+0xb0>)
 8001d02:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001d04:	4b20      	ldr	r3, [pc, #128]	; (8001d88 <MX_TIM3_Init+0xac>)
 8001d06:	223f      	movs	r2, #63	; 0x3f
 8001d08:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0a:	4b1f      	ldr	r3, [pc, #124]	; (8001d88 <MX_TIM3_Init+0xac>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001d10:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <MX_TIM3_Init+0xac>)
 8001d12:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d16:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d18:	4b1b      	ldr	r3, [pc, #108]	; (8001d88 <MX_TIM3_Init+0xac>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <MX_TIM3_Init+0xac>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d24:	4818      	ldr	r0, [pc, #96]	; (8001d88 <MX_TIM3_Init+0xac>)
 8001d26:	f001 fd75 	bl	8003814 <HAL_TIM_PWM_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001d30:	f000 f8d0 	bl	8001ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d34:	2300      	movs	r3, #0
 8001d36:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d3c:	f107 0320 	add.w	r3, r7, #32
 8001d40:	4619      	mov	r1, r3
 8001d42:	4811      	ldr	r0, [pc, #68]	; (8001d88 <MX_TIM3_Init+0xac>)
 8001d44:	f002 fbb2 	bl	80044ac <HAL_TIMEx_MasterConfigSynchronization>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001d4e:	f000 f8c1 	bl	8001ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d52:	2360      	movs	r3, #96	; 0x60
 8001d54:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d62:	1d3b      	adds	r3, r7, #4
 8001d64:	2200      	movs	r2, #0
 8001d66:	4619      	mov	r1, r3
 8001d68:	4807      	ldr	r0, [pc, #28]	; (8001d88 <MX_TIM3_Init+0xac>)
 8001d6a:	f001 ff4d 	bl	8003c08 <HAL_TIM_PWM_ConfigChannel>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001d74:	f000 f8ae 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d78:	4803      	ldr	r0, [pc, #12]	; (8001d88 <MX_TIM3_Init+0xac>)
 8001d7a:	f000 fc31 	bl	80025e0 <HAL_TIM_MspPostInit>

}
 8001d7e:	bf00      	nop
 8001d80:	3728      	adds	r7, #40	; 0x28
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	200001dc 	.word	0x200001dc
 8001d8c:	40000400 	.word	0x40000400

08001d90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <MX_USART2_UART_Init+0x4c>)
 8001d96:	4a12      	ldr	r2, [pc, #72]	; (8001de0 <MX_USART2_UART_Init+0x50>)
 8001d98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <MX_USART2_UART_Init+0x4c>)
 8001d9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001da0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001da2:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <MX_USART2_UART_Init+0x4c>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001da8:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <MX_USART2_UART_Init+0x4c>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dae:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <MX_USART2_UART_Init+0x4c>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001db4:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <MX_USART2_UART_Init+0x4c>)
 8001db6:	220c      	movs	r2, #12
 8001db8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dba:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <MX_USART2_UART_Init+0x4c>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc0:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <MX_USART2_UART_Init+0x4c>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dc6:	4805      	ldr	r0, [pc, #20]	; (8001ddc <MX_USART2_UART_Init+0x4c>)
 8001dc8:	f002 fbe0 	bl	800458c <HAL_UART_Init>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001dd2:	f000 f87f 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000224 	.word	0x20000224
 8001de0:	40004400 	.word	0x40004400

08001de4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dea:	f107 0308 	add.w	r3, r7, #8
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df8:	4b2e      	ldr	r3, [pc, #184]	; (8001eb4 <MX_GPIO_Init+0xd0>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	4a2d      	ldr	r2, [pc, #180]	; (8001eb4 <MX_GPIO_Init+0xd0>)
 8001dfe:	f043 0304 	orr.w	r3, r3, #4
 8001e02:	6193      	str	r3, [r2, #24]
 8001e04:	4b2b      	ldr	r3, [pc, #172]	; (8001eb4 <MX_GPIO_Init+0xd0>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	607b      	str	r3, [r7, #4]
 8001e0e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e10:	4b28      	ldr	r3, [pc, #160]	; (8001eb4 <MX_GPIO_Init+0xd0>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	4a27      	ldr	r2, [pc, #156]	; (8001eb4 <MX_GPIO_Init+0xd0>)
 8001e16:	f043 0308 	orr.w	r3, r3, #8
 8001e1a:	6193      	str	r3, [r2, #24]
 8001e1c:	4b25      	ldr	r3, [pc, #148]	; (8001eb4 <MX_GPIO_Init+0xd0>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	f003 0308 	and.w	r3, r3, #8
 8001e24:	603b      	str	r3, [r7, #0]
 8001e26:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_PDL_LED1_Pin|D3_TF1_LED2_Pin|D5_TF2_LED2_Pin|D4_TF2_LED1_Pin, GPIO_PIN_RESET);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001e2e:	4822      	ldr	r0, [pc, #136]	; (8001eb8 <MX_GPIO_Init+0xd4>)
 8001e30:	f000 fff1 	bl	8002e16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_PDL_LED2_Pin|D2_TF1_LED1_Pin, GPIO_PIN_RESET);
 8001e34:	2200      	movs	r2, #0
 8001e36:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001e3a:	4820      	ldr	r0, [pc, #128]	; (8001ebc <MX_GPIO_Init+0xd8>)
 8001e3c:	f000 ffeb 	bl	8002e16 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_PD_BT_Pin A1_BT1_Pin A2_BT2_Pin */
  GPIO_InitStruct.Pin = A0_PD_BT_Pin|A1_BT1_Pin|A2_BT2_Pin;
 8001e40:	2313      	movs	r3, #19
 8001e42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4c:	f107 0308 	add.w	r3, r7, #8
 8001e50:	4619      	mov	r1, r3
 8001e52:	481a      	ldr	r0, [pc, #104]	; (8001ebc <MX_GPIO_Init+0xd8>)
 8001e54:	f000 fe44 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_BT3_Pin */
  GPIO_InitStruct.Pin = A3_BT3_Pin;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e60:	2301      	movs	r3, #1
 8001e62:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_BT3_GPIO_Port, &GPIO_InitStruct);
 8001e64:	f107 0308 	add.w	r3, r7, #8
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4813      	ldr	r0, [pc, #76]	; (8001eb8 <MX_GPIO_Init+0xd4>)
 8001e6c:	f000 fe38 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_PDL_LED1_Pin D3_TF1_LED2_Pin D5_TF2_LED2_Pin D4_TF2_LED1_Pin */
  GPIO_InitStruct.Pin = D6_PDL_LED1_Pin|D3_TF1_LED2_Pin|D5_TF2_LED2_Pin|D4_TF2_LED1_Pin;
 8001e70:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001e74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e76:	2301      	movs	r3, #1
 8001e78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e82:	f107 0308 	add.w	r3, r7, #8
 8001e86:	4619      	mov	r1, r3
 8001e88:	480b      	ldr	r0, [pc, #44]	; (8001eb8 <MX_GPIO_Init+0xd4>)
 8001e8a:	f000 fe29 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_PDL_LED2_Pin D2_TF1_LED1_Pin */
  GPIO_InitStruct.Pin = D7_PDL_LED2_Pin|D2_TF1_LED1_Pin;
 8001e8e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001e92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e94:	2301      	movs	r3, #1
 8001e96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea0:	f107 0308 	add.w	r3, r7, #8
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4805      	ldr	r0, [pc, #20]	; (8001ebc <MX_GPIO_Init+0xd8>)
 8001ea8:	f000 fe1a 	bl	8002ae0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001eac:	bf00      	nop
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40010c00 	.word	0x40010c00
 8001ebc:	40010800 	.word	0x40010800

08001ec0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8001ec8:	f000 f80a 	bl	8001ee0 <SCH_Update>
	//getKeyInput();
	//timerRun();
	//buzzer_run();
}
 8001ecc:	bf00      	nop
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed8:	b672      	cpsid	i
}
 8001eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001edc:	e7fe      	b.n	8001edc <Error_Handler+0x8>
	...

08001ee0 <SCH_Update>:

        SCH_tasks_G[i].TaskID = -1;
    }
}

void SCH_Update(void) {
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
	count_SCH_Update++;
 8001ee4:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <SCH_Update+0x48>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	4a0f      	ldr	r2, [pc, #60]	; (8001f28 <SCH_Update+0x48>)
 8001eec:	6013      	str	r3, [r2, #0]
	if (SCH_tasks_G[0].pTask && SCH_tasks_G[0].RunMe == 0) {
 8001eee:	4b0f      	ldr	r3, [pc, #60]	; (8001f2c <SCH_Update+0x4c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d013      	beq.n	8001f1e <SCH_Update+0x3e>
 8001ef6:	4b0d      	ldr	r3, [pc, #52]	; (8001f2c <SCH_Update+0x4c>)
 8001ef8:	7b1b      	ldrb	r3, [r3, #12]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10f      	bne.n	8001f1e <SCH_Update+0x3e>
		if(SCH_tasks_G[0].Delay > 0){
 8001efe:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <SCH_Update+0x4c>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d004      	beq.n	8001f10 <SCH_Update+0x30>
			SCH_tasks_G[0].Delay -= 1;
 8001f06:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <SCH_Update+0x4c>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	4a07      	ldr	r2, [pc, #28]	; (8001f2c <SCH_Update+0x4c>)
 8001f0e:	6053      	str	r3, [r2, #4]
		}
		if (SCH_tasks_G[0].Delay == 0) {
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <SCH_Update+0x4c>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d102      	bne.n	8001f1e <SCH_Update+0x3e>
			SCH_tasks_G[0].RunMe = 1;
 8001f18:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <SCH_Update+0x4c>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	731a      	strb	r2, [r3, #12]
		}
	}
}
 8001f1e:	bf00      	nop
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	20000338 	.word	0x20000338
 8001f2c:	2000026c 	.word	0x2000026c

08001f30 <SCH_Add_Task>:

uint32_t SCH_Add_Task(void (* pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 8001f30:	b590      	push	{r4, r7, lr}
 8001f32:	b089      	sub	sp, #36	; 0x24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
	uint8_t newTaskIndex = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	77fb      	strb	r3, [r7, #31]
	uint32_t sumDelay = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	61bb      	str	r3, [r7, #24]
	uint32_t newDelay = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	613b      	str	r3, [r7, #16]

	for (newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex++) {
 8001f48:	2300      	movs	r3, #0
 8001f4a:	77fb      	strb	r3, [r7, #31]
 8001f4c:	e133      	b.n	80021b6 <SCH_Add_Task+0x286>
		sumDelay = sumDelay + SCH_tasks_G[newTaskIndex].Delay;
 8001f4e:	7ffa      	ldrb	r2, [r7, #31]
 8001f50:	49a1      	ldr	r1, [pc, #644]	; (80021d8 <SCH_Add_Task+0x2a8>)
 8001f52:	4613      	mov	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4413      	add	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
		if (sumDelay > DELAY) {
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	f240 80c1 	bls.w	80020f2 <SCH_Add_Task+0x1c2>
			newDelay = DELAY - (sumDelay - SCH_tasks_G[newTaskIndex].Delay);
 8001f70:	7ffa      	ldrb	r2, [r7, #31]
 8001f72:	4999      	ldr	r1, [pc, #612]	; (80021d8 <SCH_Add_Task+0x2a8>)
 8001f74:	4613      	mov	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	3304      	adds	r3, #4
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	4413      	add	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
			SCH_tasks_G[newTaskIndex].Delay = sumDelay - DELAY;
 8001f8c:	7ffa      	ldrb	r2, [r7, #31]
 8001f8e:	69b9      	ldr	r1, [r7, #24]
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	1ac9      	subs	r1, r1, r3
 8001f94:	4890      	ldr	r0, [pc, #576]	; (80021d8 <SCH_Add_Task+0x2a8>)
 8001f96:	4613      	mov	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4403      	add	r3, r0
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 8001fa4:	2309      	movs	r3, #9
 8001fa6:	75fb      	strb	r3, [r7, #23]
 8001fa8:	e04c      	b.n	8002044 <SCH_Add_Task+0x114>
				SCH_tasks_G[i].pTask = SCH_tasks_G[i - 1].pTask;
 8001faa:	7dfb      	ldrb	r3, [r7, #23]
 8001fac:	1e59      	subs	r1, r3, #1
 8001fae:	7dfa      	ldrb	r2, [r7, #23]
 8001fb0:	4889      	ldr	r0, [pc, #548]	; (80021d8 <SCH_Add_Task+0x2a8>)
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4403      	add	r3, r0
 8001fbc:	6819      	ldr	r1, [r3, #0]
 8001fbe:	4886      	ldr	r0, [pc, #536]	; (80021d8 <SCH_Add_Task+0x2a8>)
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4403      	add	r3, r0
 8001fca:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[i].Period = SCH_tasks_G[i - 1].Period;
 8001fcc:	7dfb      	ldrb	r3, [r7, #23]
 8001fce:	1e59      	subs	r1, r3, #1
 8001fd0:	7dfa      	ldrb	r2, [r7, #23]
 8001fd2:	4881      	ldr	r0, [pc, #516]	; (80021d8 <SCH_Add_Task+0x2a8>)
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4403      	add	r3, r0
 8001fde:	3308      	adds	r3, #8
 8001fe0:	6819      	ldr	r1, [r3, #0]
 8001fe2:	487d      	ldr	r0, [pc, #500]	; (80021d8 <SCH_Add_Task+0x2a8>)
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4403      	add	r3, r0
 8001fee:	3308      	adds	r3, #8
 8001ff0:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[i].Delay = SCH_tasks_G[i - 1].Delay;
 8001ff2:	7dfb      	ldrb	r3, [r7, #23]
 8001ff4:	1e59      	subs	r1, r3, #1
 8001ff6:	7dfa      	ldrb	r2, [r7, #23]
 8001ff8:	4877      	ldr	r0, [pc, #476]	; (80021d8 <SCH_Add_Task+0x2a8>)
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	440b      	add	r3, r1
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4403      	add	r3, r0
 8002004:	3304      	adds	r3, #4
 8002006:	6819      	ldr	r1, [r3, #0]
 8002008:	4873      	ldr	r0, [pc, #460]	; (80021d8 <SCH_Add_Task+0x2a8>)
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4403      	add	r3, r0
 8002014:	3304      	adds	r3, #4
 8002016:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[i].TaskID = SCH_tasks_G[i - 1].TaskID;
 8002018:	7dfb      	ldrb	r3, [r7, #23]
 800201a:	1e59      	subs	r1, r3, #1
 800201c:	7dfa      	ldrb	r2, [r7, #23]
 800201e:	486e      	ldr	r0, [pc, #440]	; (80021d8 <SCH_Add_Task+0x2a8>)
 8002020:	460b      	mov	r3, r1
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4403      	add	r3, r0
 800202a:	3310      	adds	r3, #16
 800202c:	6819      	ldr	r1, [r3, #0]
 800202e:	486a      	ldr	r0, [pc, #424]	; (80021d8 <SCH_Add_Task+0x2a8>)
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4403      	add	r3, r0
 800203a:	3310      	adds	r3, #16
 800203c:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 800203e:	7dfb      	ldrb	r3, [r7, #23]
 8002040:	3b01      	subs	r3, #1
 8002042:	75fb      	strb	r3, [r7, #23]
 8002044:	7dfa      	ldrb	r2, [r7, #23]
 8002046:	7ffb      	ldrb	r3, [r7, #31]
 8002048:	429a      	cmp	r2, r3
 800204a:	d8ae      	bhi.n	8001faa <SCH_Add_Task+0x7a>
			}
			SCH_tasks_G[newTaskIndex].pTask = pFunction;
 800204c:	7ffa      	ldrb	r2, [r7, #31]
 800204e:	4962      	ldr	r1, [pc, #392]	; (80021d8 <SCH_Add_Task+0x2a8>)
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	440b      	add	r3, r1
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Delay = newDelay;
 800205e:	7ffa      	ldrb	r2, [r7, #31]
 8002060:	495d      	ldr	r1, [pc, #372]	; (80021d8 <SCH_Add_Task+0x2a8>)
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	440b      	add	r3, r1
 800206c:	3304      	adds	r3, #4
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Period = PERIOD;
 8002072:	7ffa      	ldrb	r2, [r7, #31]
 8002074:	4958      	ldr	r1, [pc, #352]	; (80021d8 <SCH_Add_Task+0x2a8>)
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	440b      	add	r3, r1
 8002080:	3308      	adds	r3, #8
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	601a      	str	r2, [r3, #0]
			if (SCH_tasks_G[newTaskIndex].Delay == 0) {
 8002086:	7ffa      	ldrb	r2, [r7, #31]
 8002088:	4953      	ldr	r1, [pc, #332]	; (80021d8 <SCH_Add_Task+0x2a8>)
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	3304      	adds	r3, #4
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10a      	bne.n	80020b2 <SCH_Add_Task+0x182>
				SCH_tasks_G[newTaskIndex].RunMe = 1;
 800209c:	7ffa      	ldrb	r2, [r7, #31]
 800209e:	494e      	ldr	r1, [pc, #312]	; (80021d8 <SCH_Add_Task+0x2a8>)
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	330c      	adds	r3, #12
 80020ac:	2201      	movs	r2, #1
 80020ae:	701a      	strb	r2, [r3, #0]
 80020b0:	e009      	b.n	80020c6 <SCH_Add_Task+0x196>
			} else {
				SCH_tasks_G[newTaskIndex].RunMe = 0;
 80020b2:	7ffa      	ldrb	r2, [r7, #31]
 80020b4:	4948      	ldr	r1, [pc, #288]	; (80021d8 <SCH_Add_Task+0x2a8>)
 80020b6:	4613      	mov	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	440b      	add	r3, r1
 80020c0:	330c      	adds	r3, #12
 80020c2:	2200      	movs	r2, #0
 80020c4:	701a      	strb	r2, [r3, #0]
			}
			SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 80020c6:	7ffc      	ldrb	r4, [r7, #31]
 80020c8:	f000 f9a8 	bl	800241c <Get_New_Task_ID>
 80020cc:	4602      	mov	r2, r0
 80020ce:	4942      	ldr	r1, [pc, #264]	; (80021d8 <SCH_Add_Task+0x2a8>)
 80020d0:	4623      	mov	r3, r4
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4423      	add	r3, r4
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	3310      	adds	r3, #16
 80020dc:	601a      	str	r2, [r3, #0]
			return SCH_tasks_G[newTaskIndex].TaskID;
 80020de:	7ffa      	ldrb	r2, [r7, #31]
 80020e0:	493d      	ldr	r1, [pc, #244]	; (80021d8 <SCH_Add_Task+0x2a8>)
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	3310      	adds	r3, #16
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	e06e      	b.n	80021d0 <SCH_Add_Task+0x2a0>
		} else {
			if(SCH_tasks_G[newTaskIndex].pTask == 0x0000){
 80020f2:	7ffa      	ldrb	r2, [r7, #31]
 80020f4:	4938      	ldr	r1, [pc, #224]	; (80021d8 <SCH_Add_Task+0x2a8>)
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d154      	bne.n	80021b0 <SCH_Add_Task+0x280>
				SCH_tasks_G[newTaskIndex].pTask = pFunction;
 8002106:	7ffa      	ldrb	r2, [r7, #31]
 8002108:	4933      	ldr	r1, [pc, #204]	; (80021d8 <SCH_Add_Task+0x2a8>)
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[newTaskIndex].Delay = DELAY - sumDelay;
 8002118:	7ffa      	ldrb	r2, [r7, #31]
 800211a:	68b9      	ldr	r1, [r7, #8]
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	1ac9      	subs	r1, r1, r3
 8002120:	482d      	ldr	r0, [pc, #180]	; (80021d8 <SCH_Add_Task+0x2a8>)
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4403      	add	r3, r0
 800212c:	3304      	adds	r3, #4
 800212e:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[newTaskIndex].Period = PERIOD;
 8002130:	7ffa      	ldrb	r2, [r7, #31]
 8002132:	4929      	ldr	r1, [pc, #164]	; (80021d8 <SCH_Add_Task+0x2a8>)
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	3308      	adds	r3, #8
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	601a      	str	r2, [r3, #0]
				if(SCH_tasks_G[newTaskIndex].Delay == 0){
 8002144:	7ffa      	ldrb	r2, [r7, #31]
 8002146:	4924      	ldr	r1, [pc, #144]	; (80021d8 <SCH_Add_Task+0x2a8>)
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	3304      	adds	r3, #4
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10a      	bne.n	8002170 <SCH_Add_Task+0x240>
					SCH_tasks_G[newTaskIndex].RunMe = 1;
 800215a:	7ffa      	ldrb	r2, [r7, #31]
 800215c:	491e      	ldr	r1, [pc, #120]	; (80021d8 <SCH_Add_Task+0x2a8>)
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	440b      	add	r3, r1
 8002168:	330c      	adds	r3, #12
 800216a:	2201      	movs	r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
 800216e:	e009      	b.n	8002184 <SCH_Add_Task+0x254>
				} else {
					SCH_tasks_G[newTaskIndex].RunMe = 0;
 8002170:	7ffa      	ldrb	r2, [r7, #31]
 8002172:	4919      	ldr	r1, [pc, #100]	; (80021d8 <SCH_Add_Task+0x2a8>)
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	330c      	adds	r3, #12
 8002180:	2200      	movs	r2, #0
 8002182:	701a      	strb	r2, [r3, #0]
				}
				SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 8002184:	7ffc      	ldrb	r4, [r7, #31]
 8002186:	f000 f949 	bl	800241c <Get_New_Task_ID>
 800218a:	4602      	mov	r2, r0
 800218c:	4912      	ldr	r1, [pc, #72]	; (80021d8 <SCH_Add_Task+0x2a8>)
 800218e:	4623      	mov	r3, r4
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4423      	add	r3, r4
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	440b      	add	r3, r1
 8002198:	3310      	adds	r3, #16
 800219a:	601a      	str	r2, [r3, #0]
				return SCH_tasks_G[newTaskIndex].TaskID;
 800219c:	7ffa      	ldrb	r2, [r7, #31]
 800219e:	490e      	ldr	r1, [pc, #56]	; (80021d8 <SCH_Add_Task+0x2a8>)
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	3310      	adds	r3, #16
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	e00f      	b.n	80021d0 <SCH_Add_Task+0x2a0>
	for (newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex++) {
 80021b0:	7ffb      	ldrb	r3, [r7, #31]
 80021b2:	3301      	adds	r3, #1
 80021b4:	77fb      	strb	r3, [r7, #31]
 80021b6:	7ffb      	ldrb	r3, [r7, #31]
 80021b8:	2b09      	cmp	r3, #9
 80021ba:	f67f aec8 	bls.w	8001f4e <SCH_Add_Task+0x1e>
			}
		}
	}
	return SCH_tasks_G[newTaskIndex].TaskID;
 80021be:	7ffa      	ldrb	r2, [r7, #31]
 80021c0:	4905      	ldr	r1, [pc, #20]	; (80021d8 <SCH_Add_Task+0x2a8>)
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	440b      	add	r3, r1
 80021cc:	3310      	adds	r3, #16
 80021ce:	681b      	ldr	r3, [r3, #0]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3724      	adds	r7, #36	; 0x24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd90      	pop	{r4, r7, pc}
 80021d8:	2000026c 	.word	0x2000026c

080021dc <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(uint32_t taskID){
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
	uint8_t Return_code  = 0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	737b      	strb	r3, [r7, #13]
	uint8_t taskIndex;
	uint8_t j;
	if(taskID != NO_TASK_ID){
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 80e2 	beq.w	80023b4 <SCH_Delete_Task+0x1d8>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 80021f0:	2300      	movs	r3, #0
 80021f2:	73fb      	strb	r3, [r7, #15]
 80021f4:	e0da      	b.n	80023ac <SCH_Delete_Task+0x1d0>
			if(SCH_tasks_G[taskIndex].TaskID == taskID){
 80021f6:	7bfa      	ldrb	r2, [r7, #15]
 80021f8:	4971      	ldr	r1, [pc, #452]	; (80023c0 <SCH_Delete_Task+0x1e4>)
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	3310      	adds	r3, #16
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	429a      	cmp	r2, r3
 800220c:	f040 80cb 	bne.w	80023a6 <SCH_Delete_Task+0x1ca>
				Return_code = 1;
 8002210:	2301      	movs	r3, #1
 8002212:	737b      	strb	r3, [r7, #13]
				if(taskIndex != 0 && taskIndex < SCH_MAX_TASKS - 1){
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d02b      	beq.n	8002272 <SCH_Delete_Task+0x96>
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	2b08      	cmp	r3, #8
 800221e:	d828      	bhi.n	8002272 <SCH_Delete_Task+0x96>
					if(SCH_tasks_G[taskIndex+1].pTask != 0x0000){
 8002220:	7bfb      	ldrb	r3, [r7, #15]
 8002222:	1c5a      	adds	r2, r3, #1
 8002224:	4966      	ldr	r1, [pc, #408]	; (80023c0 <SCH_Delete_Task+0x1e4>)
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d01d      	beq.n	8002272 <SCH_Delete_Task+0x96>
						SCH_tasks_G[taskIndex+1].Delay += SCH_tasks_G[taskIndex].Delay;
 8002236:	7bfb      	ldrb	r3, [r7, #15]
 8002238:	1c5a      	adds	r2, r3, #1
 800223a:	4961      	ldr	r1, [pc, #388]	; (80023c0 <SCH_Delete_Task+0x1e4>)
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	3304      	adds	r3, #4
 8002248:	6819      	ldr	r1, [r3, #0]
 800224a:	7bfa      	ldrb	r2, [r7, #15]
 800224c:	485c      	ldr	r0, [pc, #368]	; (80023c0 <SCH_Delete_Task+0x1e4>)
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4403      	add	r3, r0
 8002258:	3304      	adds	r3, #4
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	7bfa      	ldrb	r2, [r7, #15]
 800225e:	3201      	adds	r2, #1
 8002260:	4419      	add	r1, r3
 8002262:	4857      	ldr	r0, [pc, #348]	; (80023c0 <SCH_Delete_Task+0x1e4>)
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4403      	add	r3, r0
 800226e:	3304      	adds	r3, #4
 8002270:	6019      	str	r1, [r3, #0]
					}
				}

				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 8002272:	7bfb      	ldrb	r3, [r7, #15]
 8002274:	73bb      	strb	r3, [r7, #14]
 8002276:	e060      	b.n	800233a <SCH_Delete_Task+0x15e>
					SCH_tasks_G[j].pTask = SCH_tasks_G[j+1].pTask;
 8002278:	7bbb      	ldrb	r3, [r7, #14]
 800227a:	1c59      	adds	r1, r3, #1
 800227c:	7bba      	ldrb	r2, [r7, #14]
 800227e:	4850      	ldr	r0, [pc, #320]	; (80023c0 <SCH_Delete_Task+0x1e4>)
 8002280:	460b      	mov	r3, r1
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4403      	add	r3, r0
 800228a:	6819      	ldr	r1, [r3, #0]
 800228c:	484c      	ldr	r0, [pc, #304]	; (80023c0 <SCH_Delete_Task+0x1e4>)
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4403      	add	r3, r0
 8002298:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Period = SCH_tasks_G[j+1].Period;
 800229a:	7bbb      	ldrb	r3, [r7, #14]
 800229c:	1c59      	adds	r1, r3, #1
 800229e:	7bba      	ldrb	r2, [r7, #14]
 80022a0:	4847      	ldr	r0, [pc, #284]	; (80023c0 <SCH_Delete_Task+0x1e4>)
 80022a2:	460b      	mov	r3, r1
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	440b      	add	r3, r1
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4403      	add	r3, r0
 80022ac:	3308      	adds	r3, #8
 80022ae:	6819      	ldr	r1, [r3, #0]
 80022b0:	4843      	ldr	r0, [pc, #268]	; (80023c0 <SCH_Delete_Task+0x1e4>)
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4403      	add	r3, r0
 80022bc:	3308      	adds	r3, #8
 80022be:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Delay = SCH_tasks_G[j+1].Delay;
 80022c0:	7bbb      	ldrb	r3, [r7, #14]
 80022c2:	1c59      	adds	r1, r3, #1
 80022c4:	7bba      	ldrb	r2, [r7, #14]
 80022c6:	483e      	ldr	r0, [pc, #248]	; (80023c0 <SCH_Delete_Task+0x1e4>)
 80022c8:	460b      	mov	r3, r1
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4403      	add	r3, r0
 80022d2:	3304      	adds	r3, #4
 80022d4:	6819      	ldr	r1, [r3, #0]
 80022d6:	483a      	ldr	r0, [pc, #232]	; (80023c0 <SCH_Delete_Task+0x1e4>)
 80022d8:	4613      	mov	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4403      	add	r3, r0
 80022e2:	3304      	adds	r3, #4
 80022e4:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].RunMe = SCH_tasks_G[j+1].RunMe;
 80022e6:	7bbb      	ldrb	r3, [r7, #14]
 80022e8:	1c59      	adds	r1, r3, #1
 80022ea:	7bba      	ldrb	r2, [r7, #14]
 80022ec:	4834      	ldr	r0, [pc, #208]	; (80023c0 <SCH_Delete_Task+0x1e4>)
 80022ee:	460b      	mov	r3, r1
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4403      	add	r3, r0
 80022f8:	330c      	adds	r3, #12
 80022fa:	7818      	ldrb	r0, [r3, #0]
 80022fc:	4930      	ldr	r1, [pc, #192]	; (80023c0 <SCH_Delete_Task+0x1e4>)
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	330c      	adds	r3, #12
 800230a:	4602      	mov	r2, r0
 800230c:	701a      	strb	r2, [r3, #0]
					SCH_tasks_G[j].TaskID = SCH_tasks_G[j+1].TaskID;
 800230e:	7bbb      	ldrb	r3, [r7, #14]
 8002310:	1c59      	adds	r1, r3, #1
 8002312:	7bba      	ldrb	r2, [r7, #14]
 8002314:	482a      	ldr	r0, [pc, #168]	; (80023c0 <SCH_Delete_Task+0x1e4>)
 8002316:	460b      	mov	r3, r1
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4403      	add	r3, r0
 8002320:	3310      	adds	r3, #16
 8002322:	6819      	ldr	r1, [r3, #0]
 8002324:	4826      	ldr	r0, [pc, #152]	; (80023c0 <SCH_Delete_Task+0x1e4>)
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4403      	add	r3, r0
 8002330:	3310      	adds	r3, #16
 8002332:	6019      	str	r1, [r3, #0]
				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 8002334:	7bbb      	ldrb	r3, [r7, #14]
 8002336:	3301      	adds	r3, #1
 8002338:	73bb      	strb	r3, [r7, #14]
 800233a:	7bbb      	ldrb	r3, [r7, #14]
 800233c:	2b08      	cmp	r3, #8
 800233e:	d99b      	bls.n	8002278 <SCH_Delete_Task+0x9c>
				}
				SCH_tasks_G[j].pTask = 0;
 8002340:	7bba      	ldrb	r2, [r7, #14]
 8002342:	491f      	ldr	r1, [pc, #124]	; (80023c0 <SCH_Delete_Task+0x1e4>)
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Period = 0;
 8002352:	7bba      	ldrb	r2, [r7, #14]
 8002354:	491a      	ldr	r1, [pc, #104]	; (80023c0 <SCH_Delete_Task+0x1e4>)
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	440b      	add	r3, r1
 8002360:	3308      	adds	r3, #8
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Delay = 0;
 8002366:	7bba      	ldrb	r2, [r7, #14]
 8002368:	4915      	ldr	r1, [pc, #84]	; (80023c0 <SCH_Delete_Task+0x1e4>)
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	3304      	adds	r3, #4
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].RunMe = 0;
 800237a:	7bba      	ldrb	r2, [r7, #14]
 800237c:	4910      	ldr	r1, [pc, #64]	; (80023c0 <SCH_Delete_Task+0x1e4>)
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	440b      	add	r3, r1
 8002388:	330c      	adds	r3, #12
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
				SCH_tasks_G[j].TaskID = 0;
 800238e:	7bba      	ldrb	r2, [r7, #14]
 8002390:	490b      	ldr	r1, [pc, #44]	; (80023c0 <SCH_Delete_Task+0x1e4>)
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	3310      	adds	r3, #16
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
				return Return_code;
 80023a2:	7b7b      	ldrb	r3, [r7, #13]
 80023a4:	e007      	b.n	80023b6 <SCH_Delete_Task+0x1da>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
 80023a8:	3301      	adds	r3, #1
 80023aa:	73fb      	strb	r3, [r7, #15]
 80023ac:	7bfb      	ldrb	r3, [r7, #15]
 80023ae:	2b09      	cmp	r3, #9
 80023b0:	f67f af21 	bls.w	80021f6 <SCH_Delete_Task+0x1a>
			}
		}
	}
	return Return_code;
 80023b4:	7b7b      	ldrb	r3, [r7, #13]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr
 80023c0:	2000026c 	.word	0x2000026c

080023c4 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 80023c4:	b5b0      	push	{r4, r5, r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[0].RunMe > 0) {
 80023ca:	4b13      	ldr	r3, [pc, #76]	; (8002418 <SCH_Dispatch_Tasks+0x54>)
 80023cc:	7b1b      	ldrb	r3, [r3, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d019      	beq.n	8002406 <SCH_Dispatch_Tasks+0x42>
		(*SCH_tasks_G[0].pTask)();
 80023d2:	4b11      	ldr	r3, [pc, #68]	; (8002418 <SCH_Dispatch_Tasks+0x54>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4798      	blx	r3
		SCH_tasks_G[0].RunMe = 0;
 80023d8:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <SCH_Dispatch_Tasks+0x54>)
 80023da:	2200      	movs	r2, #0
 80023dc:	731a      	strb	r2, [r3, #12]
		sTask temtask = SCH_tasks_G[0];
 80023de:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <SCH_Dispatch_Tasks+0x54>)
 80023e0:	1d3c      	adds	r4, r7, #4
 80023e2:	461d      	mov	r5, r3
 80023e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023e8:	682b      	ldr	r3, [r5, #0]
 80023ea:	6023      	str	r3, [r4, #0]
		SCH_Delete_Task(temtask.TaskID);
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff fef4 	bl	80021dc <SCH_Delete_Task>
		if (temtask.Period != 0) {
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d005      	beq.n	8002406 <SCH_Dispatch_Tasks+0x42>
			SCH_Add_Task(temtask.pTask, temtask.Period, temtask.Period);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68f9      	ldr	r1, [r7, #12]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fd95 	bl	8001f30 <SCH_Add_Task>
		}
	}
	// Enter low-power mode (Sleep mode). The MCU will wake up on the next interrupt
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8002406:	2101      	movs	r1, #1
 8002408:	2000      	movs	r0, #0
 800240a:	f000 fd35 	bl	8002e78 <HAL_PWR_EnterSLEEPMode>
}
 800240e:	bf00      	nop
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bdb0      	pop	{r4, r5, r7, pc}
 8002416:	bf00      	nop
 8002418:	2000026c 	.word	0x2000026c

0800241c <Get_New_Task_ID>:

static uint32_t Get_New_Task_ID(void){
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
	newTaskID++;
 8002420:	4b09      	ldr	r3, [pc, #36]	; (8002448 <Get_New_Task_ID+0x2c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	3301      	adds	r3, #1
 8002426:	4a08      	ldr	r2, [pc, #32]	; (8002448 <Get_New_Task_ID+0x2c>)
 8002428:	6013      	str	r3, [r2, #0]
	if(newTaskID == NO_TASK_ID){
 800242a:	4b07      	ldr	r3, [pc, #28]	; (8002448 <Get_New_Task_ID+0x2c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d104      	bne.n	800243c <Get_New_Task_ID+0x20>
		newTaskID++;
 8002432:	4b05      	ldr	r3, [pc, #20]	; (8002448 <Get_New_Task_ID+0x2c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	3301      	adds	r3, #1
 8002438:	4a03      	ldr	r2, [pc, #12]	; (8002448 <Get_New_Task_ID+0x2c>)
 800243a:	6013      	str	r3, [r2, #0]
	}
	return newTaskID;
 800243c:	4b02      	ldr	r3, [pc, #8]	; (8002448 <Get_New_Task_ID+0x2c>)
 800243e:	681b      	ldr	r3, [r3, #0]
}
 8002440:	4618      	mov	r0, r3
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr
 8002448:	20000334 	.word	0x20000334

0800244c <setTimer>:
#include "software_timer.h"

int timer_counter[MAX_TIMERS] = {0};
int timer_flag[MAX_TIMERS] = {0};

void setTimer(int duration, int id){
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
	timer_counter[id] = duration/TICK;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a09      	ldr	r2, [pc, #36]	; (8002480 <setTimer+0x34>)
 800245a:	fb82 1203 	smull	r1, r2, r2, r3
 800245e:	1092      	asrs	r2, r2, #2
 8002460:	17db      	asrs	r3, r3, #31
 8002462:	1ad2      	subs	r2, r2, r3
 8002464:	4907      	ldr	r1, [pc, #28]	; (8002484 <setTimer+0x38>)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[id] = 0;
 800246c:	4a06      	ldr	r2, [pc, #24]	; (8002488 <setTimer+0x3c>)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	2100      	movs	r1, #0
 8002472:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr
 8002480:	66666667 	.word	0x66666667
 8002484:	2000033c 	.word	0x2000033c
 8002488:	2000035c 	.word	0x2000035c

0800248c <timerRun>:
void timerRun(){
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_TIMERS; i++){
 8002492:	2300      	movs	r3, #0
 8002494:	607b      	str	r3, [r7, #4]
 8002496:	e022      	b.n	80024de <timerRun+0x52>
		if(timer_counter[i] > 0 && timer_flag[i] == 0){
 8002498:	4a15      	ldr	r2, [pc, #84]	; (80024f0 <timerRun+0x64>)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	dd19      	ble.n	80024d8 <timerRun+0x4c>
 80024a4:	4a13      	ldr	r2, [pc, #76]	; (80024f4 <timerRun+0x68>)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d113      	bne.n	80024d8 <timerRun+0x4c>
			timer_counter[i]--;
 80024b0:	4a0f      	ldr	r2, [pc, #60]	; (80024f0 <timerRun+0x64>)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b8:	1e5a      	subs	r2, r3, #1
 80024ba:	490d      	ldr	r1, [pc, #52]	; (80024f0 <timerRun+0x64>)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0){
 80024c2:	4a0b      	ldr	r2, [pc, #44]	; (80024f0 <timerRun+0x64>)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	dc04      	bgt.n	80024d8 <timerRun+0x4c>
				timer_flag[i] = 1;
 80024ce:	4a09      	ldr	r2, [pc, #36]	; (80024f4 <timerRun+0x68>)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2101      	movs	r1, #1
 80024d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < MAX_TIMERS; i++){
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3301      	adds	r3, #1
 80024dc:	607b      	str	r3, [r7, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b07      	cmp	r3, #7
 80024e2:	ddd9      	ble.n	8002498 <timerRun+0xc>
			}
		}
	}
}
 80024e4:	bf00      	nop
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr
 80024f0:	2000033c 	.word	0x2000033c
 80024f4:	2000035c 	.word	0x2000035c

080024f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80024fe:	4b15      	ldr	r3, [pc, #84]	; (8002554 <HAL_MspInit+0x5c>)
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	4a14      	ldr	r2, [pc, #80]	; (8002554 <HAL_MspInit+0x5c>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	6193      	str	r3, [r2, #24]
 800250a:	4b12      	ldr	r3, [pc, #72]	; (8002554 <HAL_MspInit+0x5c>)
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	60bb      	str	r3, [r7, #8]
 8002514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002516:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <HAL_MspInit+0x5c>)
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	4a0e      	ldr	r2, [pc, #56]	; (8002554 <HAL_MspInit+0x5c>)
 800251c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002520:	61d3      	str	r3, [r2, #28]
 8002522:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <HAL_MspInit+0x5c>)
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252a:	607b      	str	r3, [r7, #4]
 800252c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800252e:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <HAL_MspInit+0x60>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	4a04      	ldr	r2, [pc, #16]	; (8002558 <HAL_MspInit+0x60>)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800254a:	bf00      	nop
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr
 8002554:	40021000 	.word	0x40021000
 8002558:	40010000 	.word	0x40010000

0800255c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800256c:	d113      	bne.n	8002596 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800256e:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <HAL_TIM_Base_MspInit+0x44>)
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	4a0b      	ldr	r2, [pc, #44]	; (80025a0 <HAL_TIM_Base_MspInit+0x44>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	61d3      	str	r3, [r2, #28]
 800257a:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <HAL_TIM_Base_MspInit+0x44>)
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002586:	2200      	movs	r2, #0
 8002588:	2100      	movs	r1, #0
 800258a:	201c      	movs	r0, #28
 800258c:	f000 fa71 	bl	8002a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002590:	201c      	movs	r0, #28
 8002592:	f000 fa8a 	bl	8002aaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002596:	bf00      	nop
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40021000 	.word	0x40021000

080025a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a09      	ldr	r2, [pc, #36]	; (80025d8 <HAL_TIM_PWM_MspInit+0x34>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d10b      	bne.n	80025ce <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025b6:	4b09      	ldr	r3, [pc, #36]	; (80025dc <HAL_TIM_PWM_MspInit+0x38>)
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	4a08      	ldr	r2, [pc, #32]	; (80025dc <HAL_TIM_PWM_MspInit+0x38>)
 80025bc:	f043 0302 	orr.w	r3, r3, #2
 80025c0:	61d3      	str	r3, [r2, #28]
 80025c2:	4b06      	ldr	r3, [pc, #24]	; (80025dc <HAL_TIM_PWM_MspInit+0x38>)
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80025ce:	bf00      	nop
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr
 80025d8:	40000400 	.word	0x40000400
 80025dc:	40021000 	.word	0x40021000

080025e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b088      	sub	sp, #32
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e8:	f107 0310 	add.w	r3, r7, #16
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a0f      	ldr	r2, [pc, #60]	; (8002638 <HAL_TIM_MspPostInit+0x58>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d117      	bne.n	8002630 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002600:	4b0e      	ldr	r3, [pc, #56]	; (800263c <HAL_TIM_MspPostInit+0x5c>)
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	4a0d      	ldr	r2, [pc, #52]	; (800263c <HAL_TIM_MspPostInit+0x5c>)
 8002606:	f043 0304 	orr.w	r3, r3, #4
 800260a:	6193      	str	r3, [r2, #24]
 800260c:	4b0b      	ldr	r3, [pc, #44]	; (800263c <HAL_TIM_MspPostInit+0x5c>)
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PD_BUZZER_Pin;
 8002618:	2340      	movs	r3, #64	; 0x40
 800261a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261c:	2302      	movs	r3, #2
 800261e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002620:	2302      	movs	r3, #2
 8002622:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PD_BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002624:	f107 0310 	add.w	r3, r7, #16
 8002628:	4619      	mov	r1, r3
 800262a:	4805      	ldr	r0, [pc, #20]	; (8002640 <HAL_TIM_MspPostInit+0x60>)
 800262c:	f000 fa58 	bl	8002ae0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002630:	bf00      	nop
 8002632:	3720      	adds	r7, #32
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40000400 	.word	0x40000400
 800263c:	40021000 	.word	0x40021000
 8002640:	40010800 	.word	0x40010800

08002644 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	f107 0310 	add.w	r3, r7, #16
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a1b      	ldr	r2, [pc, #108]	; (80026cc <HAL_UART_MspInit+0x88>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d12f      	bne.n	80026c4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002664:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <HAL_UART_MspInit+0x8c>)
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	4a19      	ldr	r2, [pc, #100]	; (80026d0 <HAL_UART_MspInit+0x8c>)
 800266a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800266e:	61d3      	str	r3, [r2, #28]
 8002670:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <HAL_UART_MspInit+0x8c>)
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800267c:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <HAL_UART_MspInit+0x8c>)
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	4a13      	ldr	r2, [pc, #76]	; (80026d0 <HAL_UART_MspInit+0x8c>)
 8002682:	f043 0304 	orr.w	r3, r3, #4
 8002686:	6193      	str	r3, [r2, #24]
 8002688:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <HAL_UART_MspInit+0x8c>)
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002694:	2304      	movs	r3, #4
 8002696:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002698:	2302      	movs	r3, #2
 800269a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800269c:	2303      	movs	r3, #3
 800269e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a0:	f107 0310 	add.w	r3, r7, #16
 80026a4:	4619      	mov	r1, r3
 80026a6:	480b      	ldr	r0, [pc, #44]	; (80026d4 <HAL_UART_MspInit+0x90>)
 80026a8:	f000 fa1a 	bl	8002ae0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026ac:	2308      	movs	r3, #8
 80026ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026b0:	2300      	movs	r3, #0
 80026b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b8:	f107 0310 	add.w	r3, r7, #16
 80026bc:	4619      	mov	r1, r3
 80026be:	4805      	ldr	r0, [pc, #20]	; (80026d4 <HAL_UART_MspInit+0x90>)
 80026c0:	f000 fa0e 	bl	8002ae0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026c4:	bf00      	nop
 80026c6:	3720      	adds	r7, #32
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40004400 	.word	0x40004400
 80026d0:	40021000 	.word	0x40021000
 80026d4:	40010800 	.word	0x40010800

080026d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026dc:	e7fe      	b.n	80026dc <NMI_Handler+0x4>

080026de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026de:	b480      	push	{r7}
 80026e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026e2:	e7fe      	b.n	80026e2 <HardFault_Handler+0x4>

080026e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026e8:	e7fe      	b.n	80026e8 <MemManage_Handler+0x4>

080026ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026ea:	b480      	push	{r7}
 80026ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ee:	e7fe      	b.n	80026ee <BusFault_Handler+0x4>

080026f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026f4:	e7fe      	b.n	80026f4 <UsageFault_Handler+0x4>

080026f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026f6:	b480      	push	{r7}
 80026f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr

08002702 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002702:	b480      	push	{r7}
 8002704:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002706:	bf00      	nop
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr

0800270e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr

0800271a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800271e:	f000 f8b5 	bl	800288c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800272c:	4802      	ldr	r0, [pc, #8]	; (8002738 <TIM2_IRQHandler+0x10>)
 800272e:	f001 f963 	bl	80039f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002732:	bf00      	nop
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20000194 	.word	0x20000194

0800273c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002744:	4a14      	ldr	r2, [pc, #80]	; (8002798 <_sbrk+0x5c>)
 8002746:	4b15      	ldr	r3, [pc, #84]	; (800279c <_sbrk+0x60>)
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002750:	4b13      	ldr	r3, [pc, #76]	; (80027a0 <_sbrk+0x64>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d102      	bne.n	800275e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002758:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <_sbrk+0x64>)
 800275a:	4a12      	ldr	r2, [pc, #72]	; (80027a4 <_sbrk+0x68>)
 800275c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800275e:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <_sbrk+0x64>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4413      	add	r3, r2
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	429a      	cmp	r2, r3
 800276a:	d207      	bcs.n	800277c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800276c:	f002 f906 	bl	800497c <__errno>
 8002770:	4603      	mov	r3, r0
 8002772:	220c      	movs	r2, #12
 8002774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002776:	f04f 33ff 	mov.w	r3, #4294967295
 800277a:	e009      	b.n	8002790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800277c:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <_sbrk+0x64>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002782:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <_sbrk+0x64>)
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4413      	add	r3, r2
 800278a:	4a05      	ldr	r2, [pc, #20]	; (80027a0 <_sbrk+0x64>)
 800278c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800278e:	68fb      	ldr	r3, [r7, #12]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	20005000 	.word	0x20005000
 800279c:	00000400 	.word	0x00000400
 80027a0:	2000037c 	.word	0x2000037c
 80027a4:	200004d0 	.word	0x200004d0

080027a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027b4:	f7ff fff8 	bl	80027a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027b8:	480b      	ldr	r0, [pc, #44]	; (80027e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80027ba:	490c      	ldr	r1, [pc, #48]	; (80027ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80027bc:	4a0c      	ldr	r2, [pc, #48]	; (80027f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80027be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027c0:	e002      	b.n	80027c8 <LoopCopyDataInit>

080027c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027c6:	3304      	adds	r3, #4

080027c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027cc:	d3f9      	bcc.n	80027c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ce:	4a09      	ldr	r2, [pc, #36]	; (80027f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80027d0:	4c09      	ldr	r4, [pc, #36]	; (80027f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027d4:	e001      	b.n	80027da <LoopFillZerobss>

080027d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027d8:	3204      	adds	r2, #4

080027da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027dc:	d3fb      	bcc.n	80027d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027de:	f002 f8d3 	bl	8004988 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027e2:	f7ff f99d 	bl	8001b20 <main>
  bx lr
 80027e6:	4770      	bx	lr
  ldr r0, =_sdata
 80027e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027ec:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80027f0:	08005560 	.word	0x08005560
  ldr r2, =_sbss
 80027f4:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80027f8:	200004cc 	.word	0x200004cc

080027fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027fc:	e7fe      	b.n	80027fc <ADC1_2_IRQHandler>
	...

08002800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002804:	4b08      	ldr	r3, [pc, #32]	; (8002828 <HAL_Init+0x28>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a07      	ldr	r2, [pc, #28]	; (8002828 <HAL_Init+0x28>)
 800280a:	f043 0310 	orr.w	r3, r3, #16
 800280e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002810:	2003      	movs	r0, #3
 8002812:	f000 f923 	bl	8002a5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002816:	200f      	movs	r0, #15
 8002818:	f000 f808 	bl	800282c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800281c:	f7ff fe6c 	bl	80024f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40022000 	.word	0x40022000

0800282c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002834:	4b12      	ldr	r3, [pc, #72]	; (8002880 <HAL_InitTick+0x54>)
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	4b12      	ldr	r3, [pc, #72]	; (8002884 <HAL_InitTick+0x58>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	4619      	mov	r1, r3
 800283e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002842:	fbb3 f3f1 	udiv	r3, r3, r1
 8002846:	fbb2 f3f3 	udiv	r3, r2, r3
 800284a:	4618      	mov	r0, r3
 800284c:	f000 f93b 	bl	8002ac6 <HAL_SYSTICK_Config>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e00e      	b.n	8002878 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b0f      	cmp	r3, #15
 800285e:	d80a      	bhi.n	8002876 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002860:	2200      	movs	r2, #0
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	f04f 30ff 	mov.w	r0, #4294967295
 8002868:	f000 f903 	bl	8002a72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800286c:	4a06      	ldr	r2, [pc, #24]	; (8002888 <HAL_InitTick+0x5c>)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	e000      	b.n	8002878 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
}
 8002878:	4618      	mov	r0, r3
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	200000a0 	.word	0x200000a0
 8002884:	200000a8 	.word	0x200000a8
 8002888:	200000a4 	.word	0x200000a4

0800288c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002890:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <HAL_IncTick+0x1c>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	461a      	mov	r2, r3
 8002896:	4b05      	ldr	r3, [pc, #20]	; (80028ac <HAL_IncTick+0x20>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4413      	add	r3, r2
 800289c:	4a03      	ldr	r2, [pc, #12]	; (80028ac <HAL_IncTick+0x20>)
 800289e:	6013      	str	r3, [r2, #0]
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr
 80028a8:	200000a8 	.word	0x200000a8
 80028ac:	20000380 	.word	0x20000380

080028b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  return uwTick;
 80028b4:	4b02      	ldr	r3, [pc, #8]	; (80028c0 <HAL_GetTick+0x10>)
 80028b6:	681b      	ldr	r3, [r3, #0]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr
 80028c0:	20000380 	.word	0x20000380

080028c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028d4:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <__NVIC_SetPriorityGrouping+0x44>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028e0:	4013      	ands	r3, r2
 80028e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028f6:	4a04      	ldr	r2, [pc, #16]	; (8002908 <__NVIC_SetPriorityGrouping+0x44>)
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	60d3      	str	r3, [r2, #12]
}
 80028fc:	bf00      	nop
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002910:	4b04      	ldr	r3, [pc, #16]	; (8002924 <__NVIC_GetPriorityGrouping+0x18>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	0a1b      	lsrs	r3, r3, #8
 8002916:	f003 0307 	and.w	r3, r3, #7
}
 800291a:	4618      	mov	r0, r3
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002936:	2b00      	cmp	r3, #0
 8002938:	db0b      	blt.n	8002952 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	f003 021f 	and.w	r2, r3, #31
 8002940:	4906      	ldr	r1, [pc, #24]	; (800295c <__NVIC_EnableIRQ+0x34>)
 8002942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002946:	095b      	lsrs	r3, r3, #5
 8002948:	2001      	movs	r0, #1
 800294a:	fa00 f202 	lsl.w	r2, r0, r2
 800294e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr
 800295c:	e000e100 	.word	0xe000e100

08002960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	6039      	str	r1, [r7, #0]
 800296a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800296c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002970:	2b00      	cmp	r3, #0
 8002972:	db0a      	blt.n	800298a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	b2da      	uxtb	r2, r3
 8002978:	490c      	ldr	r1, [pc, #48]	; (80029ac <__NVIC_SetPriority+0x4c>)
 800297a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297e:	0112      	lsls	r2, r2, #4
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	440b      	add	r3, r1
 8002984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002988:	e00a      	b.n	80029a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	b2da      	uxtb	r2, r3
 800298e:	4908      	ldr	r1, [pc, #32]	; (80029b0 <__NVIC_SetPriority+0x50>)
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	3b04      	subs	r3, #4
 8002998:	0112      	lsls	r2, r2, #4
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	440b      	add	r3, r1
 800299e:	761a      	strb	r2, [r3, #24]
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	e000e100 	.word	0xe000e100
 80029b0:	e000ed00 	.word	0xe000ed00

080029b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b089      	sub	sp, #36	; 0x24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f1c3 0307 	rsb	r3, r3, #7
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	bf28      	it	cs
 80029d2:	2304      	movcs	r3, #4
 80029d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	3304      	adds	r3, #4
 80029da:	2b06      	cmp	r3, #6
 80029dc:	d902      	bls.n	80029e4 <NVIC_EncodePriority+0x30>
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	3b03      	subs	r3, #3
 80029e2:	e000      	b.n	80029e6 <NVIC_EncodePriority+0x32>
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e8:	f04f 32ff 	mov.w	r2, #4294967295
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43da      	mvns	r2, r3
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	401a      	ands	r2, r3
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	fa01 f303 	lsl.w	r3, r1, r3
 8002a06:	43d9      	mvns	r1, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a0c:	4313      	orrs	r3, r2
         );
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3724      	adds	r7, #36	; 0x24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr

08002a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a28:	d301      	bcc.n	8002a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e00f      	b.n	8002a4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a2e:	4a0a      	ldr	r2, [pc, #40]	; (8002a58 <SysTick_Config+0x40>)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a36:	210f      	movs	r1, #15
 8002a38:	f04f 30ff 	mov.w	r0, #4294967295
 8002a3c:	f7ff ff90 	bl	8002960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <SysTick_Config+0x40>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a46:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <SysTick_Config+0x40>)
 8002a48:	2207      	movs	r2, #7
 8002a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	e000e010 	.word	0xe000e010

08002a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7ff ff2d 	bl	80028c4 <__NVIC_SetPriorityGrouping>
}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b086      	sub	sp, #24
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	4603      	mov	r3, r0
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607a      	str	r2, [r7, #4]
 8002a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a84:	f7ff ff42 	bl	800290c <__NVIC_GetPriorityGrouping>
 8002a88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	68b9      	ldr	r1, [r7, #8]
 8002a8e:	6978      	ldr	r0, [r7, #20]
 8002a90:	f7ff ff90 	bl	80029b4 <NVIC_EncodePriority>
 8002a94:	4602      	mov	r2, r0
 8002a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff ff5f 	bl	8002960 <__NVIC_SetPriority>
}
 8002aa2:	bf00      	nop
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff ff35 	bl	8002928 <__NVIC_EnableIRQ>
}
 8002abe:	bf00      	nop
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7ff ffa2 	bl	8002a18 <SysTick_Config>
 8002ad4:	4603      	mov	r3, r0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b08b      	sub	sp, #44	; 0x2c
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aea:	2300      	movs	r3, #0
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002aee:	2300      	movs	r3, #0
 8002af0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002af2:	e169      	b.n	8002dc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002af4:	2201      	movs	r2, #1
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	69fa      	ldr	r2, [r7, #28]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	f040 8158 	bne.w	8002dc2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	4a9a      	ldr	r2, [pc, #616]	; (8002d80 <HAL_GPIO_Init+0x2a0>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d05e      	beq.n	8002bda <HAL_GPIO_Init+0xfa>
 8002b1c:	4a98      	ldr	r2, [pc, #608]	; (8002d80 <HAL_GPIO_Init+0x2a0>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d875      	bhi.n	8002c0e <HAL_GPIO_Init+0x12e>
 8002b22:	4a98      	ldr	r2, [pc, #608]	; (8002d84 <HAL_GPIO_Init+0x2a4>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d058      	beq.n	8002bda <HAL_GPIO_Init+0xfa>
 8002b28:	4a96      	ldr	r2, [pc, #600]	; (8002d84 <HAL_GPIO_Init+0x2a4>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d86f      	bhi.n	8002c0e <HAL_GPIO_Init+0x12e>
 8002b2e:	4a96      	ldr	r2, [pc, #600]	; (8002d88 <HAL_GPIO_Init+0x2a8>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d052      	beq.n	8002bda <HAL_GPIO_Init+0xfa>
 8002b34:	4a94      	ldr	r2, [pc, #592]	; (8002d88 <HAL_GPIO_Init+0x2a8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d869      	bhi.n	8002c0e <HAL_GPIO_Init+0x12e>
 8002b3a:	4a94      	ldr	r2, [pc, #592]	; (8002d8c <HAL_GPIO_Init+0x2ac>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d04c      	beq.n	8002bda <HAL_GPIO_Init+0xfa>
 8002b40:	4a92      	ldr	r2, [pc, #584]	; (8002d8c <HAL_GPIO_Init+0x2ac>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d863      	bhi.n	8002c0e <HAL_GPIO_Init+0x12e>
 8002b46:	4a92      	ldr	r2, [pc, #584]	; (8002d90 <HAL_GPIO_Init+0x2b0>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d046      	beq.n	8002bda <HAL_GPIO_Init+0xfa>
 8002b4c:	4a90      	ldr	r2, [pc, #576]	; (8002d90 <HAL_GPIO_Init+0x2b0>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d85d      	bhi.n	8002c0e <HAL_GPIO_Init+0x12e>
 8002b52:	2b12      	cmp	r3, #18
 8002b54:	d82a      	bhi.n	8002bac <HAL_GPIO_Init+0xcc>
 8002b56:	2b12      	cmp	r3, #18
 8002b58:	d859      	bhi.n	8002c0e <HAL_GPIO_Init+0x12e>
 8002b5a:	a201      	add	r2, pc, #4	; (adr r2, 8002b60 <HAL_GPIO_Init+0x80>)
 8002b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b60:	08002bdb 	.word	0x08002bdb
 8002b64:	08002bb5 	.word	0x08002bb5
 8002b68:	08002bc7 	.word	0x08002bc7
 8002b6c:	08002c09 	.word	0x08002c09
 8002b70:	08002c0f 	.word	0x08002c0f
 8002b74:	08002c0f 	.word	0x08002c0f
 8002b78:	08002c0f 	.word	0x08002c0f
 8002b7c:	08002c0f 	.word	0x08002c0f
 8002b80:	08002c0f 	.word	0x08002c0f
 8002b84:	08002c0f 	.word	0x08002c0f
 8002b88:	08002c0f 	.word	0x08002c0f
 8002b8c:	08002c0f 	.word	0x08002c0f
 8002b90:	08002c0f 	.word	0x08002c0f
 8002b94:	08002c0f 	.word	0x08002c0f
 8002b98:	08002c0f 	.word	0x08002c0f
 8002b9c:	08002c0f 	.word	0x08002c0f
 8002ba0:	08002c0f 	.word	0x08002c0f
 8002ba4:	08002bbd 	.word	0x08002bbd
 8002ba8:	08002bd1 	.word	0x08002bd1
 8002bac:	4a79      	ldr	r2, [pc, #484]	; (8002d94 <HAL_GPIO_Init+0x2b4>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d013      	beq.n	8002bda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002bb2:	e02c      	b.n	8002c0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	623b      	str	r3, [r7, #32]
          break;
 8002bba:	e029      	b.n	8002c10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	623b      	str	r3, [r7, #32]
          break;
 8002bc4:	e024      	b.n	8002c10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	3308      	adds	r3, #8
 8002bcc:	623b      	str	r3, [r7, #32]
          break;
 8002bce:	e01f      	b.n	8002c10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	330c      	adds	r3, #12
 8002bd6:	623b      	str	r3, [r7, #32]
          break;
 8002bd8:	e01a      	b.n	8002c10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d102      	bne.n	8002be8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002be2:	2304      	movs	r3, #4
 8002be4:	623b      	str	r3, [r7, #32]
          break;
 8002be6:	e013      	b.n	8002c10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d105      	bne.n	8002bfc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bf0:	2308      	movs	r3, #8
 8002bf2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69fa      	ldr	r2, [r7, #28]
 8002bf8:	611a      	str	r2, [r3, #16]
          break;
 8002bfa:	e009      	b.n	8002c10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bfc:	2308      	movs	r3, #8
 8002bfe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69fa      	ldr	r2, [r7, #28]
 8002c04:	615a      	str	r2, [r3, #20]
          break;
 8002c06:	e003      	b.n	8002c10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	623b      	str	r3, [r7, #32]
          break;
 8002c0c:	e000      	b.n	8002c10 <HAL_GPIO_Init+0x130>
          break;
 8002c0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	2bff      	cmp	r3, #255	; 0xff
 8002c14:	d801      	bhi.n	8002c1a <HAL_GPIO_Init+0x13a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	e001      	b.n	8002c1e <HAL_GPIO_Init+0x13e>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	2bff      	cmp	r3, #255	; 0xff
 8002c24:	d802      	bhi.n	8002c2c <HAL_GPIO_Init+0x14c>
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	e002      	b.n	8002c32 <HAL_GPIO_Init+0x152>
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	3b08      	subs	r3, #8
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	210f      	movs	r1, #15
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c40:	43db      	mvns	r3, r3
 8002c42:	401a      	ands	r2, r3
 8002c44:	6a39      	ldr	r1, [r7, #32]
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 80b1 	beq.w	8002dc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c60:	4b4d      	ldr	r3, [pc, #308]	; (8002d98 <HAL_GPIO_Init+0x2b8>)
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	4a4c      	ldr	r2, [pc, #304]	; (8002d98 <HAL_GPIO_Init+0x2b8>)
 8002c66:	f043 0301 	orr.w	r3, r3, #1
 8002c6a:	6193      	str	r3, [r2, #24]
 8002c6c:	4b4a      	ldr	r3, [pc, #296]	; (8002d98 <HAL_GPIO_Init+0x2b8>)
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c78:	4a48      	ldr	r2, [pc, #288]	; (8002d9c <HAL_GPIO_Init+0x2bc>)
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	089b      	lsrs	r3, r3, #2
 8002c7e:	3302      	adds	r3, #2
 8002c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	220f      	movs	r2, #15
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a40      	ldr	r2, [pc, #256]	; (8002da0 <HAL_GPIO_Init+0x2c0>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d013      	beq.n	8002ccc <HAL_GPIO_Init+0x1ec>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a3f      	ldr	r2, [pc, #252]	; (8002da4 <HAL_GPIO_Init+0x2c4>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d00d      	beq.n	8002cc8 <HAL_GPIO_Init+0x1e8>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a3e      	ldr	r2, [pc, #248]	; (8002da8 <HAL_GPIO_Init+0x2c8>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d007      	beq.n	8002cc4 <HAL_GPIO_Init+0x1e4>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a3d      	ldr	r2, [pc, #244]	; (8002dac <HAL_GPIO_Init+0x2cc>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d101      	bne.n	8002cc0 <HAL_GPIO_Init+0x1e0>
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e006      	b.n	8002cce <HAL_GPIO_Init+0x1ee>
 8002cc0:	2304      	movs	r3, #4
 8002cc2:	e004      	b.n	8002cce <HAL_GPIO_Init+0x1ee>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	e002      	b.n	8002cce <HAL_GPIO_Init+0x1ee>
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e000      	b.n	8002cce <HAL_GPIO_Init+0x1ee>
 8002ccc:	2300      	movs	r3, #0
 8002cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd0:	f002 0203 	and.w	r2, r2, #3
 8002cd4:	0092      	lsls	r2, r2, #2
 8002cd6:	4093      	lsls	r3, r2
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002cde:	492f      	ldr	r1, [pc, #188]	; (8002d9c <HAL_GPIO_Init+0x2bc>)
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	089b      	lsrs	r3, r3, #2
 8002ce4:	3302      	adds	r3, #2
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d006      	beq.n	8002d06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002cf8:	4b2d      	ldr	r3, [pc, #180]	; (8002db0 <HAL_GPIO_Init+0x2d0>)
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	492c      	ldr	r1, [pc, #176]	; (8002db0 <HAL_GPIO_Init+0x2d0>)
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	608b      	str	r3, [r1, #8]
 8002d04:	e006      	b.n	8002d14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d06:	4b2a      	ldr	r3, [pc, #168]	; (8002db0 <HAL_GPIO_Init+0x2d0>)
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	4928      	ldr	r1, [pc, #160]	; (8002db0 <HAL_GPIO_Init+0x2d0>)
 8002d10:	4013      	ands	r3, r2
 8002d12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d006      	beq.n	8002d2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d20:	4b23      	ldr	r3, [pc, #140]	; (8002db0 <HAL_GPIO_Init+0x2d0>)
 8002d22:	68da      	ldr	r2, [r3, #12]
 8002d24:	4922      	ldr	r1, [pc, #136]	; (8002db0 <HAL_GPIO_Init+0x2d0>)
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	60cb      	str	r3, [r1, #12]
 8002d2c:	e006      	b.n	8002d3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d2e:	4b20      	ldr	r3, [pc, #128]	; (8002db0 <HAL_GPIO_Init+0x2d0>)
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	43db      	mvns	r3, r3
 8002d36:	491e      	ldr	r1, [pc, #120]	; (8002db0 <HAL_GPIO_Init+0x2d0>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d006      	beq.n	8002d56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d48:	4b19      	ldr	r3, [pc, #100]	; (8002db0 <HAL_GPIO_Init+0x2d0>)
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	4918      	ldr	r1, [pc, #96]	; (8002db0 <HAL_GPIO_Init+0x2d0>)
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	604b      	str	r3, [r1, #4]
 8002d54:	e006      	b.n	8002d64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d56:	4b16      	ldr	r3, [pc, #88]	; (8002db0 <HAL_GPIO_Init+0x2d0>)
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	4914      	ldr	r1, [pc, #80]	; (8002db0 <HAL_GPIO_Init+0x2d0>)
 8002d60:	4013      	ands	r3, r2
 8002d62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d021      	beq.n	8002db4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d70:	4b0f      	ldr	r3, [pc, #60]	; (8002db0 <HAL_GPIO_Init+0x2d0>)
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	490e      	ldr	r1, [pc, #56]	; (8002db0 <HAL_GPIO_Init+0x2d0>)
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	600b      	str	r3, [r1, #0]
 8002d7c:	e021      	b.n	8002dc2 <HAL_GPIO_Init+0x2e2>
 8002d7e:	bf00      	nop
 8002d80:	10320000 	.word	0x10320000
 8002d84:	10310000 	.word	0x10310000
 8002d88:	10220000 	.word	0x10220000
 8002d8c:	10210000 	.word	0x10210000
 8002d90:	10120000 	.word	0x10120000
 8002d94:	10110000 	.word	0x10110000
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	40010000 	.word	0x40010000
 8002da0:	40010800 	.word	0x40010800
 8002da4:	40010c00 	.word	0x40010c00
 8002da8:	40011000 	.word	0x40011000
 8002dac:	40011400 	.word	0x40011400
 8002db0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002db4:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <HAL_GPIO_Init+0x304>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	43db      	mvns	r3, r3
 8002dbc:	4909      	ldr	r1, [pc, #36]	; (8002de4 <HAL_GPIO_Init+0x304>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f47f ae8e 	bne.w	8002af4 <HAL_GPIO_Init+0x14>
  }
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	372c      	adds	r7, #44	; 0x2c
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr
 8002de4:	40010400 	.word	0x40010400

08002de8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	887b      	ldrh	r3, [r7, #2]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d002      	beq.n	8002e06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e00:	2301      	movs	r3, #1
 8002e02:	73fb      	strb	r3, [r7, #15]
 8002e04:	e001      	b.n	8002e0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e06:	2300      	movs	r3, #0
 8002e08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr

08002e16 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
 8002e1e:	460b      	mov	r3, r1
 8002e20:	807b      	strh	r3, [r7, #2]
 8002e22:	4613      	mov	r3, r2
 8002e24:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e26:	787b      	ldrb	r3, [r7, #1]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e2c:	887a      	ldrh	r2, [r7, #2]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e32:	e003      	b.n	8002e3c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e34:	887b      	ldrh	r3, [r7, #2]
 8002e36:	041a      	lsls	r2, r3, #16
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	611a      	str	r2, [r3, #16]
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr

08002e46 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b085      	sub	sp, #20
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e58:	887a      	ldrh	r2, [r7, #2]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	041a      	lsls	r2, r3, #16
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	43d9      	mvns	r1, r3
 8002e64:	887b      	ldrh	r3, [r7, #2]
 8002e66:	400b      	ands	r3, r1
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	611a      	str	r2, [r3, #16]
}
 8002e6e:	bf00      	nop
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002e84:	4b09      	ldr	r3, [pc, #36]	; (8002eac <HAL_PWR_EnterSLEEPMode+0x34>)
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	4a08      	ldr	r2, [pc, #32]	; (8002eac <HAL_PWR_EnterSLEEPMode+0x34>)
 8002e8a:	f023 0304 	bic.w	r3, r3, #4
 8002e8e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002e90:	78fb      	ldrb	r3, [r7, #3]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d101      	bne.n	8002e9a <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002e96:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8002e98:	e002      	b.n	8002ea0 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8002e9a:	bf40      	sev
    __WFE();
 8002e9c:	bf20      	wfe
    __WFE();
 8002e9e:	bf20      	wfe
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	e000ed00 	.word	0xe000ed00

08002eb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e272      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 8087 	beq.w	8002fde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ed0:	4b92      	ldr	r3, [pc, #584]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 030c 	and.w	r3, r3, #12
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d00c      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002edc:	4b8f      	ldr	r3, [pc, #572]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f003 030c 	and.w	r3, r3, #12
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d112      	bne.n	8002f0e <HAL_RCC_OscConfig+0x5e>
 8002ee8:	4b8c      	ldr	r3, [pc, #560]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef4:	d10b      	bne.n	8002f0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef6:	4b89      	ldr	r3, [pc, #548]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d06c      	beq.n	8002fdc <HAL_RCC_OscConfig+0x12c>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d168      	bne.n	8002fdc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e24c      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f16:	d106      	bne.n	8002f26 <HAL_RCC_OscConfig+0x76>
 8002f18:	4b80      	ldr	r3, [pc, #512]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a7f      	ldr	r2, [pc, #508]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f22:	6013      	str	r3, [r2, #0]
 8002f24:	e02e      	b.n	8002f84 <HAL_RCC_OscConfig+0xd4>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10c      	bne.n	8002f48 <HAL_RCC_OscConfig+0x98>
 8002f2e:	4b7b      	ldr	r3, [pc, #492]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a7a      	ldr	r2, [pc, #488]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	4b78      	ldr	r3, [pc, #480]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a77      	ldr	r2, [pc, #476]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	e01d      	b.n	8002f84 <HAL_RCC_OscConfig+0xd4>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f50:	d10c      	bne.n	8002f6c <HAL_RCC_OscConfig+0xbc>
 8002f52:	4b72      	ldr	r3, [pc, #456]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a71      	ldr	r2, [pc, #452]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	4b6f      	ldr	r3, [pc, #444]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a6e      	ldr	r2, [pc, #440]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	e00b      	b.n	8002f84 <HAL_RCC_OscConfig+0xd4>
 8002f6c:	4b6b      	ldr	r3, [pc, #428]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a6a      	ldr	r2, [pc, #424]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	4b68      	ldr	r3, [pc, #416]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a67      	ldr	r2, [pc, #412]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d013      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8c:	f7ff fc90 	bl	80028b0 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f94:	f7ff fc8c 	bl	80028b0 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b64      	cmp	r3, #100	; 0x64
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e200      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa6:	4b5d      	ldr	r3, [pc, #372]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0f0      	beq.n	8002f94 <HAL_RCC_OscConfig+0xe4>
 8002fb2:	e014      	b.n	8002fde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb4:	f7ff fc7c 	bl	80028b0 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fbc:	f7ff fc78 	bl	80028b0 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b64      	cmp	r3, #100	; 0x64
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e1ec      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fce:	4b53      	ldr	r3, [pc, #332]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f0      	bne.n	8002fbc <HAL_RCC_OscConfig+0x10c>
 8002fda:	e000      	b.n	8002fde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d063      	beq.n	80030b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fea:	4b4c      	ldr	r3, [pc, #304]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f003 030c 	and.w	r3, r3, #12
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00b      	beq.n	800300e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ff6:	4b49      	ldr	r3, [pc, #292]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f003 030c 	and.w	r3, r3, #12
 8002ffe:	2b08      	cmp	r3, #8
 8003000:	d11c      	bne.n	800303c <HAL_RCC_OscConfig+0x18c>
 8003002:	4b46      	ldr	r3, [pc, #280]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d116      	bne.n	800303c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800300e:	4b43      	ldr	r3, [pc, #268]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d005      	beq.n	8003026 <HAL_RCC_OscConfig+0x176>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d001      	beq.n	8003026 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e1c0      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003026:	4b3d      	ldr	r3, [pc, #244]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	4939      	ldr	r1, [pc, #228]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8003036:	4313      	orrs	r3, r2
 8003038:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800303a:	e03a      	b.n	80030b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d020      	beq.n	8003086 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003044:	4b36      	ldr	r3, [pc, #216]	; (8003120 <HAL_RCC_OscConfig+0x270>)
 8003046:	2201      	movs	r2, #1
 8003048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304a:	f7ff fc31 	bl	80028b0 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003052:	f7ff fc2d 	bl	80028b0 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e1a1      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003064:	4b2d      	ldr	r3, [pc, #180]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d0f0      	beq.n	8003052 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003070:	4b2a      	ldr	r3, [pc, #168]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	4927      	ldr	r1, [pc, #156]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8003080:	4313      	orrs	r3, r2
 8003082:	600b      	str	r3, [r1, #0]
 8003084:	e015      	b.n	80030b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003086:	4b26      	ldr	r3, [pc, #152]	; (8003120 <HAL_RCC_OscConfig+0x270>)
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308c:	f7ff fc10 	bl	80028b0 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003094:	f7ff fc0c 	bl	80028b0 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e180      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030a6:	4b1d      	ldr	r3, [pc, #116]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f0      	bne.n	8003094 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d03a      	beq.n	8003134 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d019      	beq.n	80030fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030c6:	4b17      	ldr	r3, [pc, #92]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 80030c8:	2201      	movs	r2, #1
 80030ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030cc:	f7ff fbf0 	bl	80028b0 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d4:	f7ff fbec 	bl	80028b0 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e160      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030e6:	4b0d      	ldr	r3, [pc, #52]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0f0      	beq.n	80030d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030f2:	2001      	movs	r0, #1
 80030f4:	f000 face 	bl	8003694 <RCC_Delay>
 80030f8:	e01c      	b.n	8003134 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030fa:	4b0a      	ldr	r3, [pc, #40]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003100:	f7ff fbd6 	bl	80028b0 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003106:	e00f      	b.n	8003128 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003108:	f7ff fbd2 	bl	80028b0 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d908      	bls.n	8003128 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e146      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
 800311a:	bf00      	nop
 800311c:	40021000 	.word	0x40021000
 8003120:	42420000 	.word	0x42420000
 8003124:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003128:	4b92      	ldr	r3, [pc, #584]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1e9      	bne.n	8003108 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 80a6 	beq.w	800328e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003142:	2300      	movs	r3, #0
 8003144:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003146:	4b8b      	ldr	r3, [pc, #556]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10d      	bne.n	800316e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003152:	4b88      	ldr	r3, [pc, #544]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	4a87      	ldr	r2, [pc, #540]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800315c:	61d3      	str	r3, [r2, #28]
 800315e:	4b85      	ldr	r3, [pc, #532]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003166:	60bb      	str	r3, [r7, #8]
 8003168:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800316a:	2301      	movs	r3, #1
 800316c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316e:	4b82      	ldr	r3, [pc, #520]	; (8003378 <HAL_RCC_OscConfig+0x4c8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003176:	2b00      	cmp	r3, #0
 8003178:	d118      	bne.n	80031ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800317a:	4b7f      	ldr	r3, [pc, #508]	; (8003378 <HAL_RCC_OscConfig+0x4c8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a7e      	ldr	r2, [pc, #504]	; (8003378 <HAL_RCC_OscConfig+0x4c8>)
 8003180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003186:	f7ff fb93 	bl	80028b0 <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800318e:	f7ff fb8f 	bl	80028b0 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b64      	cmp	r3, #100	; 0x64
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e103      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a0:	4b75      	ldr	r3, [pc, #468]	; (8003378 <HAL_RCC_OscConfig+0x4c8>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0f0      	beq.n	800318e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d106      	bne.n	80031c2 <HAL_RCC_OscConfig+0x312>
 80031b4:	4b6f      	ldr	r3, [pc, #444]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	4a6e      	ldr	r2, [pc, #440]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	6213      	str	r3, [r2, #32]
 80031c0:	e02d      	b.n	800321e <HAL_RCC_OscConfig+0x36e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10c      	bne.n	80031e4 <HAL_RCC_OscConfig+0x334>
 80031ca:	4b6a      	ldr	r3, [pc, #424]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	4a69      	ldr	r2, [pc, #420]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80031d0:	f023 0301 	bic.w	r3, r3, #1
 80031d4:	6213      	str	r3, [r2, #32]
 80031d6:	4b67      	ldr	r3, [pc, #412]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	4a66      	ldr	r2, [pc, #408]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80031dc:	f023 0304 	bic.w	r3, r3, #4
 80031e0:	6213      	str	r3, [r2, #32]
 80031e2:	e01c      	b.n	800321e <HAL_RCC_OscConfig+0x36e>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	2b05      	cmp	r3, #5
 80031ea:	d10c      	bne.n	8003206 <HAL_RCC_OscConfig+0x356>
 80031ec:	4b61      	ldr	r3, [pc, #388]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	4a60      	ldr	r2, [pc, #384]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80031f2:	f043 0304 	orr.w	r3, r3, #4
 80031f6:	6213      	str	r3, [r2, #32]
 80031f8:	4b5e      	ldr	r3, [pc, #376]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	4a5d      	ldr	r2, [pc, #372]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80031fe:	f043 0301 	orr.w	r3, r3, #1
 8003202:	6213      	str	r3, [r2, #32]
 8003204:	e00b      	b.n	800321e <HAL_RCC_OscConfig+0x36e>
 8003206:	4b5b      	ldr	r3, [pc, #364]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	4a5a      	ldr	r2, [pc, #360]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 800320c:	f023 0301 	bic.w	r3, r3, #1
 8003210:	6213      	str	r3, [r2, #32]
 8003212:	4b58      	ldr	r3, [pc, #352]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	4a57      	ldr	r2, [pc, #348]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003218:	f023 0304 	bic.w	r3, r3, #4
 800321c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d015      	beq.n	8003252 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003226:	f7ff fb43 	bl	80028b0 <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322c:	e00a      	b.n	8003244 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800322e:	f7ff fb3f 	bl	80028b0 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	f241 3288 	movw	r2, #5000	; 0x1388
 800323c:	4293      	cmp	r3, r2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e0b1      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003244:	4b4b      	ldr	r3, [pc, #300]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0ee      	beq.n	800322e <HAL_RCC_OscConfig+0x37e>
 8003250:	e014      	b.n	800327c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003252:	f7ff fb2d 	bl	80028b0 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003258:	e00a      	b.n	8003270 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800325a:	f7ff fb29 	bl	80028b0 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	f241 3288 	movw	r2, #5000	; 0x1388
 8003268:	4293      	cmp	r3, r2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e09b      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003270:	4b40      	ldr	r3, [pc, #256]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1ee      	bne.n	800325a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800327c:	7dfb      	ldrb	r3, [r7, #23]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d105      	bne.n	800328e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003282:	4b3c      	ldr	r3, [pc, #240]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	4a3b      	ldr	r2, [pc, #236]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003288:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800328c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 8087 	beq.w	80033a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003298:	4b36      	ldr	r3, [pc, #216]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 030c 	and.w	r3, r3, #12
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d061      	beq.n	8003368 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d146      	bne.n	800333a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ac:	4b33      	ldr	r3, [pc, #204]	; (800337c <HAL_RCC_OscConfig+0x4cc>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b2:	f7ff fafd 	bl	80028b0 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ba:	f7ff faf9 	bl	80028b0 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e06d      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032cc:	4b29      	ldr	r3, [pc, #164]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1f0      	bne.n	80032ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e0:	d108      	bne.n	80032f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032e2:	4b24      	ldr	r3, [pc, #144]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	4921      	ldr	r1, [pc, #132]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032f4:	4b1f      	ldr	r3, [pc, #124]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a19      	ldr	r1, [r3, #32]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	430b      	orrs	r3, r1
 8003306:	491b      	ldr	r1, [pc, #108]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003308:	4313      	orrs	r3, r2
 800330a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800330c:	4b1b      	ldr	r3, [pc, #108]	; (800337c <HAL_RCC_OscConfig+0x4cc>)
 800330e:	2201      	movs	r2, #1
 8003310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003312:	f7ff facd 	bl	80028b0 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800331a:	f7ff fac9 	bl	80028b0 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e03d      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800332c:	4b11      	ldr	r3, [pc, #68]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0f0      	beq.n	800331a <HAL_RCC_OscConfig+0x46a>
 8003338:	e035      	b.n	80033a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333a:	4b10      	ldr	r3, [pc, #64]	; (800337c <HAL_RCC_OscConfig+0x4cc>)
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003340:	f7ff fab6 	bl	80028b0 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003348:	f7ff fab2 	bl	80028b0 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e026      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800335a:	4b06      	ldr	r3, [pc, #24]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f0      	bne.n	8003348 <HAL_RCC_OscConfig+0x498>
 8003366:	e01e      	b.n	80033a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d107      	bne.n	8003380 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e019      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
 8003374:	40021000 	.word	0x40021000
 8003378:	40007000 	.word	0x40007000
 800337c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003380:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <HAL_RCC_OscConfig+0x500>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	429a      	cmp	r2, r3
 8003392:	d106      	bne.n	80033a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800339e:	429a      	cmp	r2, r3
 80033a0:	d001      	beq.n	80033a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40021000 	.word	0x40021000

080033b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e0d0      	b.n	800356a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033c8:	4b6a      	ldr	r3, [pc, #424]	; (8003574 <HAL_RCC_ClockConfig+0x1c0>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d910      	bls.n	80033f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d6:	4b67      	ldr	r3, [pc, #412]	; (8003574 <HAL_RCC_ClockConfig+0x1c0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f023 0207 	bic.w	r2, r3, #7
 80033de:	4965      	ldr	r1, [pc, #404]	; (8003574 <HAL_RCC_ClockConfig+0x1c0>)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e6:	4b63      	ldr	r3, [pc, #396]	; (8003574 <HAL_RCC_ClockConfig+0x1c0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d001      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e0b8      	b.n	800356a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d020      	beq.n	8003446 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003410:	4b59      	ldr	r3, [pc, #356]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	4a58      	ldr	r2, [pc, #352]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 8003416:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800341a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0308 	and.w	r3, r3, #8
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003428:	4b53      	ldr	r3, [pc, #332]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	4a52      	ldr	r2, [pc, #328]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 800342e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003432:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003434:	4b50      	ldr	r3, [pc, #320]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	494d      	ldr	r1, [pc, #308]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 8003442:	4313      	orrs	r3, r2
 8003444:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d040      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d107      	bne.n	800346a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345a:	4b47      	ldr	r3, [pc, #284]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d115      	bne.n	8003492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e07f      	b.n	800356a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d107      	bne.n	8003482 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003472:	4b41      	ldr	r3, [pc, #260]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d109      	bne.n	8003492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e073      	b.n	800356a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003482:	4b3d      	ldr	r3, [pc, #244]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e06b      	b.n	800356a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003492:	4b39      	ldr	r3, [pc, #228]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f023 0203 	bic.w	r2, r3, #3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	4936      	ldr	r1, [pc, #216]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034a4:	f7ff fa04 	bl	80028b0 <HAL_GetTick>
 80034a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034aa:	e00a      	b.n	80034c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ac:	f7ff fa00 	bl	80028b0 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e053      	b.n	800356a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c2:	4b2d      	ldr	r3, [pc, #180]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f003 020c 	and.w	r2, r3, #12
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d1eb      	bne.n	80034ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034d4:	4b27      	ldr	r3, [pc, #156]	; (8003574 <HAL_RCC_ClockConfig+0x1c0>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d210      	bcs.n	8003504 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e2:	4b24      	ldr	r3, [pc, #144]	; (8003574 <HAL_RCC_ClockConfig+0x1c0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f023 0207 	bic.w	r2, r3, #7
 80034ea:	4922      	ldr	r1, [pc, #136]	; (8003574 <HAL_RCC_ClockConfig+0x1c0>)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f2:	4b20      	ldr	r3, [pc, #128]	; (8003574 <HAL_RCC_ClockConfig+0x1c0>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d001      	beq.n	8003504 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e032      	b.n	800356a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003510:	4b19      	ldr	r3, [pc, #100]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	4916      	ldr	r1, [pc, #88]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 800351e:	4313      	orrs	r3, r2
 8003520:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d009      	beq.n	8003542 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800352e:	4b12      	ldr	r3, [pc, #72]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	490e      	ldr	r1, [pc, #56]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 800353e:	4313      	orrs	r3, r2
 8003540:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003542:	f000 f821 	bl	8003588 <HAL_RCC_GetSysClockFreq>
 8003546:	4602      	mov	r2, r0
 8003548:	4b0b      	ldr	r3, [pc, #44]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	091b      	lsrs	r3, r3, #4
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	490a      	ldr	r1, [pc, #40]	; (800357c <HAL_RCC_ClockConfig+0x1c8>)
 8003554:	5ccb      	ldrb	r3, [r1, r3]
 8003556:	fa22 f303 	lsr.w	r3, r2, r3
 800355a:	4a09      	ldr	r2, [pc, #36]	; (8003580 <HAL_RCC_ClockConfig+0x1cc>)
 800355c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800355e:	4b09      	ldr	r3, [pc, #36]	; (8003584 <HAL_RCC_ClockConfig+0x1d0>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff f962 	bl	800282c <HAL_InitTick>

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40022000 	.word	0x40022000
 8003578:	40021000 	.word	0x40021000
 800357c:	080054f8 	.word	0x080054f8
 8003580:	200000a0 	.word	0x200000a0
 8003584:	200000a4 	.word	0x200000a4

08003588 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	2300      	movs	r3, #0
 8003594:	60bb      	str	r3, [r7, #8]
 8003596:	2300      	movs	r3, #0
 8003598:	617b      	str	r3, [r7, #20]
 800359a:	2300      	movs	r3, #0
 800359c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800359e:	2300      	movs	r3, #0
 80035a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035a2:	4b1e      	ldr	r3, [pc, #120]	; (800361c <HAL_RCC_GetSysClockFreq+0x94>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f003 030c 	and.w	r3, r3, #12
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d002      	beq.n	80035b8 <HAL_RCC_GetSysClockFreq+0x30>
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d003      	beq.n	80035be <HAL_RCC_GetSysClockFreq+0x36>
 80035b6:	e027      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035b8:	4b19      	ldr	r3, [pc, #100]	; (8003620 <HAL_RCC_GetSysClockFreq+0x98>)
 80035ba:	613b      	str	r3, [r7, #16]
      break;
 80035bc:	e027      	b.n	800360e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	0c9b      	lsrs	r3, r3, #18
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	4a17      	ldr	r2, [pc, #92]	; (8003624 <HAL_RCC_GetSysClockFreq+0x9c>)
 80035c8:	5cd3      	ldrb	r3, [r2, r3]
 80035ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d010      	beq.n	80035f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035d6:	4b11      	ldr	r3, [pc, #68]	; (800361c <HAL_RCC_GetSysClockFreq+0x94>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	0c5b      	lsrs	r3, r3, #17
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	4a11      	ldr	r2, [pc, #68]	; (8003628 <HAL_RCC_GetSysClockFreq+0xa0>)
 80035e2:	5cd3      	ldrb	r3, [r2, r3]
 80035e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a0d      	ldr	r2, [pc, #52]	; (8003620 <HAL_RCC_GetSysClockFreq+0x98>)
 80035ea:	fb03 f202 	mul.w	r2, r3, r2
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	e004      	b.n	8003602 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a0c      	ldr	r2, [pc, #48]	; (800362c <HAL_RCC_GetSysClockFreq+0xa4>)
 80035fc:	fb02 f303 	mul.w	r3, r2, r3
 8003600:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	613b      	str	r3, [r7, #16]
      break;
 8003606:	e002      	b.n	800360e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003608:	4b05      	ldr	r3, [pc, #20]	; (8003620 <HAL_RCC_GetSysClockFreq+0x98>)
 800360a:	613b      	str	r3, [r7, #16]
      break;
 800360c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800360e:	693b      	ldr	r3, [r7, #16]
}
 8003610:	4618      	mov	r0, r3
 8003612:	371c      	adds	r7, #28
 8003614:	46bd      	mov	sp, r7
 8003616:	bc80      	pop	{r7}
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	40021000 	.word	0x40021000
 8003620:	007a1200 	.word	0x007a1200
 8003624:	08005510 	.word	0x08005510
 8003628:	08005520 	.word	0x08005520
 800362c:	003d0900 	.word	0x003d0900

08003630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003634:	4b02      	ldr	r3, [pc, #8]	; (8003640 <HAL_RCC_GetHCLKFreq+0x10>)
 8003636:	681b      	ldr	r3, [r3, #0]
}
 8003638:	4618      	mov	r0, r3
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr
 8003640:	200000a0 	.word	0x200000a0

08003644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003648:	f7ff fff2 	bl	8003630 <HAL_RCC_GetHCLKFreq>
 800364c:	4602      	mov	r2, r0
 800364e:	4b05      	ldr	r3, [pc, #20]	; (8003664 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	0a1b      	lsrs	r3, r3, #8
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	4903      	ldr	r1, [pc, #12]	; (8003668 <HAL_RCC_GetPCLK1Freq+0x24>)
 800365a:	5ccb      	ldrb	r3, [r1, r3]
 800365c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003660:	4618      	mov	r0, r3
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40021000 	.word	0x40021000
 8003668:	08005508 	.word	0x08005508

0800366c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003670:	f7ff ffde 	bl	8003630 <HAL_RCC_GetHCLKFreq>
 8003674:	4602      	mov	r2, r0
 8003676:	4b05      	ldr	r3, [pc, #20]	; (800368c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	0adb      	lsrs	r3, r3, #11
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	4903      	ldr	r1, [pc, #12]	; (8003690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003682:	5ccb      	ldrb	r3, [r1, r3]
 8003684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003688:	4618      	mov	r0, r3
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40021000 	.word	0x40021000
 8003690:	08005508 	.word	0x08005508

08003694 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800369c:	4b0a      	ldr	r3, [pc, #40]	; (80036c8 <RCC_Delay+0x34>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a0a      	ldr	r2, [pc, #40]	; (80036cc <RCC_Delay+0x38>)
 80036a2:	fba2 2303 	umull	r2, r3, r2, r3
 80036a6:	0a5b      	lsrs	r3, r3, #9
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	fb02 f303 	mul.w	r3, r2, r3
 80036ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036b0:	bf00      	nop
  }
  while (Delay --);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	1e5a      	subs	r2, r3, #1
 80036b6:	60fa      	str	r2, [r7, #12]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1f9      	bne.n	80036b0 <RCC_Delay+0x1c>
}
 80036bc:	bf00      	nop
 80036be:	bf00      	nop
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr
 80036c8:	200000a0 	.word	0x200000a0
 80036cc:	10624dd3 	.word	0x10624dd3

080036d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e041      	b.n	8003766 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d106      	bne.n	80036fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7fe ff30 	bl	800255c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3304      	adds	r3, #4
 800370c:	4619      	mov	r1, r3
 800370e:	4610      	mov	r0, r2
 8003710:	f000 fc28 	bl	8003f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b01      	cmp	r3, #1
 8003782:	d001      	beq.n	8003788 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e03a      	b.n	80037fe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0201 	orr.w	r2, r2, #1
 800379e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a18      	ldr	r2, [pc, #96]	; (8003808 <HAL_TIM_Base_Start_IT+0x98>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d00e      	beq.n	80037c8 <HAL_TIM_Base_Start_IT+0x58>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b2:	d009      	beq.n	80037c8 <HAL_TIM_Base_Start_IT+0x58>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a14      	ldr	r2, [pc, #80]	; (800380c <HAL_TIM_Base_Start_IT+0x9c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d004      	beq.n	80037c8 <HAL_TIM_Base_Start_IT+0x58>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a13      	ldr	r2, [pc, #76]	; (8003810 <HAL_TIM_Base_Start_IT+0xa0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d111      	bne.n	80037ec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2b06      	cmp	r3, #6
 80037d8:	d010      	beq.n	80037fc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f042 0201 	orr.w	r2, r2, #1
 80037e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ea:	e007      	b.n	80037fc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0201 	orr.w	r2, r2, #1
 80037fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr
 8003808:	40012c00 	.word	0x40012c00
 800380c:	40000400 	.word	0x40000400
 8003810:	40000800 	.word	0x40000800

08003814 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e041      	b.n	80038aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d106      	bne.n	8003840 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7fe feb2 	bl	80025a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3304      	adds	r3, #4
 8003850:	4619      	mov	r1, r3
 8003852:	4610      	mov	r0, r2
 8003854:	f000 fb86 	bl	8003f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d109      	bne.n	80038d8 <HAL_TIM_PWM_Start+0x24>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	bf14      	ite	ne
 80038d0:	2301      	movne	r3, #1
 80038d2:	2300      	moveq	r3, #0
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	e022      	b.n	800391e <HAL_TIM_PWM_Start+0x6a>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d109      	bne.n	80038f2 <HAL_TIM_PWM_Start+0x3e>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	bf14      	ite	ne
 80038ea:	2301      	movne	r3, #1
 80038ec:	2300      	moveq	r3, #0
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	e015      	b.n	800391e <HAL_TIM_PWM_Start+0x6a>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	d109      	bne.n	800390c <HAL_TIM_PWM_Start+0x58>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b01      	cmp	r3, #1
 8003902:	bf14      	ite	ne
 8003904:	2301      	movne	r3, #1
 8003906:	2300      	moveq	r3, #0
 8003908:	b2db      	uxtb	r3, r3
 800390a:	e008      	b.n	800391e <HAL_TIM_PWM_Start+0x6a>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b01      	cmp	r3, #1
 8003916:	bf14      	ite	ne
 8003918:	2301      	movne	r3, #1
 800391a:	2300      	moveq	r3, #0
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e05e      	b.n	80039e4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d104      	bne.n	8003936 <HAL_TIM_PWM_Start+0x82>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003934:	e013      	b.n	800395e <HAL_TIM_PWM_Start+0xaa>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b04      	cmp	r3, #4
 800393a:	d104      	bne.n	8003946 <HAL_TIM_PWM_Start+0x92>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2202      	movs	r2, #2
 8003940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003944:	e00b      	b.n	800395e <HAL_TIM_PWM_Start+0xaa>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b08      	cmp	r3, #8
 800394a:	d104      	bne.n	8003956 <HAL_TIM_PWM_Start+0xa2>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2202      	movs	r2, #2
 8003950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003954:	e003      	b.n	800395e <HAL_TIM_PWM_Start+0xaa>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2202      	movs	r2, #2
 800395a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2201      	movs	r2, #1
 8003964:	6839      	ldr	r1, [r7, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f000 fd7c 	bl	8004464 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a1e      	ldr	r2, [pc, #120]	; (80039ec <HAL_TIM_PWM_Start+0x138>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d107      	bne.n	8003986 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003984:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a18      	ldr	r2, [pc, #96]	; (80039ec <HAL_TIM_PWM_Start+0x138>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d00e      	beq.n	80039ae <HAL_TIM_PWM_Start+0xfa>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003998:	d009      	beq.n	80039ae <HAL_TIM_PWM_Start+0xfa>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a14      	ldr	r2, [pc, #80]	; (80039f0 <HAL_TIM_PWM_Start+0x13c>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d004      	beq.n	80039ae <HAL_TIM_PWM_Start+0xfa>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a12      	ldr	r2, [pc, #72]	; (80039f4 <HAL_TIM_PWM_Start+0x140>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d111      	bne.n	80039d2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2b06      	cmp	r3, #6
 80039be:	d010      	beq.n	80039e2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0201 	orr.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039d0:	e007      	b.n	80039e2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f042 0201 	orr.w	r2, r2, #1
 80039e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40012c00 	.word	0x40012c00
 80039f0:	40000400 	.word	0x40000400
 80039f4:	40000800 	.word	0x40000800

080039f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d122      	bne.n	8003a54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d11b      	bne.n	8003a54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f06f 0202 	mvn.w	r2, #2
 8003a24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	f003 0303 	and.w	r3, r3, #3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 fa76 	bl	8003f2c <HAL_TIM_IC_CaptureCallback>
 8003a40:	e005      	b.n	8003a4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 fa69 	bl	8003f1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 fa78 	bl	8003f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	f003 0304 	and.w	r3, r3, #4
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d122      	bne.n	8003aa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b04      	cmp	r3, #4
 8003a6e:	d11b      	bne.n	8003aa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f06f 0204 	mvn.w	r2, #4
 8003a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 fa4c 	bl	8003f2c <HAL_TIM_IC_CaptureCallback>
 8003a94:	e005      	b.n	8003aa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 fa3f 	bl	8003f1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 fa4e 	bl	8003f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b08      	cmp	r3, #8
 8003ab4:	d122      	bne.n	8003afc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d11b      	bne.n	8003afc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f06f 0208 	mvn.w	r2, #8
 8003acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2204      	movs	r2, #4
 8003ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	f003 0303 	and.w	r3, r3, #3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fa22 	bl	8003f2c <HAL_TIM_IC_CaptureCallback>
 8003ae8:	e005      	b.n	8003af6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 fa15 	bl	8003f1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 fa24 	bl	8003f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	f003 0310 	and.w	r3, r3, #16
 8003b06:	2b10      	cmp	r3, #16
 8003b08:	d122      	bne.n	8003b50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f003 0310 	and.w	r3, r3, #16
 8003b14:	2b10      	cmp	r3, #16
 8003b16:	d11b      	bne.n	8003b50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f06f 0210 	mvn.w	r2, #16
 8003b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2208      	movs	r2, #8
 8003b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f9f8 	bl	8003f2c <HAL_TIM_IC_CaptureCallback>
 8003b3c:	e005      	b.n	8003b4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f9eb 	bl	8003f1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f9fa 	bl	8003f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d10e      	bne.n	8003b7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d107      	bne.n	8003b7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f06f 0201 	mvn.w	r2, #1
 8003b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7fe f9a2 	bl	8001ec0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b86:	2b80      	cmp	r3, #128	; 0x80
 8003b88:	d10e      	bne.n	8003ba8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b94:	2b80      	cmp	r3, #128	; 0x80
 8003b96:	d107      	bne.n	8003ba8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 fce9 	bl	800457a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb2:	2b40      	cmp	r3, #64	; 0x40
 8003bb4:	d10e      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc0:	2b40      	cmp	r3, #64	; 0x40
 8003bc2:	d107      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f9be 	bl	8003f50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	f003 0320 	and.w	r3, r3, #32
 8003bde:	2b20      	cmp	r3, #32
 8003be0:	d10e      	bne.n	8003c00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f003 0320 	and.w	r3, r3, #32
 8003bec:	2b20      	cmp	r3, #32
 8003bee:	d107      	bne.n	8003c00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f06f 0220 	mvn.w	r2, #32
 8003bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 fcb4 	bl	8004568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c00:	bf00      	nop
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c14:	2300      	movs	r3, #0
 8003c16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d101      	bne.n	8003c26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c22:	2302      	movs	r3, #2
 8003c24:	e0ae      	b.n	8003d84 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b0c      	cmp	r3, #12
 8003c32:	f200 809f 	bhi.w	8003d74 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c36:	a201      	add	r2, pc, #4	; (adr r2, 8003c3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3c:	08003c71 	.word	0x08003c71
 8003c40:	08003d75 	.word	0x08003d75
 8003c44:	08003d75 	.word	0x08003d75
 8003c48:	08003d75 	.word	0x08003d75
 8003c4c:	08003cb1 	.word	0x08003cb1
 8003c50:	08003d75 	.word	0x08003d75
 8003c54:	08003d75 	.word	0x08003d75
 8003c58:	08003d75 	.word	0x08003d75
 8003c5c:	08003cf3 	.word	0x08003cf3
 8003c60:	08003d75 	.word	0x08003d75
 8003c64:	08003d75 	.word	0x08003d75
 8003c68:	08003d75 	.word	0x08003d75
 8003c6c:	08003d33 	.word	0x08003d33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68b9      	ldr	r1, [r7, #8]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 f9d6 	bl	8004028 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	699a      	ldr	r2, [r3, #24]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0208 	orr.w	r2, r2, #8
 8003c8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	699a      	ldr	r2, [r3, #24]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0204 	bic.w	r2, r2, #4
 8003c9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6999      	ldr	r1, [r3, #24]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	691a      	ldr	r2, [r3, #16]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	619a      	str	r2, [r3, #24]
      break;
 8003cae:	e064      	b.n	8003d7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68b9      	ldr	r1, [r7, #8]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 fa1c 	bl	80040f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	699a      	ldr	r2, [r3, #24]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	699a      	ldr	r2, [r3, #24]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6999      	ldr	r1, [r3, #24]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	021a      	lsls	r2, r3, #8
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	619a      	str	r2, [r3, #24]
      break;
 8003cf0:	e043      	b.n	8003d7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68b9      	ldr	r1, [r7, #8]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 fa65 	bl	80041c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	69da      	ldr	r2, [r3, #28]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f042 0208 	orr.w	r2, r2, #8
 8003d0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	69da      	ldr	r2, [r3, #28]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0204 	bic.w	r2, r2, #4
 8003d1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	69d9      	ldr	r1, [r3, #28]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	61da      	str	r2, [r3, #28]
      break;
 8003d30:	e023      	b.n	8003d7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68b9      	ldr	r1, [r7, #8]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 faaf 	bl	800429c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	69da      	ldr	r2, [r3, #28]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	69da      	ldr	r2, [r3, #28]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	69d9      	ldr	r1, [r3, #28]
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	021a      	lsls	r2, r3, #8
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	61da      	str	r2, [r3, #28]
      break;
 8003d72:	e002      	b.n	8003d7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	75fb      	strb	r3, [r7, #23]
      break;
 8003d78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d96:	2300      	movs	r3, #0
 8003d98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <HAL_TIM_ConfigClockSource+0x1c>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e0b4      	b.n	8003f12 <HAL_TIM_ConfigClockSource+0x186>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de0:	d03e      	beq.n	8003e60 <HAL_TIM_ConfigClockSource+0xd4>
 8003de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de6:	f200 8087 	bhi.w	8003ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dee:	f000 8086 	beq.w	8003efe <HAL_TIM_ConfigClockSource+0x172>
 8003df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df6:	d87f      	bhi.n	8003ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8003df8:	2b70      	cmp	r3, #112	; 0x70
 8003dfa:	d01a      	beq.n	8003e32 <HAL_TIM_ConfigClockSource+0xa6>
 8003dfc:	2b70      	cmp	r3, #112	; 0x70
 8003dfe:	d87b      	bhi.n	8003ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8003e00:	2b60      	cmp	r3, #96	; 0x60
 8003e02:	d050      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x11a>
 8003e04:	2b60      	cmp	r3, #96	; 0x60
 8003e06:	d877      	bhi.n	8003ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8003e08:	2b50      	cmp	r3, #80	; 0x50
 8003e0a:	d03c      	beq.n	8003e86 <HAL_TIM_ConfigClockSource+0xfa>
 8003e0c:	2b50      	cmp	r3, #80	; 0x50
 8003e0e:	d873      	bhi.n	8003ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8003e10:	2b40      	cmp	r3, #64	; 0x40
 8003e12:	d058      	beq.n	8003ec6 <HAL_TIM_ConfigClockSource+0x13a>
 8003e14:	2b40      	cmp	r3, #64	; 0x40
 8003e16:	d86f      	bhi.n	8003ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8003e18:	2b30      	cmp	r3, #48	; 0x30
 8003e1a:	d064      	beq.n	8003ee6 <HAL_TIM_ConfigClockSource+0x15a>
 8003e1c:	2b30      	cmp	r3, #48	; 0x30
 8003e1e:	d86b      	bhi.n	8003ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8003e20:	2b20      	cmp	r3, #32
 8003e22:	d060      	beq.n	8003ee6 <HAL_TIM_ConfigClockSource+0x15a>
 8003e24:	2b20      	cmp	r3, #32
 8003e26:	d867      	bhi.n	8003ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d05c      	beq.n	8003ee6 <HAL_TIM_ConfigClockSource+0x15a>
 8003e2c:	2b10      	cmp	r3, #16
 8003e2e:	d05a      	beq.n	8003ee6 <HAL_TIM_ConfigClockSource+0x15a>
 8003e30:	e062      	b.n	8003ef8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e42:	f000 faf0 	bl	8004426 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	609a      	str	r2, [r3, #8]
      break;
 8003e5e:	e04f      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e70:	f000 fad9 	bl	8004426 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689a      	ldr	r2, [r3, #8]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e82:	609a      	str	r2, [r3, #8]
      break;
 8003e84:	e03c      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e92:	461a      	mov	r2, r3
 8003e94:	f000 fa50 	bl	8004338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2150      	movs	r1, #80	; 0x50
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 faa7 	bl	80043f2 <TIM_ITRx_SetConfig>
      break;
 8003ea4:	e02c      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	f000 fa6e 	bl	8004394 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2160      	movs	r1, #96	; 0x60
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 fa97 	bl	80043f2 <TIM_ITRx_SetConfig>
      break;
 8003ec4:	e01c      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f000 fa30 	bl	8004338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2140      	movs	r1, #64	; 0x40
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 fa87 	bl	80043f2 <TIM_ITRx_SetConfig>
      break;
 8003ee4:	e00c      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4610      	mov	r0, r2
 8003ef2:	f000 fa7e 	bl	80043f2 <TIM_ITRx_SetConfig>
      break;
 8003ef6:	e003      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	73fb      	strb	r3, [r7, #15]
      break;
 8003efc:	e000      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003efe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bc80      	pop	{r7}
 8003f2a:	4770      	bx	lr

08003f2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bc80      	pop	{r7}
 8003f3c:	4770      	bx	lr

08003f3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b083      	sub	sp, #12
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bc80      	pop	{r7}
 8003f4e:	4770      	bx	lr

08003f50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bc80      	pop	{r7}
 8003f60:	4770      	bx	lr
	...

08003f64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a29      	ldr	r2, [pc, #164]	; (800401c <TIM_Base_SetConfig+0xb8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d00b      	beq.n	8003f94 <TIM_Base_SetConfig+0x30>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f82:	d007      	beq.n	8003f94 <TIM_Base_SetConfig+0x30>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a26      	ldr	r2, [pc, #152]	; (8004020 <TIM_Base_SetConfig+0xbc>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d003      	beq.n	8003f94 <TIM_Base_SetConfig+0x30>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a25      	ldr	r2, [pc, #148]	; (8004024 <TIM_Base_SetConfig+0xc0>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d108      	bne.n	8003fa6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a1c      	ldr	r2, [pc, #112]	; (800401c <TIM_Base_SetConfig+0xb8>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d00b      	beq.n	8003fc6 <TIM_Base_SetConfig+0x62>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb4:	d007      	beq.n	8003fc6 <TIM_Base_SetConfig+0x62>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a19      	ldr	r2, [pc, #100]	; (8004020 <TIM_Base_SetConfig+0xbc>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d003      	beq.n	8003fc6 <TIM_Base_SetConfig+0x62>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a18      	ldr	r2, [pc, #96]	; (8004024 <TIM_Base_SetConfig+0xc0>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d108      	bne.n	8003fd8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a07      	ldr	r2, [pc, #28]	; (800401c <TIM_Base_SetConfig+0xb8>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d103      	bne.n	800400c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	615a      	str	r2, [r3, #20]
}
 8004012:	bf00      	nop
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	bc80      	pop	{r7}
 800401a:	4770      	bx	lr
 800401c:	40012c00 	.word	0x40012c00
 8004020:	40000400 	.word	0x40000400
 8004024:	40000800 	.word	0x40000800

08004028 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	f023 0201 	bic.w	r2, r3, #1
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 0303 	bic.w	r3, r3, #3
 800405e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	4313      	orrs	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f023 0302 	bic.w	r3, r3, #2
 8004070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	4313      	orrs	r3, r2
 800407a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a1c      	ldr	r2, [pc, #112]	; (80040f0 <TIM_OC1_SetConfig+0xc8>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d10c      	bne.n	800409e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f023 0308 	bic.w	r3, r3, #8
 800408a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	4313      	orrs	r3, r2
 8004094:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f023 0304 	bic.w	r3, r3, #4
 800409c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a13      	ldr	r2, [pc, #76]	; (80040f0 <TIM_OC1_SetConfig+0xc8>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d111      	bne.n	80040ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	621a      	str	r2, [r3, #32]
}
 80040e4:	bf00      	nop
 80040e6:	371c      	adds	r7, #28
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bc80      	pop	{r7}
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40012c00 	.word	0x40012c00

080040f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	f023 0210 	bic.w	r2, r3, #16
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800412a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	021b      	lsls	r3, r3, #8
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4313      	orrs	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f023 0320 	bic.w	r3, r3, #32
 800413e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	4313      	orrs	r3, r2
 800414a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a1d      	ldr	r2, [pc, #116]	; (80041c4 <TIM_OC2_SetConfig+0xd0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d10d      	bne.n	8004170 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800415a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	4313      	orrs	r3, r2
 8004166:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800416e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a14      	ldr	r2, [pc, #80]	; (80041c4 <TIM_OC2_SetConfig+0xd0>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d113      	bne.n	80041a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800417e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004186:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	4313      	orrs	r3, r2
 8004192:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	4313      	orrs	r3, r2
 800419e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	621a      	str	r2, [r3, #32]
}
 80041ba:	bf00      	nop
 80041bc:	371c      	adds	r7, #28
 80041be:	46bd      	mov	sp, r7
 80041c0:	bc80      	pop	{r7}
 80041c2:	4770      	bx	lr
 80041c4:	40012c00 	.word	0x40012c00

080041c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 0303 	bic.w	r3, r3, #3
 80041fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	4313      	orrs	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	021b      	lsls	r3, r3, #8
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	4313      	orrs	r3, r2
 800421c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a1d      	ldr	r2, [pc, #116]	; (8004298 <TIM_OC3_SetConfig+0xd0>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d10d      	bne.n	8004242 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800422c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	021b      	lsls	r3, r3, #8
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	4313      	orrs	r3, r2
 8004238:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004240:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a14      	ldr	r2, [pc, #80]	; (8004298 <TIM_OC3_SetConfig+0xd0>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d113      	bne.n	8004272 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004250:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004258:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	4313      	orrs	r3, r2
 8004264:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	4313      	orrs	r3, r2
 8004270:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	621a      	str	r2, [r3, #32]
}
 800428c:	bf00      	nop
 800428e:	371c      	adds	r7, #28
 8004290:	46bd      	mov	sp, r7
 8004292:	bc80      	pop	{r7}
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40012c00 	.word	0x40012c00

0800429c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800429c:	b480      	push	{r7}
 800429e:	b087      	sub	sp, #28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	021b      	lsls	r3, r3, #8
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	4313      	orrs	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	031b      	lsls	r3, r3, #12
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a0f      	ldr	r2, [pc, #60]	; (8004334 <TIM_OC4_SetConfig+0x98>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d109      	bne.n	8004310 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004302:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	019b      	lsls	r3, r3, #6
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	4313      	orrs	r3, r2
 800430e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	621a      	str	r2, [r3, #32]
}
 800432a:	bf00      	nop
 800432c:	371c      	adds	r7, #28
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr
 8004334:	40012c00 	.word	0x40012c00

08004338 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	f023 0201 	bic.w	r2, r3, #1
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4313      	orrs	r3, r2
 800436c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f023 030a 	bic.w	r3, r3, #10
 8004374:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	4313      	orrs	r3, r2
 800437c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	621a      	str	r2, [r3, #32]
}
 800438a:	bf00      	nop
 800438c:	371c      	adds	r7, #28
 800438e:	46bd      	mov	sp, r7
 8004390:	bc80      	pop	{r7}
 8004392:	4770      	bx	lr

08004394 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004394:	b480      	push	{r7}
 8004396:	b087      	sub	sp, #28
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	f023 0210 	bic.w	r2, r3, #16
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	031b      	lsls	r3, r3, #12
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	4313      	orrs	r3, r2
 80043da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	621a      	str	r2, [r3, #32]
}
 80043e8:	bf00      	nop
 80043ea:	371c      	adds	r7, #28
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bc80      	pop	{r7}
 80043f0:	4770      	bx	lr

080043f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b085      	sub	sp, #20
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
 80043fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004408:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4313      	orrs	r3, r2
 8004410:	f043 0307 	orr.w	r3, r3, #7
 8004414:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	609a      	str	r2, [r3, #8]
}
 800441c:	bf00      	nop
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	bc80      	pop	{r7}
 8004424:	4770      	bx	lr

08004426 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004426:	b480      	push	{r7}
 8004428:	b087      	sub	sp, #28
 800442a:	af00      	add	r7, sp, #0
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	607a      	str	r2, [r7, #4]
 8004432:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004440:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	021a      	lsls	r2, r3, #8
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	431a      	orrs	r2, r3
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	4313      	orrs	r3, r2
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	4313      	orrs	r3, r2
 8004452:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	609a      	str	r2, [r3, #8]
}
 800445a:	bf00      	nop
 800445c:	371c      	adds	r7, #28
 800445e:	46bd      	mov	sp, r7
 8004460:	bc80      	pop	{r7}
 8004462:	4770      	bx	lr

08004464 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	f003 031f 	and.w	r3, r3, #31
 8004476:	2201      	movs	r2, #1
 8004478:	fa02 f303 	lsl.w	r3, r2, r3
 800447c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6a1a      	ldr	r2, [r3, #32]
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	43db      	mvns	r3, r3
 8004486:	401a      	ands	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6a1a      	ldr	r2, [r3, #32]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f003 031f 	and.w	r3, r3, #31
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	fa01 f303 	lsl.w	r3, r1, r3
 800449c:	431a      	orrs	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	621a      	str	r2, [r3, #32]
}
 80044a2:	bf00      	nop
 80044a4:	371c      	adds	r7, #28
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr

080044ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d101      	bne.n	80044c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044c0:	2302      	movs	r3, #2
 80044c2:	e046      	b.n	8004552 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a16      	ldr	r2, [pc, #88]	; (800455c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d00e      	beq.n	8004526 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004510:	d009      	beq.n	8004526 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a12      	ldr	r2, [pc, #72]	; (8004560 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d004      	beq.n	8004526 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a10      	ldr	r2, [pc, #64]	; (8004564 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d10c      	bne.n	8004540 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800452c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	4313      	orrs	r3, r2
 8004536:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	bc80      	pop	{r7}
 800455a:	4770      	bx	lr
 800455c:	40012c00 	.word	0x40012c00
 8004560:	40000400 	.word	0x40000400
 8004564:	40000800 	.word	0x40000800

08004568 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	bc80      	pop	{r7}
 8004578:	4770      	bx	lr

0800457a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800457a:	b480      	push	{r7}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr

0800458c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e042      	b.n	8004624 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d106      	bne.n	80045b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7fe f846 	bl	8002644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2224      	movs	r2, #36	; 0x24
 80045bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f91d 	bl	8004810 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	691a      	ldr	r2, [r3, #16]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	695a      	ldr	r2, [r3, #20]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68da      	ldr	r2, [r3, #12]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004604:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2220      	movs	r2, #32
 8004618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3708      	adds	r7, #8
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b08a      	sub	sp, #40	; 0x28
 8004630:	af02      	add	r7, sp, #8
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	603b      	str	r3, [r7, #0]
 8004638:	4613      	mov	r3, r2
 800463a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b20      	cmp	r3, #32
 800464a:	d16d      	bne.n	8004728 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d002      	beq.n	8004658 <HAL_UART_Transmit+0x2c>
 8004652:	88fb      	ldrh	r3, [r7, #6]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e066      	b.n	800472a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2221      	movs	r2, #33	; 0x21
 8004666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800466a:	f7fe f921 	bl	80028b0 <HAL_GetTick>
 800466e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	88fa      	ldrh	r2, [r7, #6]
 8004674:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	88fa      	ldrh	r2, [r7, #6]
 800467a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004684:	d108      	bne.n	8004698 <HAL_UART_Transmit+0x6c>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d104      	bne.n	8004698 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800468e:	2300      	movs	r3, #0
 8004690:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	61bb      	str	r3, [r7, #24]
 8004696:	e003      	b.n	80046a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800469c:	2300      	movs	r3, #0
 800469e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046a0:	e02a      	b.n	80046f8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2200      	movs	r2, #0
 80046aa:	2180      	movs	r1, #128	; 0x80
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f000 f840 	bl	8004732 <UART_WaitOnFlagUntilTimeout>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e036      	b.n	800472a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10b      	bne.n	80046da <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	461a      	mov	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	3302      	adds	r3, #2
 80046d6:	61bb      	str	r3, [r7, #24]
 80046d8:	e007      	b.n	80046ea <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	781a      	ldrb	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	3301      	adds	r3, #1
 80046e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	3b01      	subs	r3, #1
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1cf      	bne.n	80046a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	2200      	movs	r2, #0
 800470a:	2140      	movs	r1, #64	; 0x40
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 f810 	bl	8004732 <UART_WaitOnFlagUntilTimeout>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e006      	b.n	800472a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004724:	2300      	movs	r3, #0
 8004726:	e000      	b.n	800472a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004728:	2302      	movs	r3, #2
  }
}
 800472a:	4618      	mov	r0, r3
 800472c:	3720      	adds	r7, #32
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b090      	sub	sp, #64	; 0x40
 8004736:	af00      	add	r7, sp, #0
 8004738:	60f8      	str	r0, [r7, #12]
 800473a:	60b9      	str	r1, [r7, #8]
 800473c:	603b      	str	r3, [r7, #0]
 800473e:	4613      	mov	r3, r2
 8004740:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004742:	e050      	b.n	80047e6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474a:	d04c      	beq.n	80047e6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800474c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800474e:	2b00      	cmp	r3, #0
 8004750:	d007      	beq.n	8004762 <UART_WaitOnFlagUntilTimeout+0x30>
 8004752:	f7fe f8ad 	bl	80028b0 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800475e:	429a      	cmp	r2, r3
 8004760:	d241      	bcs.n	80047e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	330c      	adds	r3, #12
 8004768:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476c:	e853 3f00 	ldrex	r3, [r3]
 8004770:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004778:	63fb      	str	r3, [r7, #60]	; 0x3c
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	330c      	adds	r3, #12
 8004780:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004782:	637a      	str	r2, [r7, #52]	; 0x34
 8004784:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004786:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004788:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800478a:	e841 2300 	strex	r3, r2, [r1]
 800478e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1e5      	bne.n	8004762 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	3314      	adds	r3, #20
 800479c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	e853 3f00 	ldrex	r3, [r3]
 80047a4:	613b      	str	r3, [r7, #16]
   return(result);
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f023 0301 	bic.w	r3, r3, #1
 80047ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	3314      	adds	r3, #20
 80047b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047b6:	623a      	str	r2, [r7, #32]
 80047b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ba:	69f9      	ldr	r1, [r7, #28]
 80047bc:	6a3a      	ldr	r2, [r7, #32]
 80047be:	e841 2300 	strex	r3, r2, [r1]
 80047c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1e5      	bne.n	8004796 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e00f      	b.n	8004806 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	4013      	ands	r3, r2
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	bf0c      	ite	eq
 80047f6:	2301      	moveq	r3, #1
 80047f8:	2300      	movne	r3, #0
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	461a      	mov	r2, r3
 80047fe:	79fb      	ldrb	r3, [r7, #7]
 8004800:	429a      	cmp	r2, r3
 8004802:	d09f      	beq.n	8004744 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3740      	adds	r7, #64	; 0x40
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
	...

08004810 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68da      	ldr	r2, [r3, #12]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689a      	ldr	r2, [r3, #8]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	4313      	orrs	r3, r2
 800483e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800484a:	f023 030c 	bic.w	r3, r3, #12
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6812      	ldr	r2, [r2, #0]
 8004852:	68b9      	ldr	r1, [r7, #8]
 8004854:	430b      	orrs	r3, r1
 8004856:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699a      	ldr	r2, [r3, #24]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a2c      	ldr	r2, [pc, #176]	; (8004924 <UART_SetConfig+0x114>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d103      	bne.n	8004880 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004878:	f7fe fef8 	bl	800366c <HAL_RCC_GetPCLK2Freq>
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	e002      	b.n	8004886 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004880:	f7fe fee0 	bl	8003644 <HAL_RCC_GetPCLK1Freq>
 8004884:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	4613      	mov	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	009a      	lsls	r2, r3, #2
 8004890:	441a      	add	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	fbb2 f3f3 	udiv	r3, r2, r3
 800489c:	4a22      	ldr	r2, [pc, #136]	; (8004928 <UART_SetConfig+0x118>)
 800489e:	fba2 2303 	umull	r2, r3, r2, r3
 80048a2:	095b      	lsrs	r3, r3, #5
 80048a4:	0119      	lsls	r1, r3, #4
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4613      	mov	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	009a      	lsls	r2, r3, #2
 80048b0:	441a      	add	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80048bc:	4b1a      	ldr	r3, [pc, #104]	; (8004928 <UART_SetConfig+0x118>)
 80048be:	fba3 0302 	umull	r0, r3, r3, r2
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	2064      	movs	r0, #100	; 0x64
 80048c6:	fb00 f303 	mul.w	r3, r0, r3
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	3332      	adds	r3, #50	; 0x32
 80048d0:	4a15      	ldr	r2, [pc, #84]	; (8004928 <UART_SetConfig+0x118>)
 80048d2:	fba2 2303 	umull	r2, r3, r2, r3
 80048d6:	095b      	lsrs	r3, r3, #5
 80048d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048dc:	4419      	add	r1, r3
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	4613      	mov	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	009a      	lsls	r2, r3, #2
 80048e8:	441a      	add	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80048f4:	4b0c      	ldr	r3, [pc, #48]	; (8004928 <UART_SetConfig+0x118>)
 80048f6:	fba3 0302 	umull	r0, r3, r3, r2
 80048fa:	095b      	lsrs	r3, r3, #5
 80048fc:	2064      	movs	r0, #100	; 0x64
 80048fe:	fb00 f303 	mul.w	r3, r0, r3
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	3332      	adds	r3, #50	; 0x32
 8004908:	4a07      	ldr	r2, [pc, #28]	; (8004928 <UART_SetConfig+0x118>)
 800490a:	fba2 2303 	umull	r2, r3, r2, r3
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	f003 020f 	and.w	r2, r3, #15
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	440a      	add	r2, r1
 800491a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800491c:	bf00      	nop
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	40013800 	.word	0x40013800
 8004928:	51eb851f 	.word	0x51eb851f

0800492c <siprintf>:
 800492c:	b40e      	push	{r1, r2, r3}
 800492e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004932:	b500      	push	{lr}
 8004934:	b09c      	sub	sp, #112	; 0x70
 8004936:	ab1d      	add	r3, sp, #116	; 0x74
 8004938:	9002      	str	r0, [sp, #8]
 800493a:	9006      	str	r0, [sp, #24]
 800493c:	9107      	str	r1, [sp, #28]
 800493e:	9104      	str	r1, [sp, #16]
 8004940:	4808      	ldr	r0, [pc, #32]	; (8004964 <siprintf+0x38>)
 8004942:	4909      	ldr	r1, [pc, #36]	; (8004968 <siprintf+0x3c>)
 8004944:	f853 2b04 	ldr.w	r2, [r3], #4
 8004948:	9105      	str	r1, [sp, #20]
 800494a:	6800      	ldr	r0, [r0, #0]
 800494c:	a902      	add	r1, sp, #8
 800494e:	9301      	str	r3, [sp, #4]
 8004950:	f000 f98e 	bl	8004c70 <_svfiprintf_r>
 8004954:	2200      	movs	r2, #0
 8004956:	9b02      	ldr	r3, [sp, #8]
 8004958:	701a      	strb	r2, [r3, #0]
 800495a:	b01c      	add	sp, #112	; 0x70
 800495c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004960:	b003      	add	sp, #12
 8004962:	4770      	bx	lr
 8004964:	200000f8 	.word	0x200000f8
 8004968:	ffff0208 	.word	0xffff0208

0800496c <memset>:
 800496c:	4603      	mov	r3, r0
 800496e:	4402      	add	r2, r0
 8004970:	4293      	cmp	r3, r2
 8004972:	d100      	bne.n	8004976 <memset+0xa>
 8004974:	4770      	bx	lr
 8004976:	f803 1b01 	strb.w	r1, [r3], #1
 800497a:	e7f9      	b.n	8004970 <memset+0x4>

0800497c <__errno>:
 800497c:	4b01      	ldr	r3, [pc, #4]	; (8004984 <__errno+0x8>)
 800497e:	6818      	ldr	r0, [r3, #0]
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	200000f8 	.word	0x200000f8

08004988 <__libc_init_array>:
 8004988:	b570      	push	{r4, r5, r6, lr}
 800498a:	2600      	movs	r6, #0
 800498c:	4d0c      	ldr	r5, [pc, #48]	; (80049c0 <__libc_init_array+0x38>)
 800498e:	4c0d      	ldr	r4, [pc, #52]	; (80049c4 <__libc_init_array+0x3c>)
 8004990:	1b64      	subs	r4, r4, r5
 8004992:	10a4      	asrs	r4, r4, #2
 8004994:	42a6      	cmp	r6, r4
 8004996:	d109      	bne.n	80049ac <__libc_init_array+0x24>
 8004998:	f000 fc7a 	bl	8005290 <_init>
 800499c:	2600      	movs	r6, #0
 800499e:	4d0a      	ldr	r5, [pc, #40]	; (80049c8 <__libc_init_array+0x40>)
 80049a0:	4c0a      	ldr	r4, [pc, #40]	; (80049cc <__libc_init_array+0x44>)
 80049a2:	1b64      	subs	r4, r4, r5
 80049a4:	10a4      	asrs	r4, r4, #2
 80049a6:	42a6      	cmp	r6, r4
 80049a8:	d105      	bne.n	80049b6 <__libc_init_array+0x2e>
 80049aa:	bd70      	pop	{r4, r5, r6, pc}
 80049ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80049b0:	4798      	blx	r3
 80049b2:	3601      	adds	r6, #1
 80049b4:	e7ee      	b.n	8004994 <__libc_init_array+0xc>
 80049b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ba:	4798      	blx	r3
 80049bc:	3601      	adds	r6, #1
 80049be:	e7f2      	b.n	80049a6 <__libc_init_array+0x1e>
 80049c0:	08005558 	.word	0x08005558
 80049c4:	08005558 	.word	0x08005558
 80049c8:	08005558 	.word	0x08005558
 80049cc:	0800555c 	.word	0x0800555c

080049d0 <__retarget_lock_acquire_recursive>:
 80049d0:	4770      	bx	lr

080049d2 <__retarget_lock_release_recursive>:
 80049d2:	4770      	bx	lr

080049d4 <_free_r>:
 80049d4:	b538      	push	{r3, r4, r5, lr}
 80049d6:	4605      	mov	r5, r0
 80049d8:	2900      	cmp	r1, #0
 80049da:	d040      	beq.n	8004a5e <_free_r+0x8a>
 80049dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049e0:	1f0c      	subs	r4, r1, #4
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	bfb8      	it	lt
 80049e6:	18e4      	addlt	r4, r4, r3
 80049e8:	f000 f8dc 	bl	8004ba4 <__malloc_lock>
 80049ec:	4a1c      	ldr	r2, [pc, #112]	; (8004a60 <_free_r+0x8c>)
 80049ee:	6813      	ldr	r3, [r2, #0]
 80049f0:	b933      	cbnz	r3, 8004a00 <_free_r+0x2c>
 80049f2:	6063      	str	r3, [r4, #4]
 80049f4:	6014      	str	r4, [r2, #0]
 80049f6:	4628      	mov	r0, r5
 80049f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049fc:	f000 b8d8 	b.w	8004bb0 <__malloc_unlock>
 8004a00:	42a3      	cmp	r3, r4
 8004a02:	d908      	bls.n	8004a16 <_free_r+0x42>
 8004a04:	6820      	ldr	r0, [r4, #0]
 8004a06:	1821      	adds	r1, r4, r0
 8004a08:	428b      	cmp	r3, r1
 8004a0a:	bf01      	itttt	eq
 8004a0c:	6819      	ldreq	r1, [r3, #0]
 8004a0e:	685b      	ldreq	r3, [r3, #4]
 8004a10:	1809      	addeq	r1, r1, r0
 8004a12:	6021      	streq	r1, [r4, #0]
 8004a14:	e7ed      	b.n	80049f2 <_free_r+0x1e>
 8004a16:	461a      	mov	r2, r3
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	b10b      	cbz	r3, 8004a20 <_free_r+0x4c>
 8004a1c:	42a3      	cmp	r3, r4
 8004a1e:	d9fa      	bls.n	8004a16 <_free_r+0x42>
 8004a20:	6811      	ldr	r1, [r2, #0]
 8004a22:	1850      	adds	r0, r2, r1
 8004a24:	42a0      	cmp	r0, r4
 8004a26:	d10b      	bne.n	8004a40 <_free_r+0x6c>
 8004a28:	6820      	ldr	r0, [r4, #0]
 8004a2a:	4401      	add	r1, r0
 8004a2c:	1850      	adds	r0, r2, r1
 8004a2e:	4283      	cmp	r3, r0
 8004a30:	6011      	str	r1, [r2, #0]
 8004a32:	d1e0      	bne.n	80049f6 <_free_r+0x22>
 8004a34:	6818      	ldr	r0, [r3, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	4408      	add	r0, r1
 8004a3a:	6010      	str	r0, [r2, #0]
 8004a3c:	6053      	str	r3, [r2, #4]
 8004a3e:	e7da      	b.n	80049f6 <_free_r+0x22>
 8004a40:	d902      	bls.n	8004a48 <_free_r+0x74>
 8004a42:	230c      	movs	r3, #12
 8004a44:	602b      	str	r3, [r5, #0]
 8004a46:	e7d6      	b.n	80049f6 <_free_r+0x22>
 8004a48:	6820      	ldr	r0, [r4, #0]
 8004a4a:	1821      	adds	r1, r4, r0
 8004a4c:	428b      	cmp	r3, r1
 8004a4e:	bf01      	itttt	eq
 8004a50:	6819      	ldreq	r1, [r3, #0]
 8004a52:	685b      	ldreq	r3, [r3, #4]
 8004a54:	1809      	addeq	r1, r1, r0
 8004a56:	6021      	streq	r1, [r4, #0]
 8004a58:	6063      	str	r3, [r4, #4]
 8004a5a:	6054      	str	r4, [r2, #4]
 8004a5c:	e7cb      	b.n	80049f6 <_free_r+0x22>
 8004a5e:	bd38      	pop	{r3, r4, r5, pc}
 8004a60:	200004c4 	.word	0x200004c4

08004a64 <sbrk_aligned>:
 8004a64:	b570      	push	{r4, r5, r6, lr}
 8004a66:	4e0e      	ldr	r6, [pc, #56]	; (8004aa0 <sbrk_aligned+0x3c>)
 8004a68:	460c      	mov	r4, r1
 8004a6a:	6831      	ldr	r1, [r6, #0]
 8004a6c:	4605      	mov	r5, r0
 8004a6e:	b911      	cbnz	r1, 8004a76 <sbrk_aligned+0x12>
 8004a70:	f000 fbaa 	bl	80051c8 <_sbrk_r>
 8004a74:	6030      	str	r0, [r6, #0]
 8004a76:	4621      	mov	r1, r4
 8004a78:	4628      	mov	r0, r5
 8004a7a:	f000 fba5 	bl	80051c8 <_sbrk_r>
 8004a7e:	1c43      	adds	r3, r0, #1
 8004a80:	d00a      	beq.n	8004a98 <sbrk_aligned+0x34>
 8004a82:	1cc4      	adds	r4, r0, #3
 8004a84:	f024 0403 	bic.w	r4, r4, #3
 8004a88:	42a0      	cmp	r0, r4
 8004a8a:	d007      	beq.n	8004a9c <sbrk_aligned+0x38>
 8004a8c:	1a21      	subs	r1, r4, r0
 8004a8e:	4628      	mov	r0, r5
 8004a90:	f000 fb9a 	bl	80051c8 <_sbrk_r>
 8004a94:	3001      	adds	r0, #1
 8004a96:	d101      	bne.n	8004a9c <sbrk_aligned+0x38>
 8004a98:	f04f 34ff 	mov.w	r4, #4294967295
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	bd70      	pop	{r4, r5, r6, pc}
 8004aa0:	200004c8 	.word	0x200004c8

08004aa4 <_malloc_r>:
 8004aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004aa8:	1ccd      	adds	r5, r1, #3
 8004aaa:	f025 0503 	bic.w	r5, r5, #3
 8004aae:	3508      	adds	r5, #8
 8004ab0:	2d0c      	cmp	r5, #12
 8004ab2:	bf38      	it	cc
 8004ab4:	250c      	movcc	r5, #12
 8004ab6:	2d00      	cmp	r5, #0
 8004ab8:	4607      	mov	r7, r0
 8004aba:	db01      	blt.n	8004ac0 <_malloc_r+0x1c>
 8004abc:	42a9      	cmp	r1, r5
 8004abe:	d905      	bls.n	8004acc <_malloc_r+0x28>
 8004ac0:	230c      	movs	r3, #12
 8004ac2:	2600      	movs	r6, #0
 8004ac4:	603b      	str	r3, [r7, #0]
 8004ac6:	4630      	mov	r0, r6
 8004ac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004acc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004ba0 <_malloc_r+0xfc>
 8004ad0:	f000 f868 	bl	8004ba4 <__malloc_lock>
 8004ad4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ad8:	461c      	mov	r4, r3
 8004ada:	bb5c      	cbnz	r4, 8004b34 <_malloc_r+0x90>
 8004adc:	4629      	mov	r1, r5
 8004ade:	4638      	mov	r0, r7
 8004ae0:	f7ff ffc0 	bl	8004a64 <sbrk_aligned>
 8004ae4:	1c43      	adds	r3, r0, #1
 8004ae6:	4604      	mov	r4, r0
 8004ae8:	d155      	bne.n	8004b96 <_malloc_r+0xf2>
 8004aea:	f8d8 4000 	ldr.w	r4, [r8]
 8004aee:	4626      	mov	r6, r4
 8004af0:	2e00      	cmp	r6, #0
 8004af2:	d145      	bne.n	8004b80 <_malloc_r+0xdc>
 8004af4:	2c00      	cmp	r4, #0
 8004af6:	d048      	beq.n	8004b8a <_malloc_r+0xe6>
 8004af8:	6823      	ldr	r3, [r4, #0]
 8004afa:	4631      	mov	r1, r6
 8004afc:	4638      	mov	r0, r7
 8004afe:	eb04 0903 	add.w	r9, r4, r3
 8004b02:	f000 fb61 	bl	80051c8 <_sbrk_r>
 8004b06:	4581      	cmp	r9, r0
 8004b08:	d13f      	bne.n	8004b8a <_malloc_r+0xe6>
 8004b0a:	6821      	ldr	r1, [r4, #0]
 8004b0c:	4638      	mov	r0, r7
 8004b0e:	1a6d      	subs	r5, r5, r1
 8004b10:	4629      	mov	r1, r5
 8004b12:	f7ff ffa7 	bl	8004a64 <sbrk_aligned>
 8004b16:	3001      	adds	r0, #1
 8004b18:	d037      	beq.n	8004b8a <_malloc_r+0xe6>
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	442b      	add	r3, r5
 8004b1e:	6023      	str	r3, [r4, #0]
 8004b20:	f8d8 3000 	ldr.w	r3, [r8]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d038      	beq.n	8004b9a <_malloc_r+0xf6>
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	42a2      	cmp	r2, r4
 8004b2c:	d12b      	bne.n	8004b86 <_malloc_r+0xe2>
 8004b2e:	2200      	movs	r2, #0
 8004b30:	605a      	str	r2, [r3, #4]
 8004b32:	e00f      	b.n	8004b54 <_malloc_r+0xb0>
 8004b34:	6822      	ldr	r2, [r4, #0]
 8004b36:	1b52      	subs	r2, r2, r5
 8004b38:	d41f      	bmi.n	8004b7a <_malloc_r+0xd6>
 8004b3a:	2a0b      	cmp	r2, #11
 8004b3c:	d917      	bls.n	8004b6e <_malloc_r+0xca>
 8004b3e:	1961      	adds	r1, r4, r5
 8004b40:	42a3      	cmp	r3, r4
 8004b42:	6025      	str	r5, [r4, #0]
 8004b44:	bf18      	it	ne
 8004b46:	6059      	strne	r1, [r3, #4]
 8004b48:	6863      	ldr	r3, [r4, #4]
 8004b4a:	bf08      	it	eq
 8004b4c:	f8c8 1000 	streq.w	r1, [r8]
 8004b50:	5162      	str	r2, [r4, r5]
 8004b52:	604b      	str	r3, [r1, #4]
 8004b54:	4638      	mov	r0, r7
 8004b56:	f104 060b 	add.w	r6, r4, #11
 8004b5a:	f000 f829 	bl	8004bb0 <__malloc_unlock>
 8004b5e:	f026 0607 	bic.w	r6, r6, #7
 8004b62:	1d23      	adds	r3, r4, #4
 8004b64:	1af2      	subs	r2, r6, r3
 8004b66:	d0ae      	beq.n	8004ac6 <_malloc_r+0x22>
 8004b68:	1b9b      	subs	r3, r3, r6
 8004b6a:	50a3      	str	r3, [r4, r2]
 8004b6c:	e7ab      	b.n	8004ac6 <_malloc_r+0x22>
 8004b6e:	42a3      	cmp	r3, r4
 8004b70:	6862      	ldr	r2, [r4, #4]
 8004b72:	d1dd      	bne.n	8004b30 <_malloc_r+0x8c>
 8004b74:	f8c8 2000 	str.w	r2, [r8]
 8004b78:	e7ec      	b.n	8004b54 <_malloc_r+0xb0>
 8004b7a:	4623      	mov	r3, r4
 8004b7c:	6864      	ldr	r4, [r4, #4]
 8004b7e:	e7ac      	b.n	8004ada <_malloc_r+0x36>
 8004b80:	4634      	mov	r4, r6
 8004b82:	6876      	ldr	r6, [r6, #4]
 8004b84:	e7b4      	b.n	8004af0 <_malloc_r+0x4c>
 8004b86:	4613      	mov	r3, r2
 8004b88:	e7cc      	b.n	8004b24 <_malloc_r+0x80>
 8004b8a:	230c      	movs	r3, #12
 8004b8c:	4638      	mov	r0, r7
 8004b8e:	603b      	str	r3, [r7, #0]
 8004b90:	f000 f80e 	bl	8004bb0 <__malloc_unlock>
 8004b94:	e797      	b.n	8004ac6 <_malloc_r+0x22>
 8004b96:	6025      	str	r5, [r4, #0]
 8004b98:	e7dc      	b.n	8004b54 <_malloc_r+0xb0>
 8004b9a:	605b      	str	r3, [r3, #4]
 8004b9c:	deff      	udf	#255	; 0xff
 8004b9e:	bf00      	nop
 8004ba0:	200004c4 	.word	0x200004c4

08004ba4 <__malloc_lock>:
 8004ba4:	4801      	ldr	r0, [pc, #4]	; (8004bac <__malloc_lock+0x8>)
 8004ba6:	f7ff bf13 	b.w	80049d0 <__retarget_lock_acquire_recursive>
 8004baa:	bf00      	nop
 8004bac:	200004c0 	.word	0x200004c0

08004bb0 <__malloc_unlock>:
 8004bb0:	4801      	ldr	r0, [pc, #4]	; (8004bb8 <__malloc_unlock+0x8>)
 8004bb2:	f7ff bf0e 	b.w	80049d2 <__retarget_lock_release_recursive>
 8004bb6:	bf00      	nop
 8004bb8:	200004c0 	.word	0x200004c0

08004bbc <__ssputs_r>:
 8004bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bc0:	461f      	mov	r7, r3
 8004bc2:	688e      	ldr	r6, [r1, #8]
 8004bc4:	4682      	mov	sl, r0
 8004bc6:	42be      	cmp	r6, r7
 8004bc8:	460c      	mov	r4, r1
 8004bca:	4690      	mov	r8, r2
 8004bcc:	680b      	ldr	r3, [r1, #0]
 8004bce:	d82c      	bhi.n	8004c2a <__ssputs_r+0x6e>
 8004bd0:	898a      	ldrh	r2, [r1, #12]
 8004bd2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004bd6:	d026      	beq.n	8004c26 <__ssputs_r+0x6a>
 8004bd8:	6965      	ldr	r5, [r4, #20]
 8004bda:	6909      	ldr	r1, [r1, #16]
 8004bdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004be0:	eba3 0901 	sub.w	r9, r3, r1
 8004be4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004be8:	1c7b      	adds	r3, r7, #1
 8004bea:	444b      	add	r3, r9
 8004bec:	106d      	asrs	r5, r5, #1
 8004bee:	429d      	cmp	r5, r3
 8004bf0:	bf38      	it	cc
 8004bf2:	461d      	movcc	r5, r3
 8004bf4:	0553      	lsls	r3, r2, #21
 8004bf6:	d527      	bpl.n	8004c48 <__ssputs_r+0x8c>
 8004bf8:	4629      	mov	r1, r5
 8004bfa:	f7ff ff53 	bl	8004aa4 <_malloc_r>
 8004bfe:	4606      	mov	r6, r0
 8004c00:	b360      	cbz	r0, 8004c5c <__ssputs_r+0xa0>
 8004c02:	464a      	mov	r2, r9
 8004c04:	6921      	ldr	r1, [r4, #16]
 8004c06:	f000 fafd 	bl	8005204 <memcpy>
 8004c0a:	89a3      	ldrh	r3, [r4, #12]
 8004c0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c14:	81a3      	strh	r3, [r4, #12]
 8004c16:	6126      	str	r6, [r4, #16]
 8004c18:	444e      	add	r6, r9
 8004c1a:	6026      	str	r6, [r4, #0]
 8004c1c:	463e      	mov	r6, r7
 8004c1e:	6165      	str	r5, [r4, #20]
 8004c20:	eba5 0509 	sub.w	r5, r5, r9
 8004c24:	60a5      	str	r5, [r4, #8]
 8004c26:	42be      	cmp	r6, r7
 8004c28:	d900      	bls.n	8004c2c <__ssputs_r+0x70>
 8004c2a:	463e      	mov	r6, r7
 8004c2c:	4632      	mov	r2, r6
 8004c2e:	4641      	mov	r1, r8
 8004c30:	6820      	ldr	r0, [r4, #0]
 8004c32:	f000 faaf 	bl	8005194 <memmove>
 8004c36:	2000      	movs	r0, #0
 8004c38:	68a3      	ldr	r3, [r4, #8]
 8004c3a:	1b9b      	subs	r3, r3, r6
 8004c3c:	60a3      	str	r3, [r4, #8]
 8004c3e:	6823      	ldr	r3, [r4, #0]
 8004c40:	4433      	add	r3, r6
 8004c42:	6023      	str	r3, [r4, #0]
 8004c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c48:	462a      	mov	r2, r5
 8004c4a:	f000 fae9 	bl	8005220 <_realloc_r>
 8004c4e:	4606      	mov	r6, r0
 8004c50:	2800      	cmp	r0, #0
 8004c52:	d1e0      	bne.n	8004c16 <__ssputs_r+0x5a>
 8004c54:	4650      	mov	r0, sl
 8004c56:	6921      	ldr	r1, [r4, #16]
 8004c58:	f7ff febc 	bl	80049d4 <_free_r>
 8004c5c:	230c      	movs	r3, #12
 8004c5e:	f8ca 3000 	str.w	r3, [sl]
 8004c62:	89a3      	ldrh	r3, [r4, #12]
 8004c64:	f04f 30ff 	mov.w	r0, #4294967295
 8004c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c6c:	81a3      	strh	r3, [r4, #12]
 8004c6e:	e7e9      	b.n	8004c44 <__ssputs_r+0x88>

08004c70 <_svfiprintf_r>:
 8004c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c74:	4698      	mov	r8, r3
 8004c76:	898b      	ldrh	r3, [r1, #12]
 8004c78:	4607      	mov	r7, r0
 8004c7a:	061b      	lsls	r3, r3, #24
 8004c7c:	460d      	mov	r5, r1
 8004c7e:	4614      	mov	r4, r2
 8004c80:	b09d      	sub	sp, #116	; 0x74
 8004c82:	d50e      	bpl.n	8004ca2 <_svfiprintf_r+0x32>
 8004c84:	690b      	ldr	r3, [r1, #16]
 8004c86:	b963      	cbnz	r3, 8004ca2 <_svfiprintf_r+0x32>
 8004c88:	2140      	movs	r1, #64	; 0x40
 8004c8a:	f7ff ff0b 	bl	8004aa4 <_malloc_r>
 8004c8e:	6028      	str	r0, [r5, #0]
 8004c90:	6128      	str	r0, [r5, #16]
 8004c92:	b920      	cbnz	r0, 8004c9e <_svfiprintf_r+0x2e>
 8004c94:	230c      	movs	r3, #12
 8004c96:	603b      	str	r3, [r7, #0]
 8004c98:	f04f 30ff 	mov.w	r0, #4294967295
 8004c9c:	e0d0      	b.n	8004e40 <_svfiprintf_r+0x1d0>
 8004c9e:	2340      	movs	r3, #64	; 0x40
 8004ca0:	616b      	str	r3, [r5, #20]
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ca6:	2320      	movs	r3, #32
 8004ca8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cac:	2330      	movs	r3, #48	; 0x30
 8004cae:	f04f 0901 	mov.w	r9, #1
 8004cb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cb6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004e58 <_svfiprintf_r+0x1e8>
 8004cba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cbe:	4623      	mov	r3, r4
 8004cc0:	469a      	mov	sl, r3
 8004cc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cc6:	b10a      	cbz	r2, 8004ccc <_svfiprintf_r+0x5c>
 8004cc8:	2a25      	cmp	r2, #37	; 0x25
 8004cca:	d1f9      	bne.n	8004cc0 <_svfiprintf_r+0x50>
 8004ccc:	ebba 0b04 	subs.w	fp, sl, r4
 8004cd0:	d00b      	beq.n	8004cea <_svfiprintf_r+0x7a>
 8004cd2:	465b      	mov	r3, fp
 8004cd4:	4622      	mov	r2, r4
 8004cd6:	4629      	mov	r1, r5
 8004cd8:	4638      	mov	r0, r7
 8004cda:	f7ff ff6f 	bl	8004bbc <__ssputs_r>
 8004cde:	3001      	adds	r0, #1
 8004ce0:	f000 80a9 	beq.w	8004e36 <_svfiprintf_r+0x1c6>
 8004ce4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ce6:	445a      	add	r2, fp
 8004ce8:	9209      	str	r2, [sp, #36]	; 0x24
 8004cea:	f89a 3000 	ldrb.w	r3, [sl]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 80a1 	beq.w	8004e36 <_svfiprintf_r+0x1c6>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8004cfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cfe:	f10a 0a01 	add.w	sl, sl, #1
 8004d02:	9304      	str	r3, [sp, #16]
 8004d04:	9307      	str	r3, [sp, #28]
 8004d06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d0a:	931a      	str	r3, [sp, #104]	; 0x68
 8004d0c:	4654      	mov	r4, sl
 8004d0e:	2205      	movs	r2, #5
 8004d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d14:	4850      	ldr	r0, [pc, #320]	; (8004e58 <_svfiprintf_r+0x1e8>)
 8004d16:	f000 fa67 	bl	80051e8 <memchr>
 8004d1a:	9a04      	ldr	r2, [sp, #16]
 8004d1c:	b9d8      	cbnz	r0, 8004d56 <_svfiprintf_r+0xe6>
 8004d1e:	06d0      	lsls	r0, r2, #27
 8004d20:	bf44      	itt	mi
 8004d22:	2320      	movmi	r3, #32
 8004d24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d28:	0711      	lsls	r1, r2, #28
 8004d2a:	bf44      	itt	mi
 8004d2c:	232b      	movmi	r3, #43	; 0x2b
 8004d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d32:	f89a 3000 	ldrb.w	r3, [sl]
 8004d36:	2b2a      	cmp	r3, #42	; 0x2a
 8004d38:	d015      	beq.n	8004d66 <_svfiprintf_r+0xf6>
 8004d3a:	4654      	mov	r4, sl
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	f04f 0c0a 	mov.w	ip, #10
 8004d42:	9a07      	ldr	r2, [sp, #28]
 8004d44:	4621      	mov	r1, r4
 8004d46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d4a:	3b30      	subs	r3, #48	; 0x30
 8004d4c:	2b09      	cmp	r3, #9
 8004d4e:	d94d      	bls.n	8004dec <_svfiprintf_r+0x17c>
 8004d50:	b1b0      	cbz	r0, 8004d80 <_svfiprintf_r+0x110>
 8004d52:	9207      	str	r2, [sp, #28]
 8004d54:	e014      	b.n	8004d80 <_svfiprintf_r+0x110>
 8004d56:	eba0 0308 	sub.w	r3, r0, r8
 8004d5a:	fa09 f303 	lsl.w	r3, r9, r3
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	46a2      	mov	sl, r4
 8004d62:	9304      	str	r3, [sp, #16]
 8004d64:	e7d2      	b.n	8004d0c <_svfiprintf_r+0x9c>
 8004d66:	9b03      	ldr	r3, [sp, #12]
 8004d68:	1d19      	adds	r1, r3, #4
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	9103      	str	r1, [sp, #12]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	bfbb      	ittet	lt
 8004d72:	425b      	neglt	r3, r3
 8004d74:	f042 0202 	orrlt.w	r2, r2, #2
 8004d78:	9307      	strge	r3, [sp, #28]
 8004d7a:	9307      	strlt	r3, [sp, #28]
 8004d7c:	bfb8      	it	lt
 8004d7e:	9204      	strlt	r2, [sp, #16]
 8004d80:	7823      	ldrb	r3, [r4, #0]
 8004d82:	2b2e      	cmp	r3, #46	; 0x2e
 8004d84:	d10c      	bne.n	8004da0 <_svfiprintf_r+0x130>
 8004d86:	7863      	ldrb	r3, [r4, #1]
 8004d88:	2b2a      	cmp	r3, #42	; 0x2a
 8004d8a:	d134      	bne.n	8004df6 <_svfiprintf_r+0x186>
 8004d8c:	9b03      	ldr	r3, [sp, #12]
 8004d8e:	3402      	adds	r4, #2
 8004d90:	1d1a      	adds	r2, r3, #4
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	9203      	str	r2, [sp, #12]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	bfb8      	it	lt
 8004d9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d9e:	9305      	str	r3, [sp, #20]
 8004da0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004e5c <_svfiprintf_r+0x1ec>
 8004da4:	2203      	movs	r2, #3
 8004da6:	4650      	mov	r0, sl
 8004da8:	7821      	ldrb	r1, [r4, #0]
 8004daa:	f000 fa1d 	bl	80051e8 <memchr>
 8004dae:	b138      	cbz	r0, 8004dc0 <_svfiprintf_r+0x150>
 8004db0:	2240      	movs	r2, #64	; 0x40
 8004db2:	9b04      	ldr	r3, [sp, #16]
 8004db4:	eba0 000a 	sub.w	r0, r0, sl
 8004db8:	4082      	lsls	r2, r0
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	3401      	adds	r4, #1
 8004dbe:	9304      	str	r3, [sp, #16]
 8004dc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dc4:	2206      	movs	r2, #6
 8004dc6:	4826      	ldr	r0, [pc, #152]	; (8004e60 <_svfiprintf_r+0x1f0>)
 8004dc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004dcc:	f000 fa0c 	bl	80051e8 <memchr>
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	d038      	beq.n	8004e46 <_svfiprintf_r+0x1d6>
 8004dd4:	4b23      	ldr	r3, [pc, #140]	; (8004e64 <_svfiprintf_r+0x1f4>)
 8004dd6:	bb1b      	cbnz	r3, 8004e20 <_svfiprintf_r+0x1b0>
 8004dd8:	9b03      	ldr	r3, [sp, #12]
 8004dda:	3307      	adds	r3, #7
 8004ddc:	f023 0307 	bic.w	r3, r3, #7
 8004de0:	3308      	adds	r3, #8
 8004de2:	9303      	str	r3, [sp, #12]
 8004de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004de6:	4433      	add	r3, r6
 8004de8:	9309      	str	r3, [sp, #36]	; 0x24
 8004dea:	e768      	b.n	8004cbe <_svfiprintf_r+0x4e>
 8004dec:	460c      	mov	r4, r1
 8004dee:	2001      	movs	r0, #1
 8004df0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004df4:	e7a6      	b.n	8004d44 <_svfiprintf_r+0xd4>
 8004df6:	2300      	movs	r3, #0
 8004df8:	f04f 0c0a 	mov.w	ip, #10
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	3401      	adds	r4, #1
 8004e00:	9305      	str	r3, [sp, #20]
 8004e02:	4620      	mov	r0, r4
 8004e04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e08:	3a30      	subs	r2, #48	; 0x30
 8004e0a:	2a09      	cmp	r2, #9
 8004e0c:	d903      	bls.n	8004e16 <_svfiprintf_r+0x1a6>
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0c6      	beq.n	8004da0 <_svfiprintf_r+0x130>
 8004e12:	9105      	str	r1, [sp, #20]
 8004e14:	e7c4      	b.n	8004da0 <_svfiprintf_r+0x130>
 8004e16:	4604      	mov	r4, r0
 8004e18:	2301      	movs	r3, #1
 8004e1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e1e:	e7f0      	b.n	8004e02 <_svfiprintf_r+0x192>
 8004e20:	ab03      	add	r3, sp, #12
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	462a      	mov	r2, r5
 8004e26:	4638      	mov	r0, r7
 8004e28:	4b0f      	ldr	r3, [pc, #60]	; (8004e68 <_svfiprintf_r+0x1f8>)
 8004e2a:	a904      	add	r1, sp, #16
 8004e2c:	f3af 8000 	nop.w
 8004e30:	1c42      	adds	r2, r0, #1
 8004e32:	4606      	mov	r6, r0
 8004e34:	d1d6      	bne.n	8004de4 <_svfiprintf_r+0x174>
 8004e36:	89ab      	ldrh	r3, [r5, #12]
 8004e38:	065b      	lsls	r3, r3, #25
 8004e3a:	f53f af2d 	bmi.w	8004c98 <_svfiprintf_r+0x28>
 8004e3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e40:	b01d      	add	sp, #116	; 0x74
 8004e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e46:	ab03      	add	r3, sp, #12
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	462a      	mov	r2, r5
 8004e4c:	4638      	mov	r0, r7
 8004e4e:	4b06      	ldr	r3, [pc, #24]	; (8004e68 <_svfiprintf_r+0x1f8>)
 8004e50:	a904      	add	r1, sp, #16
 8004e52:	f000 f87d 	bl	8004f50 <_printf_i>
 8004e56:	e7eb      	b.n	8004e30 <_svfiprintf_r+0x1c0>
 8004e58:	08005522 	.word	0x08005522
 8004e5c:	08005528 	.word	0x08005528
 8004e60:	0800552c 	.word	0x0800552c
 8004e64:	00000000 	.word	0x00000000
 8004e68:	08004bbd 	.word	0x08004bbd

08004e6c <_printf_common>:
 8004e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e70:	4616      	mov	r6, r2
 8004e72:	4699      	mov	r9, r3
 8004e74:	688a      	ldr	r2, [r1, #8]
 8004e76:	690b      	ldr	r3, [r1, #16]
 8004e78:	4607      	mov	r7, r0
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	bfb8      	it	lt
 8004e7e:	4613      	movlt	r3, r2
 8004e80:	6033      	str	r3, [r6, #0]
 8004e82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e86:	460c      	mov	r4, r1
 8004e88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e8c:	b10a      	cbz	r2, 8004e92 <_printf_common+0x26>
 8004e8e:	3301      	adds	r3, #1
 8004e90:	6033      	str	r3, [r6, #0]
 8004e92:	6823      	ldr	r3, [r4, #0]
 8004e94:	0699      	lsls	r1, r3, #26
 8004e96:	bf42      	ittt	mi
 8004e98:	6833      	ldrmi	r3, [r6, #0]
 8004e9a:	3302      	addmi	r3, #2
 8004e9c:	6033      	strmi	r3, [r6, #0]
 8004e9e:	6825      	ldr	r5, [r4, #0]
 8004ea0:	f015 0506 	ands.w	r5, r5, #6
 8004ea4:	d106      	bne.n	8004eb4 <_printf_common+0x48>
 8004ea6:	f104 0a19 	add.w	sl, r4, #25
 8004eaa:	68e3      	ldr	r3, [r4, #12]
 8004eac:	6832      	ldr	r2, [r6, #0]
 8004eae:	1a9b      	subs	r3, r3, r2
 8004eb0:	42ab      	cmp	r3, r5
 8004eb2:	dc2b      	bgt.n	8004f0c <_printf_common+0xa0>
 8004eb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004eb8:	1e13      	subs	r3, r2, #0
 8004eba:	6822      	ldr	r2, [r4, #0]
 8004ebc:	bf18      	it	ne
 8004ebe:	2301      	movne	r3, #1
 8004ec0:	0692      	lsls	r2, r2, #26
 8004ec2:	d430      	bmi.n	8004f26 <_printf_common+0xba>
 8004ec4:	4649      	mov	r1, r9
 8004ec6:	4638      	mov	r0, r7
 8004ec8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ecc:	47c0      	blx	r8
 8004ece:	3001      	adds	r0, #1
 8004ed0:	d023      	beq.n	8004f1a <_printf_common+0xae>
 8004ed2:	6823      	ldr	r3, [r4, #0]
 8004ed4:	6922      	ldr	r2, [r4, #16]
 8004ed6:	f003 0306 	and.w	r3, r3, #6
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	bf14      	ite	ne
 8004ede:	2500      	movne	r5, #0
 8004ee0:	6833      	ldreq	r3, [r6, #0]
 8004ee2:	f04f 0600 	mov.w	r6, #0
 8004ee6:	bf08      	it	eq
 8004ee8:	68e5      	ldreq	r5, [r4, #12]
 8004eea:	f104 041a 	add.w	r4, r4, #26
 8004eee:	bf08      	it	eq
 8004ef0:	1aed      	subeq	r5, r5, r3
 8004ef2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004ef6:	bf08      	it	eq
 8004ef8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004efc:	4293      	cmp	r3, r2
 8004efe:	bfc4      	itt	gt
 8004f00:	1a9b      	subgt	r3, r3, r2
 8004f02:	18ed      	addgt	r5, r5, r3
 8004f04:	42b5      	cmp	r5, r6
 8004f06:	d11a      	bne.n	8004f3e <_printf_common+0xd2>
 8004f08:	2000      	movs	r0, #0
 8004f0a:	e008      	b.n	8004f1e <_printf_common+0xb2>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	4652      	mov	r2, sl
 8004f10:	4649      	mov	r1, r9
 8004f12:	4638      	mov	r0, r7
 8004f14:	47c0      	blx	r8
 8004f16:	3001      	adds	r0, #1
 8004f18:	d103      	bne.n	8004f22 <_printf_common+0xb6>
 8004f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f22:	3501      	adds	r5, #1
 8004f24:	e7c1      	b.n	8004eaa <_printf_common+0x3e>
 8004f26:	2030      	movs	r0, #48	; 0x30
 8004f28:	18e1      	adds	r1, r4, r3
 8004f2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f34:	4422      	add	r2, r4
 8004f36:	3302      	adds	r3, #2
 8004f38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f3c:	e7c2      	b.n	8004ec4 <_printf_common+0x58>
 8004f3e:	2301      	movs	r3, #1
 8004f40:	4622      	mov	r2, r4
 8004f42:	4649      	mov	r1, r9
 8004f44:	4638      	mov	r0, r7
 8004f46:	47c0      	blx	r8
 8004f48:	3001      	adds	r0, #1
 8004f4a:	d0e6      	beq.n	8004f1a <_printf_common+0xae>
 8004f4c:	3601      	adds	r6, #1
 8004f4e:	e7d9      	b.n	8004f04 <_printf_common+0x98>

08004f50 <_printf_i>:
 8004f50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f54:	7e0f      	ldrb	r7, [r1, #24]
 8004f56:	4691      	mov	r9, r2
 8004f58:	2f78      	cmp	r7, #120	; 0x78
 8004f5a:	4680      	mov	r8, r0
 8004f5c:	460c      	mov	r4, r1
 8004f5e:	469a      	mov	sl, r3
 8004f60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f66:	d807      	bhi.n	8004f78 <_printf_i+0x28>
 8004f68:	2f62      	cmp	r7, #98	; 0x62
 8004f6a:	d80a      	bhi.n	8004f82 <_printf_i+0x32>
 8004f6c:	2f00      	cmp	r7, #0
 8004f6e:	f000 80d5 	beq.w	800511c <_printf_i+0x1cc>
 8004f72:	2f58      	cmp	r7, #88	; 0x58
 8004f74:	f000 80c1 	beq.w	80050fa <_printf_i+0x1aa>
 8004f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f80:	e03a      	b.n	8004ff8 <_printf_i+0xa8>
 8004f82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f86:	2b15      	cmp	r3, #21
 8004f88:	d8f6      	bhi.n	8004f78 <_printf_i+0x28>
 8004f8a:	a101      	add	r1, pc, #4	; (adr r1, 8004f90 <_printf_i+0x40>)
 8004f8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f90:	08004fe9 	.word	0x08004fe9
 8004f94:	08004ffd 	.word	0x08004ffd
 8004f98:	08004f79 	.word	0x08004f79
 8004f9c:	08004f79 	.word	0x08004f79
 8004fa0:	08004f79 	.word	0x08004f79
 8004fa4:	08004f79 	.word	0x08004f79
 8004fa8:	08004ffd 	.word	0x08004ffd
 8004fac:	08004f79 	.word	0x08004f79
 8004fb0:	08004f79 	.word	0x08004f79
 8004fb4:	08004f79 	.word	0x08004f79
 8004fb8:	08004f79 	.word	0x08004f79
 8004fbc:	08005103 	.word	0x08005103
 8004fc0:	08005029 	.word	0x08005029
 8004fc4:	080050bd 	.word	0x080050bd
 8004fc8:	08004f79 	.word	0x08004f79
 8004fcc:	08004f79 	.word	0x08004f79
 8004fd0:	08005125 	.word	0x08005125
 8004fd4:	08004f79 	.word	0x08004f79
 8004fd8:	08005029 	.word	0x08005029
 8004fdc:	08004f79 	.word	0x08004f79
 8004fe0:	08004f79 	.word	0x08004f79
 8004fe4:	080050c5 	.word	0x080050c5
 8004fe8:	682b      	ldr	r3, [r5, #0]
 8004fea:	1d1a      	adds	r2, r3, #4
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	602a      	str	r2, [r5, #0]
 8004ff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ff4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e0a0      	b.n	800513e <_printf_i+0x1ee>
 8004ffc:	6820      	ldr	r0, [r4, #0]
 8004ffe:	682b      	ldr	r3, [r5, #0]
 8005000:	0607      	lsls	r7, r0, #24
 8005002:	f103 0104 	add.w	r1, r3, #4
 8005006:	6029      	str	r1, [r5, #0]
 8005008:	d501      	bpl.n	800500e <_printf_i+0xbe>
 800500a:	681e      	ldr	r6, [r3, #0]
 800500c:	e003      	b.n	8005016 <_printf_i+0xc6>
 800500e:	0646      	lsls	r6, r0, #25
 8005010:	d5fb      	bpl.n	800500a <_printf_i+0xba>
 8005012:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005016:	2e00      	cmp	r6, #0
 8005018:	da03      	bge.n	8005022 <_printf_i+0xd2>
 800501a:	232d      	movs	r3, #45	; 0x2d
 800501c:	4276      	negs	r6, r6
 800501e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005022:	230a      	movs	r3, #10
 8005024:	4859      	ldr	r0, [pc, #356]	; (800518c <_printf_i+0x23c>)
 8005026:	e012      	b.n	800504e <_printf_i+0xfe>
 8005028:	682b      	ldr	r3, [r5, #0]
 800502a:	6820      	ldr	r0, [r4, #0]
 800502c:	1d19      	adds	r1, r3, #4
 800502e:	6029      	str	r1, [r5, #0]
 8005030:	0605      	lsls	r5, r0, #24
 8005032:	d501      	bpl.n	8005038 <_printf_i+0xe8>
 8005034:	681e      	ldr	r6, [r3, #0]
 8005036:	e002      	b.n	800503e <_printf_i+0xee>
 8005038:	0641      	lsls	r1, r0, #25
 800503a:	d5fb      	bpl.n	8005034 <_printf_i+0xe4>
 800503c:	881e      	ldrh	r6, [r3, #0]
 800503e:	2f6f      	cmp	r7, #111	; 0x6f
 8005040:	bf0c      	ite	eq
 8005042:	2308      	moveq	r3, #8
 8005044:	230a      	movne	r3, #10
 8005046:	4851      	ldr	r0, [pc, #324]	; (800518c <_printf_i+0x23c>)
 8005048:	2100      	movs	r1, #0
 800504a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800504e:	6865      	ldr	r5, [r4, #4]
 8005050:	2d00      	cmp	r5, #0
 8005052:	bfa8      	it	ge
 8005054:	6821      	ldrge	r1, [r4, #0]
 8005056:	60a5      	str	r5, [r4, #8]
 8005058:	bfa4      	itt	ge
 800505a:	f021 0104 	bicge.w	r1, r1, #4
 800505e:	6021      	strge	r1, [r4, #0]
 8005060:	b90e      	cbnz	r6, 8005066 <_printf_i+0x116>
 8005062:	2d00      	cmp	r5, #0
 8005064:	d04b      	beq.n	80050fe <_printf_i+0x1ae>
 8005066:	4615      	mov	r5, r2
 8005068:	fbb6 f1f3 	udiv	r1, r6, r3
 800506c:	fb03 6711 	mls	r7, r3, r1, r6
 8005070:	5dc7      	ldrb	r7, [r0, r7]
 8005072:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005076:	4637      	mov	r7, r6
 8005078:	42bb      	cmp	r3, r7
 800507a:	460e      	mov	r6, r1
 800507c:	d9f4      	bls.n	8005068 <_printf_i+0x118>
 800507e:	2b08      	cmp	r3, #8
 8005080:	d10b      	bne.n	800509a <_printf_i+0x14a>
 8005082:	6823      	ldr	r3, [r4, #0]
 8005084:	07de      	lsls	r6, r3, #31
 8005086:	d508      	bpl.n	800509a <_printf_i+0x14a>
 8005088:	6923      	ldr	r3, [r4, #16]
 800508a:	6861      	ldr	r1, [r4, #4]
 800508c:	4299      	cmp	r1, r3
 800508e:	bfde      	ittt	le
 8005090:	2330      	movle	r3, #48	; 0x30
 8005092:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005096:	f105 35ff 	addle.w	r5, r5, #4294967295
 800509a:	1b52      	subs	r2, r2, r5
 800509c:	6122      	str	r2, [r4, #16]
 800509e:	464b      	mov	r3, r9
 80050a0:	4621      	mov	r1, r4
 80050a2:	4640      	mov	r0, r8
 80050a4:	f8cd a000 	str.w	sl, [sp]
 80050a8:	aa03      	add	r2, sp, #12
 80050aa:	f7ff fedf 	bl	8004e6c <_printf_common>
 80050ae:	3001      	adds	r0, #1
 80050b0:	d14a      	bne.n	8005148 <_printf_i+0x1f8>
 80050b2:	f04f 30ff 	mov.w	r0, #4294967295
 80050b6:	b004      	add	sp, #16
 80050b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050bc:	6823      	ldr	r3, [r4, #0]
 80050be:	f043 0320 	orr.w	r3, r3, #32
 80050c2:	6023      	str	r3, [r4, #0]
 80050c4:	2778      	movs	r7, #120	; 0x78
 80050c6:	4832      	ldr	r0, [pc, #200]	; (8005190 <_printf_i+0x240>)
 80050c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80050cc:	6823      	ldr	r3, [r4, #0]
 80050ce:	6829      	ldr	r1, [r5, #0]
 80050d0:	061f      	lsls	r7, r3, #24
 80050d2:	f851 6b04 	ldr.w	r6, [r1], #4
 80050d6:	d402      	bmi.n	80050de <_printf_i+0x18e>
 80050d8:	065f      	lsls	r7, r3, #25
 80050da:	bf48      	it	mi
 80050dc:	b2b6      	uxthmi	r6, r6
 80050de:	07df      	lsls	r7, r3, #31
 80050e0:	bf48      	it	mi
 80050e2:	f043 0320 	orrmi.w	r3, r3, #32
 80050e6:	6029      	str	r1, [r5, #0]
 80050e8:	bf48      	it	mi
 80050ea:	6023      	strmi	r3, [r4, #0]
 80050ec:	b91e      	cbnz	r6, 80050f6 <_printf_i+0x1a6>
 80050ee:	6823      	ldr	r3, [r4, #0]
 80050f0:	f023 0320 	bic.w	r3, r3, #32
 80050f4:	6023      	str	r3, [r4, #0]
 80050f6:	2310      	movs	r3, #16
 80050f8:	e7a6      	b.n	8005048 <_printf_i+0xf8>
 80050fa:	4824      	ldr	r0, [pc, #144]	; (800518c <_printf_i+0x23c>)
 80050fc:	e7e4      	b.n	80050c8 <_printf_i+0x178>
 80050fe:	4615      	mov	r5, r2
 8005100:	e7bd      	b.n	800507e <_printf_i+0x12e>
 8005102:	682b      	ldr	r3, [r5, #0]
 8005104:	6826      	ldr	r6, [r4, #0]
 8005106:	1d18      	adds	r0, r3, #4
 8005108:	6961      	ldr	r1, [r4, #20]
 800510a:	6028      	str	r0, [r5, #0]
 800510c:	0635      	lsls	r5, r6, #24
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	d501      	bpl.n	8005116 <_printf_i+0x1c6>
 8005112:	6019      	str	r1, [r3, #0]
 8005114:	e002      	b.n	800511c <_printf_i+0x1cc>
 8005116:	0670      	lsls	r0, r6, #25
 8005118:	d5fb      	bpl.n	8005112 <_printf_i+0x1c2>
 800511a:	8019      	strh	r1, [r3, #0]
 800511c:	2300      	movs	r3, #0
 800511e:	4615      	mov	r5, r2
 8005120:	6123      	str	r3, [r4, #16]
 8005122:	e7bc      	b.n	800509e <_printf_i+0x14e>
 8005124:	682b      	ldr	r3, [r5, #0]
 8005126:	2100      	movs	r1, #0
 8005128:	1d1a      	adds	r2, r3, #4
 800512a:	602a      	str	r2, [r5, #0]
 800512c:	681d      	ldr	r5, [r3, #0]
 800512e:	6862      	ldr	r2, [r4, #4]
 8005130:	4628      	mov	r0, r5
 8005132:	f000 f859 	bl	80051e8 <memchr>
 8005136:	b108      	cbz	r0, 800513c <_printf_i+0x1ec>
 8005138:	1b40      	subs	r0, r0, r5
 800513a:	6060      	str	r0, [r4, #4]
 800513c:	6863      	ldr	r3, [r4, #4]
 800513e:	6123      	str	r3, [r4, #16]
 8005140:	2300      	movs	r3, #0
 8005142:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005146:	e7aa      	b.n	800509e <_printf_i+0x14e>
 8005148:	462a      	mov	r2, r5
 800514a:	4649      	mov	r1, r9
 800514c:	4640      	mov	r0, r8
 800514e:	6923      	ldr	r3, [r4, #16]
 8005150:	47d0      	blx	sl
 8005152:	3001      	adds	r0, #1
 8005154:	d0ad      	beq.n	80050b2 <_printf_i+0x162>
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	079b      	lsls	r3, r3, #30
 800515a:	d413      	bmi.n	8005184 <_printf_i+0x234>
 800515c:	68e0      	ldr	r0, [r4, #12]
 800515e:	9b03      	ldr	r3, [sp, #12]
 8005160:	4298      	cmp	r0, r3
 8005162:	bfb8      	it	lt
 8005164:	4618      	movlt	r0, r3
 8005166:	e7a6      	b.n	80050b6 <_printf_i+0x166>
 8005168:	2301      	movs	r3, #1
 800516a:	4632      	mov	r2, r6
 800516c:	4649      	mov	r1, r9
 800516e:	4640      	mov	r0, r8
 8005170:	47d0      	blx	sl
 8005172:	3001      	adds	r0, #1
 8005174:	d09d      	beq.n	80050b2 <_printf_i+0x162>
 8005176:	3501      	adds	r5, #1
 8005178:	68e3      	ldr	r3, [r4, #12]
 800517a:	9903      	ldr	r1, [sp, #12]
 800517c:	1a5b      	subs	r3, r3, r1
 800517e:	42ab      	cmp	r3, r5
 8005180:	dcf2      	bgt.n	8005168 <_printf_i+0x218>
 8005182:	e7eb      	b.n	800515c <_printf_i+0x20c>
 8005184:	2500      	movs	r5, #0
 8005186:	f104 0619 	add.w	r6, r4, #25
 800518a:	e7f5      	b.n	8005178 <_printf_i+0x228>
 800518c:	08005533 	.word	0x08005533
 8005190:	08005544 	.word	0x08005544

08005194 <memmove>:
 8005194:	4288      	cmp	r0, r1
 8005196:	b510      	push	{r4, lr}
 8005198:	eb01 0402 	add.w	r4, r1, r2
 800519c:	d902      	bls.n	80051a4 <memmove+0x10>
 800519e:	4284      	cmp	r4, r0
 80051a0:	4623      	mov	r3, r4
 80051a2:	d807      	bhi.n	80051b4 <memmove+0x20>
 80051a4:	1e43      	subs	r3, r0, #1
 80051a6:	42a1      	cmp	r1, r4
 80051a8:	d008      	beq.n	80051bc <memmove+0x28>
 80051aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051b2:	e7f8      	b.n	80051a6 <memmove+0x12>
 80051b4:	4601      	mov	r1, r0
 80051b6:	4402      	add	r2, r0
 80051b8:	428a      	cmp	r2, r1
 80051ba:	d100      	bne.n	80051be <memmove+0x2a>
 80051bc:	bd10      	pop	{r4, pc}
 80051be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80051c6:	e7f7      	b.n	80051b8 <memmove+0x24>

080051c8 <_sbrk_r>:
 80051c8:	b538      	push	{r3, r4, r5, lr}
 80051ca:	2300      	movs	r3, #0
 80051cc:	4d05      	ldr	r5, [pc, #20]	; (80051e4 <_sbrk_r+0x1c>)
 80051ce:	4604      	mov	r4, r0
 80051d0:	4608      	mov	r0, r1
 80051d2:	602b      	str	r3, [r5, #0]
 80051d4:	f7fd fab2 	bl	800273c <_sbrk>
 80051d8:	1c43      	adds	r3, r0, #1
 80051da:	d102      	bne.n	80051e2 <_sbrk_r+0x1a>
 80051dc:	682b      	ldr	r3, [r5, #0]
 80051de:	b103      	cbz	r3, 80051e2 <_sbrk_r+0x1a>
 80051e0:	6023      	str	r3, [r4, #0]
 80051e2:	bd38      	pop	{r3, r4, r5, pc}
 80051e4:	200004bc 	.word	0x200004bc

080051e8 <memchr>:
 80051e8:	4603      	mov	r3, r0
 80051ea:	b510      	push	{r4, lr}
 80051ec:	b2c9      	uxtb	r1, r1
 80051ee:	4402      	add	r2, r0
 80051f0:	4293      	cmp	r3, r2
 80051f2:	4618      	mov	r0, r3
 80051f4:	d101      	bne.n	80051fa <memchr+0x12>
 80051f6:	2000      	movs	r0, #0
 80051f8:	e003      	b.n	8005202 <memchr+0x1a>
 80051fa:	7804      	ldrb	r4, [r0, #0]
 80051fc:	3301      	adds	r3, #1
 80051fe:	428c      	cmp	r4, r1
 8005200:	d1f6      	bne.n	80051f0 <memchr+0x8>
 8005202:	bd10      	pop	{r4, pc}

08005204 <memcpy>:
 8005204:	440a      	add	r2, r1
 8005206:	4291      	cmp	r1, r2
 8005208:	f100 33ff 	add.w	r3, r0, #4294967295
 800520c:	d100      	bne.n	8005210 <memcpy+0xc>
 800520e:	4770      	bx	lr
 8005210:	b510      	push	{r4, lr}
 8005212:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005216:	4291      	cmp	r1, r2
 8005218:	f803 4f01 	strb.w	r4, [r3, #1]!
 800521c:	d1f9      	bne.n	8005212 <memcpy+0xe>
 800521e:	bd10      	pop	{r4, pc}

08005220 <_realloc_r>:
 8005220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005224:	4680      	mov	r8, r0
 8005226:	4614      	mov	r4, r2
 8005228:	460e      	mov	r6, r1
 800522a:	b921      	cbnz	r1, 8005236 <_realloc_r+0x16>
 800522c:	4611      	mov	r1, r2
 800522e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005232:	f7ff bc37 	b.w	8004aa4 <_malloc_r>
 8005236:	b92a      	cbnz	r2, 8005244 <_realloc_r+0x24>
 8005238:	f7ff fbcc 	bl	80049d4 <_free_r>
 800523c:	4625      	mov	r5, r4
 800523e:	4628      	mov	r0, r5
 8005240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005244:	f000 f81b 	bl	800527e <_malloc_usable_size_r>
 8005248:	4284      	cmp	r4, r0
 800524a:	4607      	mov	r7, r0
 800524c:	d802      	bhi.n	8005254 <_realloc_r+0x34>
 800524e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005252:	d812      	bhi.n	800527a <_realloc_r+0x5a>
 8005254:	4621      	mov	r1, r4
 8005256:	4640      	mov	r0, r8
 8005258:	f7ff fc24 	bl	8004aa4 <_malloc_r>
 800525c:	4605      	mov	r5, r0
 800525e:	2800      	cmp	r0, #0
 8005260:	d0ed      	beq.n	800523e <_realloc_r+0x1e>
 8005262:	42bc      	cmp	r4, r7
 8005264:	4622      	mov	r2, r4
 8005266:	4631      	mov	r1, r6
 8005268:	bf28      	it	cs
 800526a:	463a      	movcs	r2, r7
 800526c:	f7ff ffca 	bl	8005204 <memcpy>
 8005270:	4631      	mov	r1, r6
 8005272:	4640      	mov	r0, r8
 8005274:	f7ff fbae 	bl	80049d4 <_free_r>
 8005278:	e7e1      	b.n	800523e <_realloc_r+0x1e>
 800527a:	4635      	mov	r5, r6
 800527c:	e7df      	b.n	800523e <_realloc_r+0x1e>

0800527e <_malloc_usable_size_r>:
 800527e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005282:	1f18      	subs	r0, r3, #4
 8005284:	2b00      	cmp	r3, #0
 8005286:	bfbc      	itt	lt
 8005288:	580b      	ldrlt	r3, [r1, r0]
 800528a:	18c0      	addlt	r0, r0, r3
 800528c:	4770      	bx	lr
	...

08005290 <_init>:
 8005290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005292:	bf00      	nop
 8005294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005296:	bc08      	pop	{r3}
 8005298:	469e      	mov	lr, r3
 800529a:	4770      	bx	lr

0800529c <_fini>:
 800529c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529e:	bf00      	nop
 80052a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052a2:	bc08      	pop	{r3}
 80052a4:	469e      	mov	lr, r3
 80052a6:	4770      	bx	lr
