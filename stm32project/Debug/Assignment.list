
Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000550c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000033c  08005618  08005618  00015618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005954  08005954  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  08005954  08005954  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005954  08005954  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005954  08005954  00015954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005958  08005958  00015958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800595c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  200000fc  08005a58  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  08005a58  000204cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e4be  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002969  00000000  00000000  0002e626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc8  00000000  00000000  00030f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a9c  00000000  00000000  00031d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018c96  00000000  00000000  000327f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011754  00000000  00000000  0004b48a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b406  00000000  00000000  0005cbde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c44  00000000  00000000  000e7fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000ebc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000fc 	.word	0x200000fc
 8000128:	00000000 	.word	0x00000000
 800012c:	08005600 	.word	0x08005600

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000100 	.word	0x20000100
 8000148:	08005600 	.word	0x08005600

0800014c <getKeyInput>:
int TimeOutForKeyPress[NUM_BUTTONS] = {200};
int BT_flag[NUM_BUTTONS] = {0};
int BT_hold_flag[NUM_BUTTONS] = {0};


void getKeyInput(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUTTONS; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e08b      	b.n	8000270 <getKeyInput+0x124>
		KeyReg2[i] = KeyReg1[i];
 8000158:	4a4a      	ldr	r2, [pc, #296]	; (8000284 <getKeyInput+0x138>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000160:	4949      	ldr	r1, [pc, #292]	; (8000288 <getKeyInput+0x13c>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 8000168:	4a48      	ldr	r2, [pc, #288]	; (800028c <getKeyInput+0x140>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000170:	4944      	ldr	r1, [pc, #272]	; (8000284 <getKeyInput+0x138>)
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//Add your button here
		KeyReg0[i] = HAL_GPIO_ReadPin(btPort[i], btArr[i]);
 8000178:	4a45      	ldr	r2, [pc, #276]	; (8000290 <getKeyInput+0x144>)
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000180:	4944      	ldr	r1, [pc, #272]	; (8000294 <getKeyInput+0x148>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000188:	4619      	mov	r1, r3
 800018a:	4610      	mov	r0, r2
 800018c:	f002 ffe4 	bl	8003158 <HAL_GPIO_ReadPin>
 8000190:	4603      	mov	r3, r0
 8000192:	4619      	mov	r1, r3
 8000194:	4a3d      	ldr	r2, [pc, #244]	; (800028c <getKeyInput+0x140>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 800019c:	4a39      	ldr	r2, [pc, #228]	; (8000284 <getKeyInput+0x138>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a4:	4939      	ldr	r1, [pc, #228]	; (800028c <getKeyInput+0x140>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001ac:	429a      	cmp	r2, r3
 80001ae:	d15c      	bne.n	800026a <getKeyInput+0x11e>
 80001b0:	4a34      	ldr	r2, [pc, #208]	; (8000284 <getKeyInput+0x138>)
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b8:	4933      	ldr	r1, [pc, #204]	; (8000288 <getKeyInput+0x13c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001c0:	429a      	cmp	r2, r3
 80001c2:	d152      	bne.n	800026a <getKeyInput+0x11e>
			if (KeyReg2[i] != KeyReg3[i]){
 80001c4:	4a30      	ldr	r2, [pc, #192]	; (8000288 <getKeyInput+0x13c>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001cc:	4932      	ldr	r1, [pc, #200]	; (8000298 <getKeyInput+0x14c>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001d4:	429a      	cmp	r2, r3
 80001d6:	d023      	beq.n	8000220 <getKeyInput+0xd4>
				KeyReg3[i] = KeyReg2[i];
 80001d8:	4a2b      	ldr	r2, [pc, #172]	; (8000288 <getKeyInput+0x13c>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e0:	492d      	ldr	r1, [pc, #180]	; (8000298 <getKeyInput+0x14c>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg3[i] == PRESSED_STATE){
 80001e8:	4a2b      	ldr	r2, [pc, #172]	; (8000298 <getKeyInput+0x14c>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d10a      	bne.n	800020a <getKeyInput+0xbe>
						TimeOutForKeyPress[i] = 200;
 80001f4:	4a29      	ldr	r2, [pc, #164]	; (800029c <getKeyInput+0x150>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	21c8      	movs	r1, #200	; 0xc8
 80001fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						BT_flag[i] = 1;
 80001fe:	4a28      	ldr	r2, [pc, #160]	; (80002a0 <getKeyInput+0x154>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	2101      	movs	r1, #1
 8000204:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000208:	e02f      	b.n	800026a <getKeyInput+0x11e>
				}
				else{
					TimeOutForKeyPress[i] = 200;
 800020a:	4a24      	ldr	r2, [pc, #144]	; (800029c <getKeyInput+0x150>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	21c8      	movs	r1, #200	; 0xc8
 8000210:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					BT_flag[i] = 0;
 8000214:	4a22      	ldr	r2, [pc, #136]	; (80002a0 <getKeyInput+0x154>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2100      	movs	r1, #0
 800021a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800021e:	e024      	b.n	800026a <getKeyInput+0x11e>
				}
			}
			else{
				TimeOutForKeyPress[i]--;
 8000220:	4a1e      	ldr	r2, [pc, #120]	; (800029c <getKeyInput+0x150>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000228:	1e5a      	subs	r2, r3, #1
 800022a:	491c      	ldr	r1, [pc, #112]	; (800029c <getKeyInput+0x150>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 8000232:	4a1a      	ldr	r2, [pc, #104]	; (800029c <getKeyInput+0x150>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d115      	bne.n	800026a <getKeyInput+0x11e>
					TimeOutForKeyPress[i] = 200;
 800023e:	4a17      	ldr	r2, [pc, #92]	; (800029c <getKeyInput+0x150>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	21c8      	movs	r1, #200	; 0xc8
 8000244:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if(KeyReg0[i] == PRESSED_STATE){
 8000248:	4a10      	ldr	r2, [pc, #64]	; (800028c <getKeyInput+0x140>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d105      	bne.n	8000260 <getKeyInput+0x114>
						BT_hold_flag[i] = 1;
 8000254:	4a13      	ldr	r2, [pc, #76]	; (80002a4 <getKeyInput+0x158>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	2101      	movs	r1, #1
 800025a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800025e:	e004      	b.n	800026a <getKeyInput+0x11e>
					}
					else{
						BT_hold_flag[i] = 0;
 8000260:	4a10      	ldr	r2, [pc, #64]	; (80002a4 <getKeyInput+0x158>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2100      	movs	r1, #0
 8000266:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_BUTTONS; i++){
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	3301      	adds	r3, #1
 800026e:	607b      	str	r3, [r7, #4]
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2b03      	cmp	r3, #3
 8000274:	f77f af70 	ble.w	8000158 <getKeyInput+0xc>
					}
				}
			}
		}
	}
}
 8000278:	bf00      	nop
 800027a:	bf00      	nop
 800027c:	3708      	adds	r7, #8
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	20000028 	.word	0x20000028
 8000288:	20000038 	.word	0x20000038
 800028c:	20000018 	.word	0x20000018
 8000290:	20000008 	.word	0x20000008
 8000294:	20000000 	.word	0x20000000
 8000298:	20000048 	.word	0x20000048
 800029c:	20000058 	.word	0x20000058
 80002a0:	20000118 	.word	0x20000118
 80002a4:	20000128 	.word	0x20000128

080002a8 <isBTPressed>:


int isBTPressed(int index){
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	if(BT_flag[index] == 1){
 80002b0:	4a09      	ldr	r2, [pc, #36]	; (80002d8 <isBTPressed+0x30>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b8:	2b01      	cmp	r3, #1
 80002ba:	d106      	bne.n	80002ca <isBTPressed+0x22>
		BT_flag[index] = 0;
 80002bc:	4a06      	ldr	r2, [pc, #24]	; (80002d8 <isBTPressed+0x30>)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2100      	movs	r1, #0
 80002c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80002c6:	2301      	movs	r3, #1
 80002c8:	e000      	b.n	80002cc <isBTPressed+0x24>
	}
	return 0;
 80002ca:	2300      	movs	r3, #0
}
 80002cc:	4618      	mov	r0, r3
 80002ce:	370c      	adds	r7, #12
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bc80      	pop	{r7}
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	20000118 	.word	0x20000118

080002dc <isBTHold>:

int isBTHold(int index){
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
	if(BT_hold_flag[index] == 1){
 80002e4:	4a09      	ldr	r2, [pc, #36]	; (800030c <isBTHold+0x30>)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ec:	2b01      	cmp	r3, #1
 80002ee:	d106      	bne.n	80002fe <isBTHold+0x22>
		BT_hold_flag[index] = 0;
 80002f0:	4a06      	ldr	r2, [pc, #24]	; (800030c <isBTHold+0x30>)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	2100      	movs	r1, #0
 80002f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80002fa:	2301      	movs	r3, #1
 80002fc:	e000      	b.n	8000300 <isBTHold+0x24>
	}
	return 0;
 80002fe:	2300      	movs	r3, #0
}
 8000300:	4618      	mov	r0, r3
 8000302:	370c      	adds	r7, #12
 8000304:	46bd      	mov	sp, r7
 8000306:	bc80      	pop	{r7}
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	20000128 	.word	0x20000128

08000310 <buzzer_init>:

int ped_green[8] = {NOTE_E7, NOTE_C7, NOTE_E7, NOTE_C7, NOTE_E7, NOTE_C7, NOTE_E7, NOTE_C7};

//Used timer: timer 4

void buzzer_init(TIM_TypeDef *tim){
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
	tempPSC = tim->PSC;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800031c:	4a04      	ldr	r2, [pc, #16]	; (8000330 <buzzer_init+0x20>)
 800031e:	6013      	str	r3, [r2, #0]
	setTimer(10, 4);
 8000320:	2104      	movs	r1, #4
 8000322:	200a      	movs	r0, #10
 8000324:	f002 fa4a 	bl	80027bc <setTimer>
}
 8000328:	bf00      	nop
 800032a:	3708      	adds	r7, #8
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	2000013c 	.word	0x2000013c

08000334 <buzzer_sound>:

void buzzer_sound(TIM_HandleTypeDef htim ,int volume){
 8000334:	b084      	sub	sp, #16
 8000336:	b580      	push	{r7, lr}
 8000338:	af00      	add	r7, sp, #0
 800033a:	f107 0c08 	add.w	ip, r7, #8
 800033e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	TIM_CCxChannelCmd(TIM3, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8000342:	2201      	movs	r2, #1
 8000344:	2100      	movs	r1, #0
 8000346:	4811      	ldr	r0, [pc, #68]	; (800038c <buzzer_sound+0x58>)
 8000348:	f004 fa44 	bl	80047d4 <TIM_CCxChannelCmd>
	__HAL_TIM_SET_COMPARE(&htim,TIM_CHANNEL_1,volume + idx);
 800034c:	4b10      	ldr	r3, [pc, #64]	; (8000390 <buzzer_sound+0x5c>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	461a      	mov	r2, r3
 8000352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000354:	441a      	add	r2, r3
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->PSC = 64000/ped_green[idx%8];
 800035a:	4b0d      	ldr	r3, [pc, #52]	; (8000390 <buzzer_sound+0x5c>)
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	f003 0307 	and.w	r3, r3, #7
 8000362:	4a0c      	ldr	r2, [pc, #48]	; (8000394 <buzzer_sound+0x60>)
 8000364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000368:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800036c:	fb92 f2f3 	sdiv	r2, r2, r3
 8000370:	4b06      	ldr	r3, [pc, #24]	; (800038c <buzzer_sound+0x58>)
 8000372:	629a      	str	r2, [r3, #40]	; 0x28
	idx++;
 8000374:	4b06      	ldr	r3, [pc, #24]	; (8000390 <buzzer_sound+0x5c>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	3301      	adds	r3, #1
 800037a:	b2da      	uxtb	r2, r3
 800037c:	4b04      	ldr	r3, [pc, #16]	; (8000390 <buzzer_sound+0x5c>)
 800037e:	701a      	strb	r2, [r3, #0]
}
 8000380:	bf00      	nop
 8000382:	46bd      	mov	sp, r7
 8000384:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000388:	b004      	add	sp, #16
 800038a:	4770      	bx	lr
 800038c:	40000400 	.word	0x40000400
 8000390:	20000138 	.word	0x20000138
 8000394:	20000068 	.word	0x20000068

08000398 <buzzer_run>:

void buzzer_run(){
 8000398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800039a:	b091      	sub	sp, #68	; 0x44
 800039c:	af10      	add	r7, sp, #64	; 0x40
	if(buzzer_state == 0){
 800039e:	4b28      	ldr	r3, [pc, #160]	; (8000440 <buzzer_run+0xa8>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d10b      	bne.n	80003be <buzzer_run+0x26>
		TIM_CCxChannelCmd(TIM3, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80003a6:	2200      	movs	r2, #0
 80003a8:	2100      	movs	r1, #0
 80003aa:	4826      	ldr	r0, [pc, #152]	; (8000444 <buzzer_run+0xac>)
 80003ac:	f004 fa12 	bl	80047d4 <TIM_CCxChannelCmd>
		idx = 0;
 80003b0:	4b25      	ldr	r3, [pc, #148]	; (8000448 <buzzer_run+0xb0>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	701a      	strb	r2, [r3, #0]
		TIM3->PSC = tempPSC;
 80003b6:	4a23      	ldr	r2, [pc, #140]	; (8000444 <buzzer_run+0xac>)
 80003b8:	4b24      	ldr	r3, [pc, #144]	; (800044c <buzzer_run+0xb4>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	6293      	str	r3, [r2, #40]	; 0x28
	}
	if(timer_flag[4] == 1){
 80003be:	4b24      	ldr	r3, [pc, #144]	; (8000450 <buzzer_run+0xb8>)
 80003c0:	691b      	ldr	r3, [r3, #16]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d137      	bne.n	8000436 <buzzer_run+0x9e>
		if(buzzer_state == 2){
 80003c6:	4b1e      	ldr	r3, [pc, #120]	; (8000440 <buzzer_run+0xa8>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	2b02      	cmp	r3, #2
 80003cc:	d117      	bne.n	80003fe <buzzer_run+0x66>
			buzzer_sound(htim3, 20);
 80003ce:	4e21      	ldr	r6, [pc, #132]	; (8000454 <buzzer_run+0xbc>)
 80003d0:	2314      	movs	r3, #20
 80003d2:	930e      	str	r3, [sp, #56]	; 0x38
 80003d4:	466d      	mov	r5, sp
 80003d6:	f106 0410 	add.w	r4, r6, #16
 80003da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80003ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80003ee:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80003f2:	f7ff ff9f 	bl	8000334 <buzzer_sound>
			setTimer(100, 4);
 80003f6:	2104      	movs	r1, #4
 80003f8:	2064      	movs	r0, #100	; 0x64
 80003fa:	f002 f9df 	bl	80027bc <setTimer>
		}
		if(buzzer_state == 1){
 80003fe:	4b10      	ldr	r3, [pc, #64]	; (8000440 <buzzer_run+0xa8>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	2b01      	cmp	r3, #1
 8000404:	d117      	bne.n	8000436 <buzzer_run+0x9e>
			buzzer_sound(htim3, 20);
 8000406:	4e13      	ldr	r6, [pc, #76]	; (8000454 <buzzer_run+0xbc>)
 8000408:	2314      	movs	r3, #20
 800040a:	930e      	str	r3, [sp, #56]	; 0x38
 800040c:	466d      	mov	r5, sp
 800040e:	f106 0410 	add.w	r4, r6, #16
 8000412:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000414:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000416:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000418:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800041a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800041c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800041e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000422:	e885 0003 	stmia.w	r5, {r0, r1}
 8000426:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800042a:	f7ff ff83 	bl	8000334 <buzzer_sound>
			setTimer(250, 4);
 800042e:	2104      	movs	r1, #4
 8000430:	20fa      	movs	r0, #250	; 0xfa
 8000432:	f002 f9c3 	bl	80027bc <setTimer>
		}
	}
}
 8000436:	bf00      	nop
 8000438:	3704      	adds	r7, #4
 800043a:	46bd      	mov	sp, r7
 800043c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800043e:	bf00      	nop
 8000440:	20000140 	.word	0x20000140
 8000444:	40000400 	.word	0x40000400
 8000448:	20000138 	.word	0x20000138
 800044c:	2000013c 	.word	0x2000013c
 8000450:	2000035c 	.word	0x2000035c
 8000454:	200001dc 	.word	0x200001dc

08000458 <buzzer_set>:


void buzzer_set(int value){
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	switch(value){
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	2b02      	cmp	r3, #2
 8000464:	d011      	beq.n	800048a <buzzer_set+0x32>
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	2b02      	cmp	r3, #2
 800046a:	dc12      	bgt.n	8000492 <buzzer_set+0x3a>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d003      	beq.n	800047a <buzzer_set+0x22>
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	2b01      	cmp	r3, #1
 8000476:	d004      	beq.n	8000482 <buzzer_set+0x2a>
 8000478:	e00b      	b.n	8000492 <buzzer_set+0x3a>
	case 0:
		buzzer_state = 0;
 800047a:	4b0a      	ldr	r3, [pc, #40]	; (80004a4 <buzzer_set+0x4c>)
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
		break;
 8000480:	e00b      	b.n	800049a <buzzer_set+0x42>
	case 1:
		buzzer_state = 1;
 8000482:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <buzzer_set+0x4c>)
 8000484:	2201      	movs	r2, #1
 8000486:	601a      	str	r2, [r3, #0]
		break;
 8000488:	e007      	b.n	800049a <buzzer_set+0x42>
	case 2:
		buzzer_state = 2;
 800048a:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <buzzer_set+0x4c>)
 800048c:	2202      	movs	r2, #2
 800048e:	601a      	str	r2, [r3, #0]
		break;
 8000490:	e003      	b.n	800049a <buzzer_set+0x42>
	default:
		buzzer_state = 0;
 8000492:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <buzzer_set+0x4c>)
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
		break;
 8000498:	bf00      	nop
	}
}
 800049a:	bf00      	nop
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr
 80004a4:	20000140 	.word	0x20000140

080004a8 <fsm_automatic_run>:
int counter2_buffer1;
int counter2_buffer2;

// Used timers: timer[0]: counter decrease (1000)
//				timer[1]: ped timeout (5000)
void fsm_automatic_run(){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af02      	add	r7, sp, #8
	switch(status){
 80004ae:	4b9a      	ldr	r3, [pc, #616]	; (8000718 <fsm_automatic_run+0x270>)
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	2b04      	cmp	r3, #4
 80004b4:	f200 844f 	bhi.w	8000d56 <fsm_automatic_run+0x8ae>
 80004b8:	a201      	add	r2, pc, #4	; (adr r2, 80004c0 <fsm_automatic_run+0x18>)
 80004ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004be:	bf00      	nop
 80004c0:	080004d5 	.word	0x080004d5
 80004c4:	08000535 	.word	0x08000535
 80004c8:	08000769 	.word	0x08000769
 80004cc:	08000969 	.word	0x08000969
 80004d0:	08000b81 	.word	0x08000b81
	case INIT:
		clearTrafficLights();
 80004d4:	f001 fc6c 	bl	8001db0 <clearTrafficLights>
		status = AUTO_RED;
 80004d8:	4b8f      	ldr	r3, [pc, #572]	; (8000718 <fsm_automatic_run+0x270>)
 80004da:	2201      	movs	r2, #1
 80004dc:	701a      	strb	r2, [r3, #0]
		setTimer(1000, 0);						//timer for counters
 80004de:	2100      	movs	r1, #0
 80004e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004e4:	f002 f96a 	bl	80027bc <setTimer>
		counter1 = red;
 80004e8:	4b8c      	ldr	r3, [pc, #560]	; (800071c <fsm_automatic_run+0x274>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a8c      	ldr	r2, [pc, #560]	; (8000720 <fsm_automatic_run+0x278>)
 80004ee:	6013      	str	r3, [r2, #0]
		counter2 = green;
 80004f0:	4b8c      	ldr	r3, [pc, #560]	; (8000724 <fsm_automatic_run+0x27c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a8c      	ldr	r2, [pc, #560]	; (8000728 <fsm_automatic_run+0x280>)
 80004f6:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!AUTOMATIC#\r\n"), 1000);
 80004f8:	498c      	ldr	r1, [pc, #560]	; (800072c <fsm_automatic_run+0x284>)
 80004fa:	488d      	ldr	r0, [pc, #564]	; (8000730 <fsm_automatic_run+0x288>)
 80004fc:	f004 fbce 	bl	8004c9c <siprintf>
 8000500:	4603      	mov	r3, r0
 8000502:	b29a      	uxth	r2, r3
 8000504:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000508:	4989      	ldr	r1, [pc, #548]	; (8000730 <fsm_automatic_run+0x288>)
 800050a:	488a      	ldr	r0, [pc, #552]	; (8000734 <fsm_automatic_run+0x28c>)
 800050c:	f004 fa46 	bl	800499c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d||%d#\r\n",counter1, counter2), 1000);
 8000510:	4b83      	ldr	r3, [pc, #524]	; (8000720 <fsm_automatic_run+0x278>)
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	4b84      	ldr	r3, [pc, #528]	; (8000728 <fsm_automatic_run+0x280>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4987      	ldr	r1, [pc, #540]	; (8000738 <fsm_automatic_run+0x290>)
 800051a:	4885      	ldr	r0, [pc, #532]	; (8000730 <fsm_automatic_run+0x288>)
 800051c:	f004 fbbe 	bl	8004c9c <siprintf>
 8000520:	4603      	mov	r3, r0
 8000522:	b29a      	uxth	r2, r3
 8000524:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000528:	4981      	ldr	r1, [pc, #516]	; (8000730 <fsm_automatic_run+0x288>)
 800052a:	4882      	ldr	r0, [pc, #520]	; (8000734 <fsm_automatic_run+0x28c>)
 800052c:	f004 fa36 	bl	800499c <HAL_UART_Transmit>
		break;
 8000530:	f000 bc1a 	b.w	8000d68 <fsm_automatic_run+0x8c0>
	case AUTO_RED:
		controlTrafficLights(RED, GREEN);
 8000534:	2165      	movs	r1, #101	; 0x65
 8000536:	2064      	movs	r0, #100	; 0x64
 8000538:	f001 fb64 	bl	8001c04 <controlTrafficLights>
		if(timer_flag[0] == 1){
 800053c:	4b7f      	ldr	r3, [pc, #508]	; (800073c <fsm_automatic_run+0x294>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b01      	cmp	r3, #1
 8000542:	d16a      	bne.n	800061a <fsm_automatic_run+0x172>
			counter1--;
 8000544:	4b76      	ldr	r3, [pc, #472]	; (8000720 <fsm_automatic_run+0x278>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	3b01      	subs	r3, #1
 800054a:	4a75      	ldr	r2, [pc, #468]	; (8000720 <fsm_automatic_run+0x278>)
 800054c:	6013      	str	r3, [r2, #0]
			counter2--;
 800054e:	4b76      	ldr	r3, [pc, #472]	; (8000728 <fsm_automatic_run+0x280>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	3b01      	subs	r3, #1
 8000554:	4a74      	ldr	r2, [pc, #464]	; (8000728 <fsm_automatic_run+0x280>)
 8000556:	6013      	str	r3, [r2, #0]
			if(counter2 == 0){
 8000558:	4b73      	ldr	r3, [pc, #460]	; (8000728 <fsm_automatic_run+0x280>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d10d      	bne.n	800057c <fsm_automatic_run+0xd4>
				status = AUTO_RED1_YELLOW2;
 8000560:	4b6d      	ldr	r3, [pc, #436]	; (8000718 <fsm_automatic_run+0x270>)
 8000562:	2204      	movs	r2, #4
 8000564:	701a      	strb	r2, [r3, #0]
				if(isPed == 1){
 8000566:	4b76      	ldr	r3, [pc, #472]	; (8000740 <fsm_automatic_run+0x298>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d102      	bne.n	8000574 <fsm_automatic_run+0xcc>
					buzzer_set(2);
 800056e:	2002      	movs	r0, #2
 8000570:	f7ff ff72 	bl	8000458 <buzzer_set>
				}
				counter2 = yellow;
 8000574:	4b73      	ldr	r3, [pc, #460]	; (8000744 <fsm_automatic_run+0x29c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a6b      	ldr	r2, [pc, #428]	; (8000728 <fsm_automatic_run+0x280>)
 800057a:	6013      	str	r3, [r2, #0]
			}
			counter1_buffer1 = counter1 / 10;
 800057c:	4b68      	ldr	r3, [pc, #416]	; (8000720 <fsm_automatic_run+0x278>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a71      	ldr	r2, [pc, #452]	; (8000748 <fsm_automatic_run+0x2a0>)
 8000582:	fb82 1203 	smull	r1, r2, r2, r3
 8000586:	1092      	asrs	r2, r2, #2
 8000588:	17db      	asrs	r3, r3, #31
 800058a:	1ad3      	subs	r3, r2, r3
 800058c:	4a6f      	ldr	r2, [pc, #444]	; (800074c <fsm_automatic_run+0x2a4>)
 800058e:	6013      	str	r3, [r2, #0]
			counter1_buffer2 = counter1 % 10;
 8000590:	4b63      	ldr	r3, [pc, #396]	; (8000720 <fsm_automatic_run+0x278>)
 8000592:	6819      	ldr	r1, [r3, #0]
 8000594:	4b6c      	ldr	r3, [pc, #432]	; (8000748 <fsm_automatic_run+0x2a0>)
 8000596:	fb83 2301 	smull	r2, r3, r3, r1
 800059a:	109a      	asrs	r2, r3, #2
 800059c:	17cb      	asrs	r3, r1, #31
 800059e:	1ad2      	subs	r2, r2, r3
 80005a0:	4613      	mov	r3, r2
 80005a2:	009b      	lsls	r3, r3, #2
 80005a4:	4413      	add	r3, r2
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	1aca      	subs	r2, r1, r3
 80005aa:	4b69      	ldr	r3, [pc, #420]	; (8000750 <fsm_automatic_run+0x2a8>)
 80005ac:	601a      	str	r2, [r3, #0]
			counter2_buffer1 = counter2 / 10;
 80005ae:	4b5e      	ldr	r3, [pc, #376]	; (8000728 <fsm_automatic_run+0x280>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a65      	ldr	r2, [pc, #404]	; (8000748 <fsm_automatic_run+0x2a0>)
 80005b4:	fb82 1203 	smull	r1, r2, r2, r3
 80005b8:	1092      	asrs	r2, r2, #2
 80005ba:	17db      	asrs	r3, r3, #31
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	4a65      	ldr	r2, [pc, #404]	; (8000754 <fsm_automatic_run+0x2ac>)
 80005c0:	6013      	str	r3, [r2, #0]
			counter2_buffer2 = counter2 % 10;
 80005c2:	4b59      	ldr	r3, [pc, #356]	; (8000728 <fsm_automatic_run+0x280>)
 80005c4:	6819      	ldr	r1, [r3, #0]
 80005c6:	4b60      	ldr	r3, [pc, #384]	; (8000748 <fsm_automatic_run+0x2a0>)
 80005c8:	fb83 2301 	smull	r2, r3, r3, r1
 80005cc:	109a      	asrs	r2, r3, #2
 80005ce:	17cb      	asrs	r3, r1, #31
 80005d0:	1ad2      	subs	r2, r2, r3
 80005d2:	4613      	mov	r3, r2
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	4413      	add	r3, r2
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	1aca      	subs	r2, r1, r3
 80005dc:	4b5e      	ldr	r3, [pc, #376]	; (8000758 <fsm_automatic_run+0x2b0>)
 80005de:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d||%d%d#\r\n",
 80005e0:	4b5a      	ldr	r3, [pc, #360]	; (800074c <fsm_automatic_run+0x2a4>)
 80005e2:	6819      	ldr	r1, [r3, #0]
 80005e4:	4b5a      	ldr	r3, [pc, #360]	; (8000750 <fsm_automatic_run+0x2a8>)
 80005e6:	6818      	ldr	r0, [r3, #0]
 80005e8:	4b5a      	ldr	r3, [pc, #360]	; (8000754 <fsm_automatic_run+0x2ac>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a5a      	ldr	r2, [pc, #360]	; (8000758 <fsm_automatic_run+0x2b0>)
 80005ee:	6812      	ldr	r2, [r2, #0]
 80005f0:	9201      	str	r2, [sp, #4]
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	4603      	mov	r3, r0
 80005f6:	460a      	mov	r2, r1
 80005f8:	4958      	ldr	r1, [pc, #352]	; (800075c <fsm_automatic_run+0x2b4>)
 80005fa:	484d      	ldr	r0, [pc, #308]	; (8000730 <fsm_automatic_run+0x288>)
 80005fc:	f004 fb4e 	bl	8004c9c <siprintf>
 8000600:	4603      	mov	r3, r0
 8000602:	b29a      	uxth	r2, r3
 8000604:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000608:	4949      	ldr	r1, [pc, #292]	; (8000730 <fsm_automatic_run+0x288>)
 800060a:	484a      	ldr	r0, [pc, #296]	; (8000734 <fsm_automatic_run+0x28c>)
 800060c:	f004 f9c6 	bl	800499c <HAL_UART_Transmit>
								counter1_buffer1, counter1_buffer2, counter2_buffer1, counter2_buffer2), 1000);
			setTimer(1000, 0);
 8000610:	2100      	movs	r1, #0
 8000612:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000616:	f002 f8d1 	bl	80027bc <setTimer>
		}
		if(timer_flag[1] == 1){ //ped timeout
 800061a:	4b48      	ldr	r3, [pc, #288]	; (800073c <fsm_automatic_run+0x294>)
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d118      	bne.n	8000654 <fsm_automatic_run+0x1ac>
			if(isPed == 1){
 8000622:	4b47      	ldr	r3, [pc, #284]	; (8000740 <fsm_automatic_run+0x298>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d114      	bne.n	8000654 <fsm_automatic_run+0x1ac>
				isPed = 0;
 800062a:	4b45      	ldr	r3, [pc, #276]	; (8000740 <fsm_automatic_run+0x298>)
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
				buzzer_set(0);
 8000630:	2000      	movs	r0, #0
 8000632:	f7ff ff11 	bl	8000458 <buzzer_set>
				controlPedLights(OFF);
 8000636:	2067      	movs	r0, #103	; 0x67
 8000638:	f001 fb68 	bl	8001d0c <controlPedLights>
				HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_OFF#\r\n"), 1000);
 800063c:	4948      	ldr	r1, [pc, #288]	; (8000760 <fsm_automatic_run+0x2b8>)
 800063e:	483c      	ldr	r0, [pc, #240]	; (8000730 <fsm_automatic_run+0x288>)
 8000640:	f004 fb2c 	bl	8004c9c <siprintf>
 8000644:	4603      	mov	r3, r0
 8000646:	b29a      	uxth	r2, r3
 8000648:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064c:	4938      	ldr	r1, [pc, #224]	; (8000730 <fsm_automatic_run+0x288>)
 800064e:	4839      	ldr	r0, [pc, #228]	; (8000734 <fsm_automatic_run+0x28c>)
 8000650:	f004 f9a4 	bl	800499c <HAL_UART_Transmit>
			}
		}
		if(isBTPressed(0) == 1){
 8000654:	2000      	movs	r0, #0
 8000656:	f7ff fe27 	bl	80002a8 <isBTPressed>
 800065a:	4603      	mov	r3, r0
 800065c:	2b01      	cmp	r3, #1
 800065e:	d11d      	bne.n	800069c <fsm_automatic_run+0x1f4>
			status = MANUAL_INIT;
 8000660:	4b2d      	ldr	r3, [pc, #180]	; (8000718 <fsm_automatic_run+0x270>)
 8000662:	2205      	movs	r2, #5
 8000664:	701a      	strb	r2, [r3, #0]
			clearTrafficLights();
 8000666:	f001 fba3 	bl	8001db0 <clearTrafficLights>
			if(isPed == 1){
 800066a:	4b35      	ldr	r3, [pc, #212]	; (8000740 <fsm_automatic_run+0x298>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d114      	bne.n	800069c <fsm_automatic_run+0x1f4>
				isPed = 0;
 8000672:	4b33      	ldr	r3, [pc, #204]	; (8000740 <fsm_automatic_run+0x298>)
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
				buzzer_set(0);
 8000678:	2000      	movs	r0, #0
 800067a:	f7ff feed 	bl	8000458 <buzzer_set>
				controlPedLights(OFF);
 800067e:	2067      	movs	r0, #103	; 0x67
 8000680:	f001 fb44 	bl	8001d0c <controlPedLights>
				HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_OFF#\r\n"), 1000);
 8000684:	4936      	ldr	r1, [pc, #216]	; (8000760 <fsm_automatic_run+0x2b8>)
 8000686:	482a      	ldr	r0, [pc, #168]	; (8000730 <fsm_automatic_run+0x288>)
 8000688:	f004 fb08 	bl	8004c9c <siprintf>
 800068c:	4603      	mov	r3, r0
 800068e:	b29a      	uxth	r2, r3
 8000690:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000694:	4926      	ldr	r1, [pc, #152]	; (8000730 <fsm_automatic_run+0x288>)
 8000696:	4827      	ldr	r0, [pc, #156]	; (8000734 <fsm_automatic_run+0x28c>)
 8000698:	f004 f980 	bl	800499c <HAL_UART_Transmit>
			}
		}
		if(isBTPressed(3) == 1){
 800069c:	2003      	movs	r0, #3
 800069e:	f7ff fe03 	bl	80002a8 <isBTPressed>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d116      	bne.n	80006d6 <fsm_automatic_run+0x22e>
			isPed = 1;
 80006a8:	4b25      	ldr	r3, [pc, #148]	; (8000740 <fsm_automatic_run+0x298>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	601a      	str	r2, [r3, #0]
			setTimer(PEDESTRIAN_TIMER, 1);
 80006ae:	2101      	movs	r1, #1
 80006b0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80006b4:	f002 f882 	bl	80027bc <setTimer>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_GREEN#\r\n"), 1000);
 80006b8:	492a      	ldr	r1, [pc, #168]	; (8000764 <fsm_automatic_run+0x2bc>)
 80006ba:	481d      	ldr	r0, [pc, #116]	; (8000730 <fsm_automatic_run+0x288>)
 80006bc:	f004 faee 	bl	8004c9c <siprintf>
 80006c0:	4603      	mov	r3, r0
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c8:	4919      	ldr	r1, [pc, #100]	; (8000730 <fsm_automatic_run+0x288>)
 80006ca:	481a      	ldr	r0, [pc, #104]	; (8000734 <fsm_automatic_run+0x28c>)
 80006cc:	f004 f966 	bl	800499c <HAL_UART_Transmit>
			buzzer_set(1);
 80006d0:	2001      	movs	r0, #1
 80006d2:	f7ff fec1 	bl	8000458 <buzzer_set>
		}
		if(isBTHold(3) == 1){
 80006d6:	2003      	movs	r0, #3
 80006d8:	f7ff fe00 	bl	80002dc <isBTHold>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d10a      	bne.n	80006f8 <fsm_automatic_run+0x250>
			isPed = 1;
 80006e2:	4b17      	ldr	r3, [pc, #92]	; (8000740 <fsm_automatic_run+0x298>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	601a      	str	r2, [r3, #0]
			setTimer(PEDESTRIAN_TIMER, 1);
 80006e8:	2101      	movs	r1, #1
 80006ea:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80006ee:	f002 f865 	bl	80027bc <setTimer>
			buzzer_set(1);
 80006f2:	2001      	movs	r0, #1
 80006f4:	f7ff feb0 	bl	8000458 <buzzer_set>
		}
		if(isPed == 1){
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <fsm_automatic_run+0x298>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d102      	bne.n	8000706 <fsm_automatic_run+0x25e>
			controlPedLights(GREEN);
 8000700:	2065      	movs	r0, #101	; 0x65
 8000702:	f001 fb03 	bl	8001d0c <controlPedLights>
		}
		if(isPed == 0){
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <fsm_automatic_run+0x298>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	f040 8325 	bne.w	8000d5a <fsm_automatic_run+0x8b2>
			controlPedLights(OFF);
 8000710:	2067      	movs	r0, #103	; 0x67
 8000712:	f001 fafb 	bl	8001d0c <controlPedLights>
		}
		break;
 8000716:	e320      	b.n	8000d5a <fsm_automatic_run+0x8b2>
 8000718:	20000192 	.word	0x20000192
 800071c:	20000094 	.word	0x20000094
 8000720:	20000144 	.word	0x20000144
 8000724:	20000098 	.word	0x20000098
 8000728:	20000148 	.word	0x20000148
 800072c:	08005618 	.word	0x08005618
 8000730:	20000160 	.word	0x20000160
 8000734:	20000224 	.word	0x20000224
 8000738:	08005628 	.word	0x08005628
 800073c:	2000035c 	.word	0x2000035c
 8000740:	2000015c 	.word	0x2000015c
 8000744:	2000009c 	.word	0x2000009c
 8000748:	66666667 	.word	0x66666667
 800074c:	2000014c 	.word	0x2000014c
 8000750:	20000150 	.word	0x20000150
 8000754:	20000154 	.word	0x20000154
 8000758:	20000158 	.word	0x20000158
 800075c:	08005638 	.word	0x08005638
 8000760:	0800564c 	.word	0x0800564c
 8000764:	08005660 	.word	0x08005660
	case AUTO_GREEN:
		controlTrafficLights(GREEN, RED);
 8000768:	2164      	movs	r1, #100	; 0x64
 800076a:	2065      	movs	r0, #101	; 0x65
 800076c:	f001 fa4a 	bl	8001c04 <controlTrafficLights>
		if(timer_flag[0] == 1){
 8000770:	4b6d      	ldr	r3, [pc, #436]	; (8000928 <fsm_automatic_run+0x480>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d163      	bne.n	8000840 <fsm_automatic_run+0x398>
			counter1--;
 8000778:	4b6c      	ldr	r3, [pc, #432]	; (800092c <fsm_automatic_run+0x484>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	3b01      	subs	r3, #1
 800077e:	4a6b      	ldr	r2, [pc, #428]	; (800092c <fsm_automatic_run+0x484>)
 8000780:	6013      	str	r3, [r2, #0]
			counter2--;
 8000782:	4b6b      	ldr	r3, [pc, #428]	; (8000930 <fsm_automatic_run+0x488>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	3b01      	subs	r3, #1
 8000788:	4a69      	ldr	r2, [pc, #420]	; (8000930 <fsm_automatic_run+0x488>)
 800078a:	6013      	str	r3, [r2, #0]
			if(counter1 == 0){
 800078c:	4b67      	ldr	r3, [pc, #412]	; (800092c <fsm_automatic_run+0x484>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d106      	bne.n	80007a2 <fsm_automatic_run+0x2fa>
				status = AUTO_YELLOW;
 8000794:	4b67      	ldr	r3, [pc, #412]	; (8000934 <fsm_automatic_run+0x48c>)
 8000796:	2203      	movs	r2, #3
 8000798:	701a      	strb	r2, [r3, #0]
				counter1 = yellow;
 800079a:	4b67      	ldr	r3, [pc, #412]	; (8000938 <fsm_automatic_run+0x490>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a63      	ldr	r2, [pc, #396]	; (800092c <fsm_automatic_run+0x484>)
 80007a0:	6013      	str	r3, [r2, #0]
			}
			counter1_buffer1 = counter1 / 10;
 80007a2:	4b62      	ldr	r3, [pc, #392]	; (800092c <fsm_automatic_run+0x484>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a65      	ldr	r2, [pc, #404]	; (800093c <fsm_automatic_run+0x494>)
 80007a8:	fb82 1203 	smull	r1, r2, r2, r3
 80007ac:	1092      	asrs	r2, r2, #2
 80007ae:	17db      	asrs	r3, r3, #31
 80007b0:	1ad3      	subs	r3, r2, r3
 80007b2:	4a63      	ldr	r2, [pc, #396]	; (8000940 <fsm_automatic_run+0x498>)
 80007b4:	6013      	str	r3, [r2, #0]
			counter1_buffer2 = counter1 % 10;
 80007b6:	4b5d      	ldr	r3, [pc, #372]	; (800092c <fsm_automatic_run+0x484>)
 80007b8:	6819      	ldr	r1, [r3, #0]
 80007ba:	4b60      	ldr	r3, [pc, #384]	; (800093c <fsm_automatic_run+0x494>)
 80007bc:	fb83 2301 	smull	r2, r3, r3, r1
 80007c0:	109a      	asrs	r2, r3, #2
 80007c2:	17cb      	asrs	r3, r1, #31
 80007c4:	1ad2      	subs	r2, r2, r3
 80007c6:	4613      	mov	r3, r2
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	4413      	add	r3, r2
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	1aca      	subs	r2, r1, r3
 80007d0:	4b5c      	ldr	r3, [pc, #368]	; (8000944 <fsm_automatic_run+0x49c>)
 80007d2:	601a      	str	r2, [r3, #0]
			counter2_buffer1 = counter2 / 10;
 80007d4:	4b56      	ldr	r3, [pc, #344]	; (8000930 <fsm_automatic_run+0x488>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a58      	ldr	r2, [pc, #352]	; (800093c <fsm_automatic_run+0x494>)
 80007da:	fb82 1203 	smull	r1, r2, r2, r3
 80007de:	1092      	asrs	r2, r2, #2
 80007e0:	17db      	asrs	r3, r3, #31
 80007e2:	1ad3      	subs	r3, r2, r3
 80007e4:	4a58      	ldr	r2, [pc, #352]	; (8000948 <fsm_automatic_run+0x4a0>)
 80007e6:	6013      	str	r3, [r2, #0]
			counter2_buffer2 = counter2 % 10;
 80007e8:	4b51      	ldr	r3, [pc, #324]	; (8000930 <fsm_automatic_run+0x488>)
 80007ea:	6819      	ldr	r1, [r3, #0]
 80007ec:	4b53      	ldr	r3, [pc, #332]	; (800093c <fsm_automatic_run+0x494>)
 80007ee:	fb83 2301 	smull	r2, r3, r3, r1
 80007f2:	109a      	asrs	r2, r3, #2
 80007f4:	17cb      	asrs	r3, r1, #31
 80007f6:	1ad2      	subs	r2, r2, r3
 80007f8:	4613      	mov	r3, r2
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	4413      	add	r3, r2
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	1aca      	subs	r2, r1, r3
 8000802:	4b52      	ldr	r3, [pc, #328]	; (800094c <fsm_automatic_run+0x4a4>)
 8000804:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d||%d%d#\r\n",
 8000806:	4b4e      	ldr	r3, [pc, #312]	; (8000940 <fsm_automatic_run+0x498>)
 8000808:	6819      	ldr	r1, [r3, #0]
 800080a:	4b4e      	ldr	r3, [pc, #312]	; (8000944 <fsm_automatic_run+0x49c>)
 800080c:	6818      	ldr	r0, [r3, #0]
 800080e:	4b4e      	ldr	r3, [pc, #312]	; (8000948 <fsm_automatic_run+0x4a0>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a4e      	ldr	r2, [pc, #312]	; (800094c <fsm_automatic_run+0x4a4>)
 8000814:	6812      	ldr	r2, [r2, #0]
 8000816:	9201      	str	r2, [sp, #4]
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	4603      	mov	r3, r0
 800081c:	460a      	mov	r2, r1
 800081e:	494c      	ldr	r1, [pc, #304]	; (8000950 <fsm_automatic_run+0x4a8>)
 8000820:	484c      	ldr	r0, [pc, #304]	; (8000954 <fsm_automatic_run+0x4ac>)
 8000822:	f004 fa3b 	bl	8004c9c <siprintf>
 8000826:	4603      	mov	r3, r0
 8000828:	b29a      	uxth	r2, r3
 800082a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800082e:	4949      	ldr	r1, [pc, #292]	; (8000954 <fsm_automatic_run+0x4ac>)
 8000830:	4849      	ldr	r0, [pc, #292]	; (8000958 <fsm_automatic_run+0x4b0>)
 8000832:	f004 f8b3 	bl	800499c <HAL_UART_Transmit>
													counter1_buffer1, counter1_buffer2, counter2_buffer1, counter2_buffer2), 1000);
			setTimer(1000, 0);
 8000836:	2100      	movs	r1, #0
 8000838:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800083c:	f001 ffbe 	bl	80027bc <setTimer>
		}
		if(timer_flag[1] == 1){
 8000840:	4b39      	ldr	r3, [pc, #228]	; (8000928 <fsm_automatic_run+0x480>)
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d115      	bne.n	8000874 <fsm_automatic_run+0x3cc>
			if(isPed == 1){
 8000848:	4b44      	ldr	r3, [pc, #272]	; (800095c <fsm_automatic_run+0x4b4>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b01      	cmp	r3, #1
 800084e:	d111      	bne.n	8000874 <fsm_automatic_run+0x3cc>
				isPed = 0;
 8000850:	4b42      	ldr	r3, [pc, #264]	; (800095c <fsm_automatic_run+0x4b4>)
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
				controlPedLights(OFF);
 8000856:	2067      	movs	r0, #103	; 0x67
 8000858:	f001 fa58 	bl	8001d0c <controlPedLights>
				HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_OFF#\r\n"), 1000);
 800085c:	4940      	ldr	r1, [pc, #256]	; (8000960 <fsm_automatic_run+0x4b8>)
 800085e:	483d      	ldr	r0, [pc, #244]	; (8000954 <fsm_automatic_run+0x4ac>)
 8000860:	f004 fa1c 	bl	8004c9c <siprintf>
 8000864:	4603      	mov	r3, r0
 8000866:	b29a      	uxth	r2, r3
 8000868:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800086c:	4939      	ldr	r1, [pc, #228]	; (8000954 <fsm_automatic_run+0x4ac>)
 800086e:	483a      	ldr	r0, [pc, #232]	; (8000958 <fsm_automatic_run+0x4b0>)
 8000870:	f004 f894 	bl	800499c <HAL_UART_Transmit>
			}
		}
		if(isBTPressed(0) == 1){
 8000874:	2000      	movs	r0, #0
 8000876:	f7ff fd17 	bl	80002a8 <isBTPressed>
 800087a:	4603      	mov	r3, r0
 800087c:	2b01      	cmp	r3, #1
 800087e:	d11a      	bne.n	80008b6 <fsm_automatic_run+0x40e>
			status = MANUAL_INIT;
 8000880:	4b2c      	ldr	r3, [pc, #176]	; (8000934 <fsm_automatic_run+0x48c>)
 8000882:	2205      	movs	r2, #5
 8000884:	701a      	strb	r2, [r3, #0]
			clearTrafficLights();
 8000886:	f001 fa93 	bl	8001db0 <clearTrafficLights>
			if(isPed == 1){
 800088a:	4b34      	ldr	r3, [pc, #208]	; (800095c <fsm_automatic_run+0x4b4>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d111      	bne.n	80008b6 <fsm_automatic_run+0x40e>
				isPed = 0;
 8000892:	4b32      	ldr	r3, [pc, #200]	; (800095c <fsm_automatic_run+0x4b4>)
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
				controlPedLights(OFF);
 8000898:	2067      	movs	r0, #103	; 0x67
 800089a:	f001 fa37 	bl	8001d0c <controlPedLights>
				HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_OFF#\r\n"), 1000);
 800089e:	4930      	ldr	r1, [pc, #192]	; (8000960 <fsm_automatic_run+0x4b8>)
 80008a0:	482c      	ldr	r0, [pc, #176]	; (8000954 <fsm_automatic_run+0x4ac>)
 80008a2:	f004 f9fb 	bl	8004c9c <siprintf>
 80008a6:	4603      	mov	r3, r0
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ae:	4929      	ldr	r1, [pc, #164]	; (8000954 <fsm_automatic_run+0x4ac>)
 80008b0:	4829      	ldr	r0, [pc, #164]	; (8000958 <fsm_automatic_run+0x4b0>)
 80008b2:	f004 f873 	bl	800499c <HAL_UART_Transmit>
			}
		}
		if(isBTPressed(3) == 1){
 80008b6:	2003      	movs	r0, #3
 80008b8:	f7ff fcf6 	bl	80002a8 <isBTPressed>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d113      	bne.n	80008ea <fsm_automatic_run+0x442>
			isPed = 1;
 80008c2:	4b26      	ldr	r3, [pc, #152]	; (800095c <fsm_automatic_run+0x4b4>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	601a      	str	r2, [r3, #0]
			setTimer(PEDESTRIAN_TIMER, 1);
 80008c8:	2101      	movs	r1, #1
 80008ca:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80008ce:	f001 ff75 	bl	80027bc <setTimer>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_RED#\r\n"), 1000);
 80008d2:	4924      	ldr	r1, [pc, #144]	; (8000964 <fsm_automatic_run+0x4bc>)
 80008d4:	481f      	ldr	r0, [pc, #124]	; (8000954 <fsm_automatic_run+0x4ac>)
 80008d6:	f004 f9e1 	bl	8004c9c <siprintf>
 80008da:	4603      	mov	r3, r0
 80008dc:	b29a      	uxth	r2, r3
 80008de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e2:	491c      	ldr	r1, [pc, #112]	; (8000954 <fsm_automatic_run+0x4ac>)
 80008e4:	481c      	ldr	r0, [pc, #112]	; (8000958 <fsm_automatic_run+0x4b0>)
 80008e6:	f004 f859 	bl	800499c <HAL_UART_Transmit>
		}
		if(isBTHold(3) == 1){
 80008ea:	2003      	movs	r0, #3
 80008ec:	f7ff fcf6 	bl	80002dc <isBTHold>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d107      	bne.n	8000906 <fsm_automatic_run+0x45e>
			isPed = 1;
 80008f6:	4b19      	ldr	r3, [pc, #100]	; (800095c <fsm_automatic_run+0x4b4>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	601a      	str	r2, [r3, #0]
			setTimer(PEDESTRIAN_TIMER, 1);
 80008fc:	2101      	movs	r1, #1
 80008fe:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000902:	f001 ff5b 	bl	80027bc <setTimer>
		}
		if(isPed == 1){
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <fsm_automatic_run+0x4b4>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d102      	bne.n	8000914 <fsm_automatic_run+0x46c>
			controlPedLights(RED);
 800090e:	2064      	movs	r0, #100	; 0x64
 8000910:	f001 f9fc 	bl	8001d0c <controlPedLights>
		}
		if(isPed == 0){
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <fsm_automatic_run+0x4b4>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	f040 8220 	bne.w	8000d5e <fsm_automatic_run+0x8b6>
			controlPedLights(OFF);
 800091e:	2067      	movs	r0, #103	; 0x67
 8000920:	f001 f9f4 	bl	8001d0c <controlPedLights>
		}
		break;
 8000924:	e21b      	b.n	8000d5e <fsm_automatic_run+0x8b6>
 8000926:	bf00      	nop
 8000928:	2000035c 	.word	0x2000035c
 800092c:	20000144 	.word	0x20000144
 8000930:	20000148 	.word	0x20000148
 8000934:	20000192 	.word	0x20000192
 8000938:	2000009c 	.word	0x2000009c
 800093c:	66666667 	.word	0x66666667
 8000940:	2000014c 	.word	0x2000014c
 8000944:	20000150 	.word	0x20000150
 8000948:	20000154 	.word	0x20000154
 800094c:	20000158 	.word	0x20000158
 8000950:	08005638 	.word	0x08005638
 8000954:	20000160 	.word	0x20000160
 8000958:	20000224 	.word	0x20000224
 800095c:	2000015c 	.word	0x2000015c
 8000960:	0800564c 	.word	0x0800564c
 8000964:	08005678 	.word	0x08005678
	case AUTO_YELLOW:
		controlTrafficLights(YELLOW, RED);
 8000968:	2164      	movs	r1, #100	; 0x64
 800096a:	2066      	movs	r0, #102	; 0x66
 800096c:	f001 f94a 	bl	8001c04 <controlTrafficLights>
		if(timer_flag[0] == 1){
 8000970:	4b72      	ldr	r3, [pc, #456]	; (8000b3c <fsm_automatic_run+0x694>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d16e      	bne.n	8000a56 <fsm_automatic_run+0x5ae>
			counter1--;
 8000978:	4b71      	ldr	r3, [pc, #452]	; (8000b40 <fsm_automatic_run+0x698>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	3b01      	subs	r3, #1
 800097e:	4a70      	ldr	r2, [pc, #448]	; (8000b40 <fsm_automatic_run+0x698>)
 8000980:	6013      	str	r3, [r2, #0]
			counter2--;
 8000982:	4b70      	ldr	r3, [pc, #448]	; (8000b44 <fsm_automatic_run+0x69c>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	3b01      	subs	r3, #1
 8000988:	4a6e      	ldr	r2, [pc, #440]	; (8000b44 <fsm_automatic_run+0x69c>)
 800098a:	6013      	str	r3, [r2, #0]
			if(counter1 <= 0){
 800098c:	4b6c      	ldr	r3, [pc, #432]	; (8000b40 <fsm_automatic_run+0x698>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	dc11      	bgt.n	80009b8 <fsm_automatic_run+0x510>
				status = AUTO_RED;
 8000994:	4b6c      	ldr	r3, [pc, #432]	; (8000b48 <fsm_automatic_run+0x6a0>)
 8000996:	2201      	movs	r2, #1
 8000998:	701a      	strb	r2, [r3, #0]
				counter1 = red;
 800099a:	4b6c      	ldr	r3, [pc, #432]	; (8000b4c <fsm_automatic_run+0x6a4>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a68      	ldr	r2, [pc, #416]	; (8000b40 <fsm_automatic_run+0x698>)
 80009a0:	6013      	str	r3, [r2, #0]
				counter2 = green;
 80009a2:	4b6b      	ldr	r3, [pc, #428]	; (8000b50 <fsm_automatic_run+0x6a8>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a67      	ldr	r2, [pc, #412]	; (8000b44 <fsm_automatic_run+0x69c>)
 80009a8:	6013      	str	r3, [r2, #0]
				if(isPed == 1){
 80009aa:	4b6a      	ldr	r3, [pc, #424]	; (8000b54 <fsm_automatic_run+0x6ac>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d102      	bne.n	80009b8 <fsm_automatic_run+0x510>
					buzzer_set(1);
 80009b2:	2001      	movs	r0, #1
 80009b4:	f7ff fd50 	bl	8000458 <buzzer_set>
				}
			}
			counter1_buffer1 = counter1 / 10;
 80009b8:	4b61      	ldr	r3, [pc, #388]	; (8000b40 <fsm_automatic_run+0x698>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a66      	ldr	r2, [pc, #408]	; (8000b58 <fsm_automatic_run+0x6b0>)
 80009be:	fb82 1203 	smull	r1, r2, r2, r3
 80009c2:	1092      	asrs	r2, r2, #2
 80009c4:	17db      	asrs	r3, r3, #31
 80009c6:	1ad3      	subs	r3, r2, r3
 80009c8:	4a64      	ldr	r2, [pc, #400]	; (8000b5c <fsm_automatic_run+0x6b4>)
 80009ca:	6013      	str	r3, [r2, #0]
			counter1_buffer2 = counter1 % 10;
 80009cc:	4b5c      	ldr	r3, [pc, #368]	; (8000b40 <fsm_automatic_run+0x698>)
 80009ce:	6819      	ldr	r1, [r3, #0]
 80009d0:	4b61      	ldr	r3, [pc, #388]	; (8000b58 <fsm_automatic_run+0x6b0>)
 80009d2:	fb83 2301 	smull	r2, r3, r3, r1
 80009d6:	109a      	asrs	r2, r3, #2
 80009d8:	17cb      	asrs	r3, r1, #31
 80009da:	1ad2      	subs	r2, r2, r3
 80009dc:	4613      	mov	r3, r2
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	4413      	add	r3, r2
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	1aca      	subs	r2, r1, r3
 80009e6:	4b5e      	ldr	r3, [pc, #376]	; (8000b60 <fsm_automatic_run+0x6b8>)
 80009e8:	601a      	str	r2, [r3, #0]
			counter2_buffer1 = counter2 / 10;
 80009ea:	4b56      	ldr	r3, [pc, #344]	; (8000b44 <fsm_automatic_run+0x69c>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a5a      	ldr	r2, [pc, #360]	; (8000b58 <fsm_automatic_run+0x6b0>)
 80009f0:	fb82 1203 	smull	r1, r2, r2, r3
 80009f4:	1092      	asrs	r2, r2, #2
 80009f6:	17db      	asrs	r3, r3, #31
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	4a5a      	ldr	r2, [pc, #360]	; (8000b64 <fsm_automatic_run+0x6bc>)
 80009fc:	6013      	str	r3, [r2, #0]
			counter2_buffer2 = counter2 % 10;
 80009fe:	4b51      	ldr	r3, [pc, #324]	; (8000b44 <fsm_automatic_run+0x69c>)
 8000a00:	6819      	ldr	r1, [r3, #0]
 8000a02:	4b55      	ldr	r3, [pc, #340]	; (8000b58 <fsm_automatic_run+0x6b0>)
 8000a04:	fb83 2301 	smull	r2, r3, r3, r1
 8000a08:	109a      	asrs	r2, r3, #2
 8000a0a:	17cb      	asrs	r3, r1, #31
 8000a0c:	1ad2      	subs	r2, r2, r3
 8000a0e:	4613      	mov	r3, r2
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	4413      	add	r3, r2
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	1aca      	subs	r2, r1, r3
 8000a18:	4b53      	ldr	r3, [pc, #332]	; (8000b68 <fsm_automatic_run+0x6c0>)
 8000a1a:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d||%d%d#\r\n",
 8000a1c:	4b4f      	ldr	r3, [pc, #316]	; (8000b5c <fsm_automatic_run+0x6b4>)
 8000a1e:	6819      	ldr	r1, [r3, #0]
 8000a20:	4b4f      	ldr	r3, [pc, #316]	; (8000b60 <fsm_automatic_run+0x6b8>)
 8000a22:	6818      	ldr	r0, [r3, #0]
 8000a24:	4b4f      	ldr	r3, [pc, #316]	; (8000b64 <fsm_automatic_run+0x6bc>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a4f      	ldr	r2, [pc, #316]	; (8000b68 <fsm_automatic_run+0x6c0>)
 8000a2a:	6812      	ldr	r2, [r2, #0]
 8000a2c:	9201      	str	r2, [sp, #4]
 8000a2e:	9300      	str	r3, [sp, #0]
 8000a30:	4603      	mov	r3, r0
 8000a32:	460a      	mov	r2, r1
 8000a34:	494d      	ldr	r1, [pc, #308]	; (8000b6c <fsm_automatic_run+0x6c4>)
 8000a36:	484e      	ldr	r0, [pc, #312]	; (8000b70 <fsm_automatic_run+0x6c8>)
 8000a38:	f004 f930 	bl	8004c9c <siprintf>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a44:	494a      	ldr	r1, [pc, #296]	; (8000b70 <fsm_automatic_run+0x6c8>)
 8000a46:	484b      	ldr	r0, [pc, #300]	; (8000b74 <fsm_automatic_run+0x6cc>)
 8000a48:	f003 ffa8 	bl	800499c <HAL_UART_Transmit>
																counter1_buffer1, counter1_buffer2, counter2_buffer1, counter2_buffer2), 1000);
			setTimer(1000, 0);
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a52:	f001 feb3 	bl	80027bc <setTimer>
		}
		if(timer_flag[1] == 1){
 8000a56:	4b39      	ldr	r3, [pc, #228]	; (8000b3c <fsm_automatic_run+0x694>)
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d115      	bne.n	8000a8a <fsm_automatic_run+0x5e2>
			if(isPed == 1){
 8000a5e:	4b3d      	ldr	r3, [pc, #244]	; (8000b54 <fsm_automatic_run+0x6ac>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d111      	bne.n	8000a8a <fsm_automatic_run+0x5e2>
				isPed = 0;
 8000a66:	4b3b      	ldr	r3, [pc, #236]	; (8000b54 <fsm_automatic_run+0x6ac>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
				controlPedLights(OFF);
 8000a6c:	2067      	movs	r0, #103	; 0x67
 8000a6e:	f001 f94d 	bl	8001d0c <controlPedLights>
				HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_OFF#\r\n"), 1000);
 8000a72:	4941      	ldr	r1, [pc, #260]	; (8000b78 <fsm_automatic_run+0x6d0>)
 8000a74:	483e      	ldr	r0, [pc, #248]	; (8000b70 <fsm_automatic_run+0x6c8>)
 8000a76:	f004 f911 	bl	8004c9c <siprintf>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a82:	493b      	ldr	r1, [pc, #236]	; (8000b70 <fsm_automatic_run+0x6c8>)
 8000a84:	483b      	ldr	r0, [pc, #236]	; (8000b74 <fsm_automatic_run+0x6cc>)
 8000a86:	f003 ff89 	bl	800499c <HAL_UART_Transmit>
			}
		}
		if(isBTPressed(0) == 1){
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f7ff fc0c 	bl	80002a8 <isBTPressed>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d11a      	bne.n	8000acc <fsm_automatic_run+0x624>
			status = MANUAL_INIT;
 8000a96:	4b2c      	ldr	r3, [pc, #176]	; (8000b48 <fsm_automatic_run+0x6a0>)
 8000a98:	2205      	movs	r2, #5
 8000a9a:	701a      	strb	r2, [r3, #0]
			clearTrafficLights();
 8000a9c:	f001 f988 	bl	8001db0 <clearTrafficLights>
			if(isPed == 1){
 8000aa0:	4b2c      	ldr	r3, [pc, #176]	; (8000b54 <fsm_automatic_run+0x6ac>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d111      	bne.n	8000acc <fsm_automatic_run+0x624>
				isPed = 0;
 8000aa8:	4b2a      	ldr	r3, [pc, #168]	; (8000b54 <fsm_automatic_run+0x6ac>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
				controlPedLights(OFF);
 8000aae:	2067      	movs	r0, #103	; 0x67
 8000ab0:	f001 f92c 	bl	8001d0c <controlPedLights>
				HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_OFF#\r\n"), 1000);
 8000ab4:	4930      	ldr	r1, [pc, #192]	; (8000b78 <fsm_automatic_run+0x6d0>)
 8000ab6:	482e      	ldr	r0, [pc, #184]	; (8000b70 <fsm_automatic_run+0x6c8>)
 8000ab8:	f004 f8f0 	bl	8004c9c <siprintf>
 8000abc:	4603      	mov	r3, r0
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac4:	492a      	ldr	r1, [pc, #168]	; (8000b70 <fsm_automatic_run+0x6c8>)
 8000ac6:	482b      	ldr	r0, [pc, #172]	; (8000b74 <fsm_automatic_run+0x6cc>)
 8000ac8:	f003 ff68 	bl	800499c <HAL_UART_Transmit>
			}
		}
		if(isBTPressed(3) == 1){
 8000acc:	2003      	movs	r0, #3
 8000ace:	f7ff fbeb 	bl	80002a8 <isBTPressed>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d113      	bne.n	8000b00 <fsm_automatic_run+0x658>
			isPed = 1;
 8000ad8:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <fsm_automatic_run+0x6ac>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	601a      	str	r2, [r3, #0]
			setTimer(PEDESTRIAN_TIMER, 1);
 8000ade:	2101      	movs	r1, #1
 8000ae0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000ae4:	f001 fe6a 	bl	80027bc <setTimer>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_RED#\r\n"), 1000);
 8000ae8:	4924      	ldr	r1, [pc, #144]	; (8000b7c <fsm_automatic_run+0x6d4>)
 8000aea:	4821      	ldr	r0, [pc, #132]	; (8000b70 <fsm_automatic_run+0x6c8>)
 8000aec:	f004 f8d6 	bl	8004c9c <siprintf>
 8000af0:	4603      	mov	r3, r0
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af8:	491d      	ldr	r1, [pc, #116]	; (8000b70 <fsm_automatic_run+0x6c8>)
 8000afa:	481e      	ldr	r0, [pc, #120]	; (8000b74 <fsm_automatic_run+0x6cc>)
 8000afc:	f003 ff4e 	bl	800499c <HAL_UART_Transmit>
		}
		if(isBTHold(3) == 1){
 8000b00:	2003      	movs	r0, #3
 8000b02:	f7ff fbeb 	bl	80002dc <isBTHold>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d107      	bne.n	8000b1c <fsm_automatic_run+0x674>
			isPed = 1;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <fsm_automatic_run+0x6ac>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	601a      	str	r2, [r3, #0]
			setTimer(PEDESTRIAN_TIMER, 1);
 8000b12:	2101      	movs	r1, #1
 8000b14:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000b18:	f001 fe50 	bl	80027bc <setTimer>
		}
		if(isPed == 1){
 8000b1c:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <fsm_automatic_run+0x6ac>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d102      	bne.n	8000b2a <fsm_automatic_run+0x682>
			controlPedLights(RED);
 8000b24:	2064      	movs	r0, #100	; 0x64
 8000b26:	f001 f8f1 	bl	8001d0c <controlPedLights>
		}
		if(isPed == 0){
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <fsm_automatic_run+0x6ac>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	f040 8117 	bne.w	8000d62 <fsm_automatic_run+0x8ba>
			controlPedLights(OFF);
 8000b34:	2067      	movs	r0, #103	; 0x67
 8000b36:	f001 f8e9 	bl	8001d0c <controlPedLights>
		}
		break;
 8000b3a:	e112      	b.n	8000d62 <fsm_automatic_run+0x8ba>
 8000b3c:	2000035c 	.word	0x2000035c
 8000b40:	20000144 	.word	0x20000144
 8000b44:	20000148 	.word	0x20000148
 8000b48:	20000192 	.word	0x20000192
 8000b4c:	20000094 	.word	0x20000094
 8000b50:	20000098 	.word	0x20000098
 8000b54:	2000015c 	.word	0x2000015c
 8000b58:	66666667 	.word	0x66666667
 8000b5c:	2000014c 	.word	0x2000014c
 8000b60:	20000150 	.word	0x20000150
 8000b64:	20000154 	.word	0x20000154
 8000b68:	20000158 	.word	0x20000158
 8000b6c:	08005638 	.word	0x08005638
 8000b70:	20000160 	.word	0x20000160
 8000b74:	20000224 	.word	0x20000224
 8000b78:	0800564c 	.word	0x0800564c
 8000b7c:	08005678 	.word	0x08005678
	case AUTO_RED1_YELLOW2:
		controlTrafficLights(RED, YELLOW);
 8000b80:	2166      	movs	r1, #102	; 0x66
 8000b82:	2064      	movs	r0, #100	; 0x64
 8000b84:	f001 f83e 	bl	8001c04 <controlTrafficLights>
		if(timer_flag[0] == 1){
 8000b88:	4b79      	ldr	r3, [pc, #484]	; (8000d70 <fsm_automatic_run+0x8c8>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d16a      	bne.n	8000c66 <fsm_automatic_run+0x7be>
			counter1--;
 8000b90:	4b78      	ldr	r3, [pc, #480]	; (8000d74 <fsm_automatic_run+0x8cc>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	3b01      	subs	r3, #1
 8000b96:	4a77      	ldr	r2, [pc, #476]	; (8000d74 <fsm_automatic_run+0x8cc>)
 8000b98:	6013      	str	r3, [r2, #0]
			counter2--;
 8000b9a:	4b77      	ldr	r3, [pc, #476]	; (8000d78 <fsm_automatic_run+0x8d0>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	4a75      	ldr	r2, [pc, #468]	; (8000d78 <fsm_automatic_run+0x8d0>)
 8000ba2:	6013      	str	r3, [r2, #0]
			if(counter2 == 0){
 8000ba4:	4b74      	ldr	r3, [pc, #464]	; (8000d78 <fsm_automatic_run+0x8d0>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d10d      	bne.n	8000bc8 <fsm_automatic_run+0x720>
				counter1 = green;
 8000bac:	4b73      	ldr	r3, [pc, #460]	; (8000d7c <fsm_automatic_run+0x8d4>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a70      	ldr	r2, [pc, #448]	; (8000d74 <fsm_automatic_run+0x8cc>)
 8000bb2:	6013      	str	r3, [r2, #0]
				counter2 = red;
 8000bb4:	4b72      	ldr	r3, [pc, #456]	; (8000d80 <fsm_automatic_run+0x8d8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a6f      	ldr	r2, [pc, #444]	; (8000d78 <fsm_automatic_run+0x8d0>)
 8000bba:	6013      	str	r3, [r2, #0]
				status = AUTO_GREEN;
 8000bbc:	4b71      	ldr	r3, [pc, #452]	; (8000d84 <fsm_automatic_run+0x8dc>)
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	701a      	strb	r2, [r3, #0]
				buzzer_set(0);
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f7ff fc48 	bl	8000458 <buzzer_set>
			}
			counter1_buffer1 = counter1 / 10;
 8000bc8:	4b6a      	ldr	r3, [pc, #424]	; (8000d74 <fsm_automatic_run+0x8cc>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a6e      	ldr	r2, [pc, #440]	; (8000d88 <fsm_automatic_run+0x8e0>)
 8000bce:	fb82 1203 	smull	r1, r2, r2, r3
 8000bd2:	1092      	asrs	r2, r2, #2
 8000bd4:	17db      	asrs	r3, r3, #31
 8000bd6:	1ad3      	subs	r3, r2, r3
 8000bd8:	4a6c      	ldr	r2, [pc, #432]	; (8000d8c <fsm_automatic_run+0x8e4>)
 8000bda:	6013      	str	r3, [r2, #0]
			counter1_buffer2 = counter1 % 10;
 8000bdc:	4b65      	ldr	r3, [pc, #404]	; (8000d74 <fsm_automatic_run+0x8cc>)
 8000bde:	6819      	ldr	r1, [r3, #0]
 8000be0:	4b69      	ldr	r3, [pc, #420]	; (8000d88 <fsm_automatic_run+0x8e0>)
 8000be2:	fb83 2301 	smull	r2, r3, r3, r1
 8000be6:	109a      	asrs	r2, r3, #2
 8000be8:	17cb      	asrs	r3, r1, #31
 8000bea:	1ad2      	subs	r2, r2, r3
 8000bec:	4613      	mov	r3, r2
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	4413      	add	r3, r2
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	1aca      	subs	r2, r1, r3
 8000bf6:	4b66      	ldr	r3, [pc, #408]	; (8000d90 <fsm_automatic_run+0x8e8>)
 8000bf8:	601a      	str	r2, [r3, #0]
			counter2_buffer1 = counter2 / 10;
 8000bfa:	4b5f      	ldr	r3, [pc, #380]	; (8000d78 <fsm_automatic_run+0x8d0>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a62      	ldr	r2, [pc, #392]	; (8000d88 <fsm_automatic_run+0x8e0>)
 8000c00:	fb82 1203 	smull	r1, r2, r2, r3
 8000c04:	1092      	asrs	r2, r2, #2
 8000c06:	17db      	asrs	r3, r3, #31
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	4a62      	ldr	r2, [pc, #392]	; (8000d94 <fsm_automatic_run+0x8ec>)
 8000c0c:	6013      	str	r3, [r2, #0]
			counter2_buffer2 = counter2 % 10;
 8000c0e:	4b5a      	ldr	r3, [pc, #360]	; (8000d78 <fsm_automatic_run+0x8d0>)
 8000c10:	6819      	ldr	r1, [r3, #0]
 8000c12:	4b5d      	ldr	r3, [pc, #372]	; (8000d88 <fsm_automatic_run+0x8e0>)
 8000c14:	fb83 2301 	smull	r2, r3, r3, r1
 8000c18:	109a      	asrs	r2, r3, #2
 8000c1a:	17cb      	asrs	r3, r1, #31
 8000c1c:	1ad2      	subs	r2, r2, r3
 8000c1e:	4613      	mov	r3, r2
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	4413      	add	r3, r2
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	1aca      	subs	r2, r1, r3
 8000c28:	4b5b      	ldr	r3, [pc, #364]	; (8000d98 <fsm_automatic_run+0x8f0>)
 8000c2a:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d||%d%d#\r\n",
 8000c2c:	4b57      	ldr	r3, [pc, #348]	; (8000d8c <fsm_automatic_run+0x8e4>)
 8000c2e:	6819      	ldr	r1, [r3, #0]
 8000c30:	4b57      	ldr	r3, [pc, #348]	; (8000d90 <fsm_automatic_run+0x8e8>)
 8000c32:	6818      	ldr	r0, [r3, #0]
 8000c34:	4b57      	ldr	r3, [pc, #348]	; (8000d94 <fsm_automatic_run+0x8ec>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a57      	ldr	r2, [pc, #348]	; (8000d98 <fsm_automatic_run+0x8f0>)
 8000c3a:	6812      	ldr	r2, [r2, #0]
 8000c3c:	9201      	str	r2, [sp, #4]
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	4603      	mov	r3, r0
 8000c42:	460a      	mov	r2, r1
 8000c44:	4955      	ldr	r1, [pc, #340]	; (8000d9c <fsm_automatic_run+0x8f4>)
 8000c46:	4856      	ldr	r0, [pc, #344]	; (8000da0 <fsm_automatic_run+0x8f8>)
 8000c48:	f004 f828 	bl	8004c9c <siprintf>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c54:	4952      	ldr	r1, [pc, #328]	; (8000da0 <fsm_automatic_run+0x8f8>)
 8000c56:	4853      	ldr	r0, [pc, #332]	; (8000da4 <fsm_automatic_run+0x8fc>)
 8000c58:	f003 fea0 	bl	800499c <HAL_UART_Transmit>
																counter1_buffer1, counter1_buffer2, counter2_buffer1, counter2_buffer2), 1000);

			setTimer(1000, 0);
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c62:	f001 fdab 	bl	80027bc <setTimer>
		}
		if(timer_flag[1] == 1){
 8000c66:	4b42      	ldr	r3, [pc, #264]	; (8000d70 <fsm_automatic_run+0x8c8>)
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d118      	bne.n	8000ca0 <fsm_automatic_run+0x7f8>
			if(isPed == 1){
 8000c6e:	4b4e      	ldr	r3, [pc, #312]	; (8000da8 <fsm_automatic_run+0x900>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d114      	bne.n	8000ca0 <fsm_automatic_run+0x7f8>
				isPed = 0;
 8000c76:	4b4c      	ldr	r3, [pc, #304]	; (8000da8 <fsm_automatic_run+0x900>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
				buzzer_set(0);
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f7ff fbeb 	bl	8000458 <buzzer_set>
				controlPedLights(OFF);
 8000c82:	2067      	movs	r0, #103	; 0x67
 8000c84:	f001 f842 	bl	8001d0c <controlPedLights>
				HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_OFF#\r\n"), 1000);
 8000c88:	4948      	ldr	r1, [pc, #288]	; (8000dac <fsm_automatic_run+0x904>)
 8000c8a:	4845      	ldr	r0, [pc, #276]	; (8000da0 <fsm_automatic_run+0x8f8>)
 8000c8c:	f004 f806 	bl	8004c9c <siprintf>
 8000c90:	4603      	mov	r3, r0
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c98:	4941      	ldr	r1, [pc, #260]	; (8000da0 <fsm_automatic_run+0x8f8>)
 8000c9a:	4842      	ldr	r0, [pc, #264]	; (8000da4 <fsm_automatic_run+0x8fc>)
 8000c9c:	f003 fe7e 	bl	800499c <HAL_UART_Transmit>
			}
		}
		if(isBTPressed(0) == 1){
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f7ff fb01 	bl	80002a8 <isBTPressed>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d11d      	bne.n	8000ce8 <fsm_automatic_run+0x840>
			status = MANUAL_INIT;
 8000cac:	4b35      	ldr	r3, [pc, #212]	; (8000d84 <fsm_automatic_run+0x8dc>)
 8000cae:	2205      	movs	r2, #5
 8000cb0:	701a      	strb	r2, [r3, #0]
			clearTrafficLights();
 8000cb2:	f001 f87d 	bl	8001db0 <clearTrafficLights>
			if(isPed == 1){
 8000cb6:	4b3c      	ldr	r3, [pc, #240]	; (8000da8 <fsm_automatic_run+0x900>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d114      	bne.n	8000ce8 <fsm_automatic_run+0x840>
				isPed = 0;
 8000cbe:	4b3a      	ldr	r3, [pc, #232]	; (8000da8 <fsm_automatic_run+0x900>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
				buzzer_set(0);
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f7ff fbc7 	bl	8000458 <buzzer_set>
				controlPedLights(OFF);
 8000cca:	2067      	movs	r0, #103	; 0x67
 8000ccc:	f001 f81e 	bl	8001d0c <controlPedLights>
				HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_OFF#\r\n"), 1000);
 8000cd0:	4936      	ldr	r1, [pc, #216]	; (8000dac <fsm_automatic_run+0x904>)
 8000cd2:	4833      	ldr	r0, [pc, #204]	; (8000da0 <fsm_automatic_run+0x8f8>)
 8000cd4:	f003 ffe2 	bl	8004c9c <siprintf>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce0:	492f      	ldr	r1, [pc, #188]	; (8000da0 <fsm_automatic_run+0x8f8>)
 8000ce2:	4830      	ldr	r0, [pc, #192]	; (8000da4 <fsm_automatic_run+0x8fc>)
 8000ce4:	f003 fe5a 	bl	800499c <HAL_UART_Transmit>
			}
		}
		if(isBTPressed(3) == 1){
 8000ce8:	2003      	movs	r0, #3
 8000cea:	f7ff fadd 	bl	80002a8 <isBTPressed>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d113      	bne.n	8000d1c <fsm_automatic_run+0x874>
			isPed = 1;
 8000cf4:	4b2c      	ldr	r3, [pc, #176]	; (8000da8 <fsm_automatic_run+0x900>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	601a      	str	r2, [r3, #0]
			setTimer(PEDESTRIAN_TIMER, 1);
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000d00:	f001 fd5c 	bl	80027bc <setTimer>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_YELLOW#\r\n"), 1000);
 8000d04:	492a      	ldr	r1, [pc, #168]	; (8000db0 <fsm_automatic_run+0x908>)
 8000d06:	4826      	ldr	r0, [pc, #152]	; (8000da0 <fsm_automatic_run+0x8f8>)
 8000d08:	f003 ffc8 	bl	8004c9c <siprintf>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d14:	4922      	ldr	r1, [pc, #136]	; (8000da0 <fsm_automatic_run+0x8f8>)
 8000d16:	4823      	ldr	r0, [pc, #140]	; (8000da4 <fsm_automatic_run+0x8fc>)
 8000d18:	f003 fe40 	bl	800499c <HAL_UART_Transmit>
		}
		if(isBTHold(3) == 1){
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f7ff fadd 	bl	80002dc <isBTHold>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d107      	bne.n	8000d38 <fsm_automatic_run+0x890>
			isPed = 1;
 8000d28:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <fsm_automatic_run+0x900>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	601a      	str	r2, [r3, #0]
			setTimer(PEDESTRIAN_TIMER, 1);
 8000d2e:	2101      	movs	r1, #1
 8000d30:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000d34:	f001 fd42 	bl	80027bc <setTimer>
		}
		if(isPed == 1){
 8000d38:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <fsm_automatic_run+0x900>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d102      	bne.n	8000d46 <fsm_automatic_run+0x89e>
			controlPedLights(YELLOW);
 8000d40:	2066      	movs	r0, #102	; 0x66
 8000d42:	f000 ffe3 	bl	8001d0c <controlPedLights>
		}
		if(isPed == 0){
 8000d46:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <fsm_automatic_run+0x900>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d10b      	bne.n	8000d66 <fsm_automatic_run+0x8be>
			controlPedLights(OFF);
 8000d4e:	2067      	movs	r0, #103	; 0x67
 8000d50:	f000 ffdc 	bl	8001d0c <controlPedLights>
		}
		break;
 8000d54:	e007      	b.n	8000d66 <fsm_automatic_run+0x8be>
	default:
		break;
 8000d56:	bf00      	nop
 8000d58:	e006      	b.n	8000d68 <fsm_automatic_run+0x8c0>
		break;
 8000d5a:	bf00      	nop
 8000d5c:	e004      	b.n	8000d68 <fsm_automatic_run+0x8c0>
		break;
 8000d5e:	bf00      	nop
 8000d60:	e002      	b.n	8000d68 <fsm_automatic_run+0x8c0>
		break;
 8000d62:	bf00      	nop
 8000d64:	e000      	b.n	8000d68 <fsm_automatic_run+0x8c0>
		break;
 8000d66:	bf00      	nop
	}
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	2000035c 	.word	0x2000035c
 8000d74:	20000144 	.word	0x20000144
 8000d78:	20000148 	.word	0x20000148
 8000d7c:	20000098 	.word	0x20000098
 8000d80:	20000094 	.word	0x20000094
 8000d84:	20000192 	.word	0x20000192
 8000d88:	66666667 	.word	0x66666667
 8000d8c:	2000014c 	.word	0x2000014c
 8000d90:	20000150 	.word	0x20000150
 8000d94:	20000154 	.word	0x20000154
 8000d98:	20000158 	.word	0x20000158
 8000d9c:	08005638 	.word	0x08005638
 8000da0:	20000160 	.word	0x20000160
 8000da4:	20000224 	.word	0x20000224
 8000da8:	2000015c 	.word	0x2000015c
 8000dac:	0800564c 	.word	0x0800564c
 8000db0:	0800568c 	.word	0x0800568c

08000db4 <fsm_manual_run>:
#include "button.h"
#include "buzzer.h"

// Used timers: timer[2]: Ped timeout(5000)

void fsm_manual_run(){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	switch(status){
 8000db8:	4b83      	ldr	r3, [pc, #524]	; (8000fc8 <fsm_manual_run+0x214>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	3b05      	subs	r3, #5
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	f200 81ee 	bhi.w	80011a0 <fsm_manual_run+0x3ec>
 8000dc4:	a201      	add	r2, pc, #4	; (adr r2, 8000dcc <fsm_manual_run+0x18>)
 8000dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dca:	bf00      	nop
 8000dcc:	08000de1 	.word	0x08000de1
 8000dd0:	08000e07 	.word	0x08000e07
 8000dd4:	08000ee7 	.word	0x08000ee7
 8000dd8:	08000fed 	.word	0x08000fed
 8000ddc:	080010c3 	.word	0x080010c3
	case MANUAL_INIT:
		status = MANUAL_RED;
 8000de0:	4b79      	ldr	r3, [pc, #484]	; (8000fc8 <fsm_manual_run+0x214>)
 8000de2:	2206      	movs	r2, #6
 8000de4:	701a      	strb	r2, [r3, #0]
		buzzer_set(0);
 8000de6:	2000      	movs	r0, #0
 8000de8:	f7ff fb36 	bl	8000458 <buzzer_set>
		HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!MANUAL#\r\n"), 1000);
 8000dec:	4977      	ldr	r1, [pc, #476]	; (8000fcc <fsm_manual_run+0x218>)
 8000dee:	4878      	ldr	r0, [pc, #480]	; (8000fd0 <fsm_manual_run+0x21c>)
 8000df0:	f003 ff54 	bl	8004c9c <siprintf>
 8000df4:	4603      	mov	r3, r0
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dfc:	4974      	ldr	r1, [pc, #464]	; (8000fd0 <fsm_manual_run+0x21c>)
 8000dfe:	4875      	ldr	r0, [pc, #468]	; (8000fd4 <fsm_manual_run+0x220>)
 8000e00:	f003 fdcc 	bl	800499c <HAL_UART_Transmit>
	break;
 8000e04:	e1d5      	b.n	80011b2 <fsm_manual_run+0x3fe>
	case MANUAL_RED:
		controlTrafficLights(RED, GREEN);
 8000e06:	2165      	movs	r1, #101	; 0x65
 8000e08:	2064      	movs	r0, #100	; 0x64
 8000e0a:	f000 fefb 	bl	8001c04 <controlTrafficLights>
		if(timer_flag[2] == 1 && isPed == 1){
 8000e0e:	4b72      	ldr	r3, [pc, #456]	; (8000fd8 <fsm_manual_run+0x224>)
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d115      	bne.n	8000e42 <fsm_manual_run+0x8e>
 8000e16:	4b71      	ldr	r3, [pc, #452]	; (8000fdc <fsm_manual_run+0x228>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d111      	bne.n	8000e42 <fsm_manual_run+0x8e>
			isPed = 0;
 8000e1e:	4b6f      	ldr	r3, [pc, #444]	; (8000fdc <fsm_manual_run+0x228>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
			controlPedLights(OFF);
 8000e24:	2067      	movs	r0, #103	; 0x67
 8000e26:	f000 ff71 	bl	8001d0c <controlPedLights>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_OFF#\r\n"), 1000);
 8000e2a:	496d      	ldr	r1, [pc, #436]	; (8000fe0 <fsm_manual_run+0x22c>)
 8000e2c:	4868      	ldr	r0, [pc, #416]	; (8000fd0 <fsm_manual_run+0x21c>)
 8000e2e:	f003 ff35 	bl	8004c9c <siprintf>
 8000e32:	4603      	mov	r3, r0
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3a:	4965      	ldr	r1, [pc, #404]	; (8000fd0 <fsm_manual_run+0x21c>)
 8000e3c:	4865      	ldr	r0, [pc, #404]	; (8000fd4 <fsm_manual_run+0x220>)
 8000e3e:	f003 fdad 	bl	800499c <HAL_UART_Transmit>
		}
		if(isBTPressed(0) == 1){
 8000e42:	2000      	movs	r0, #0
 8000e44:	f7ff fa30 	bl	80002a8 <isBTPressed>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d118      	bne.n	8000e80 <fsm_manual_run+0xcc>
			status = TUNING_INIT;
 8000e4e:	4b5e      	ldr	r3, [pc, #376]	; (8000fc8 <fsm_manual_run+0x214>)
 8000e50:	220a      	movs	r2, #10
 8000e52:	701a      	strb	r2, [r3, #0]
			if(isPed == 1){
 8000e54:	4b61      	ldr	r3, [pc, #388]	; (8000fdc <fsm_manual_run+0x228>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d111      	bne.n	8000e80 <fsm_manual_run+0xcc>
				isPed = 0;
 8000e5c:	4b5f      	ldr	r3, [pc, #380]	; (8000fdc <fsm_manual_run+0x228>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
				controlPedLights(OFF);
 8000e62:	2067      	movs	r0, #103	; 0x67
 8000e64:	f000 ff52 	bl	8001d0c <controlPedLights>
				HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_OFF#\r\n"), 1000);
 8000e68:	495d      	ldr	r1, [pc, #372]	; (8000fe0 <fsm_manual_run+0x22c>)
 8000e6a:	4859      	ldr	r0, [pc, #356]	; (8000fd0 <fsm_manual_run+0x21c>)
 8000e6c:	f003 ff16 	bl	8004c9c <siprintf>
 8000e70:	4603      	mov	r3, r0
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e78:	4955      	ldr	r1, [pc, #340]	; (8000fd0 <fsm_manual_run+0x21c>)
 8000e7a:	4856      	ldr	r0, [pc, #344]	; (8000fd4 <fsm_manual_run+0x220>)
 8000e7c:	f003 fd8e 	bl	800499c <HAL_UART_Transmit>
			}
		}
		if(isBTPressed(1) == 1){
 8000e80:	2001      	movs	r0, #1
 8000e82:	f7ff fa11 	bl	80002a8 <isBTPressed>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d102      	bne.n	8000e92 <fsm_manual_run+0xde>
			status = MANUAL_RED1_YELLOW2;
 8000e8c:	4b4e      	ldr	r3, [pc, #312]	; (8000fc8 <fsm_manual_run+0x214>)
 8000e8e:	2209      	movs	r2, #9
 8000e90:	701a      	strb	r2, [r3, #0]
		}
		if(isBTPressed(3) == 1){
 8000e92:	2003      	movs	r0, #3
 8000e94:	f7ff fa08 	bl	80002a8 <isBTPressed>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d113      	bne.n	8000ec6 <fsm_manual_run+0x112>
			isPed = 1;
 8000e9e:	4b4f      	ldr	r3, [pc, #316]	; (8000fdc <fsm_manual_run+0x228>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	601a      	str	r2, [r3, #0]
			setTimer(PEDESTRIAN_TIMER, 2);
 8000ea4:	2102      	movs	r1, #2
 8000ea6:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000eaa:	f001 fc87 	bl	80027bc <setTimer>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_GREEN#\r\n"), 1000);
 8000eae:	494d      	ldr	r1, [pc, #308]	; (8000fe4 <fsm_manual_run+0x230>)
 8000eb0:	4847      	ldr	r0, [pc, #284]	; (8000fd0 <fsm_manual_run+0x21c>)
 8000eb2:	f003 fef3 	bl	8004c9c <siprintf>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebe:	4944      	ldr	r1, [pc, #272]	; (8000fd0 <fsm_manual_run+0x21c>)
 8000ec0:	4844      	ldr	r0, [pc, #272]	; (8000fd4 <fsm_manual_run+0x220>)
 8000ec2:	f003 fd6b 	bl	800499c <HAL_UART_Transmit>
		}
		if(isPed == 1){
 8000ec6:	4b45      	ldr	r3, [pc, #276]	; (8000fdc <fsm_manual_run+0x228>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d102      	bne.n	8000ed4 <fsm_manual_run+0x120>
			controlPedLights(GREEN);
 8000ece:	2065      	movs	r0, #101	; 0x65
 8000ed0:	f000 ff1c 	bl	8001d0c <controlPedLights>
		}
		if(isPed == 0){
 8000ed4:	4b41      	ldr	r3, [pc, #260]	; (8000fdc <fsm_manual_run+0x228>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f040 8163 	bne.w	80011a4 <fsm_manual_run+0x3f0>
			controlPedLights(OFF);
 8000ede:	2067      	movs	r0, #103	; 0x67
 8000ee0:	f000 ff14 	bl	8001d0c <controlPedLights>
		}
		break;
 8000ee4:	e15e      	b.n	80011a4 <fsm_manual_run+0x3f0>
	case MANUAL_GREEN:
		controlTrafficLights(GREEN, RED);
 8000ee6:	2164      	movs	r1, #100	; 0x64
 8000ee8:	2065      	movs	r0, #101	; 0x65
 8000eea:	f000 fe8b 	bl	8001c04 <controlTrafficLights>
		if(timer_flag[2] == 1 && isPed == 1){
 8000eee:	4b3a      	ldr	r3, [pc, #232]	; (8000fd8 <fsm_manual_run+0x224>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d115      	bne.n	8000f22 <fsm_manual_run+0x16e>
 8000ef6:	4b39      	ldr	r3, [pc, #228]	; (8000fdc <fsm_manual_run+0x228>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d111      	bne.n	8000f22 <fsm_manual_run+0x16e>
			isPed = 0;
 8000efe:	4b37      	ldr	r3, [pc, #220]	; (8000fdc <fsm_manual_run+0x228>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
			controlPedLights(OFF);
 8000f04:	2067      	movs	r0, #103	; 0x67
 8000f06:	f000 ff01 	bl	8001d0c <controlPedLights>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_OFF#\r\n"), 1000);
 8000f0a:	4935      	ldr	r1, [pc, #212]	; (8000fe0 <fsm_manual_run+0x22c>)
 8000f0c:	4830      	ldr	r0, [pc, #192]	; (8000fd0 <fsm_manual_run+0x21c>)
 8000f0e:	f003 fec5 	bl	8004c9c <siprintf>
 8000f12:	4603      	mov	r3, r0
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1a:	492d      	ldr	r1, [pc, #180]	; (8000fd0 <fsm_manual_run+0x21c>)
 8000f1c:	482d      	ldr	r0, [pc, #180]	; (8000fd4 <fsm_manual_run+0x220>)
 8000f1e:	f003 fd3d 	bl	800499c <HAL_UART_Transmit>
		}
		if(isBTPressed(0) == 1){
 8000f22:	2000      	movs	r0, #0
 8000f24:	f7ff f9c0 	bl	80002a8 <isBTPressed>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d118      	bne.n	8000f60 <fsm_manual_run+0x1ac>
			status = TUNING_INIT;
 8000f2e:	4b26      	ldr	r3, [pc, #152]	; (8000fc8 <fsm_manual_run+0x214>)
 8000f30:	220a      	movs	r2, #10
 8000f32:	701a      	strb	r2, [r3, #0]
			if(isPed == 1){
 8000f34:	4b29      	ldr	r3, [pc, #164]	; (8000fdc <fsm_manual_run+0x228>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d111      	bne.n	8000f60 <fsm_manual_run+0x1ac>
				isPed = 0;
 8000f3c:	4b27      	ldr	r3, [pc, #156]	; (8000fdc <fsm_manual_run+0x228>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
				controlPedLights(OFF);
 8000f42:	2067      	movs	r0, #103	; 0x67
 8000f44:	f000 fee2 	bl	8001d0c <controlPedLights>
				HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_OFF#\r\n"), 1000);
 8000f48:	4925      	ldr	r1, [pc, #148]	; (8000fe0 <fsm_manual_run+0x22c>)
 8000f4a:	4821      	ldr	r0, [pc, #132]	; (8000fd0 <fsm_manual_run+0x21c>)
 8000f4c:	f003 fea6 	bl	8004c9c <siprintf>
 8000f50:	4603      	mov	r3, r0
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f58:	491d      	ldr	r1, [pc, #116]	; (8000fd0 <fsm_manual_run+0x21c>)
 8000f5a:	481e      	ldr	r0, [pc, #120]	; (8000fd4 <fsm_manual_run+0x220>)
 8000f5c:	f003 fd1e 	bl	800499c <HAL_UART_Transmit>
			}
		}
		if(isBTPressed(1) == 1){
 8000f60:	2001      	movs	r0, #1
 8000f62:	f7ff f9a1 	bl	80002a8 <isBTPressed>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d102      	bne.n	8000f72 <fsm_manual_run+0x1be>
			status = MANUAL_YELLOW;
 8000f6c:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <fsm_manual_run+0x214>)
 8000f6e:	2208      	movs	r2, #8
 8000f70:	701a      	strb	r2, [r3, #0]
		}
		if(isBTPressed(3) == 1){
 8000f72:	2003      	movs	r0, #3
 8000f74:	f7ff f998 	bl	80002a8 <isBTPressed>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d113      	bne.n	8000fa6 <fsm_manual_run+0x1f2>
			isPed = 1;
 8000f7e:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <fsm_manual_run+0x228>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	601a      	str	r2, [r3, #0]
			setTimer(PEDESTRIAN_TIMER, 2);
 8000f84:	2102      	movs	r1, #2
 8000f86:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000f8a:	f001 fc17 	bl	80027bc <setTimer>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_RED#\r\n"), 1000);
 8000f8e:	4916      	ldr	r1, [pc, #88]	; (8000fe8 <fsm_manual_run+0x234>)
 8000f90:	480f      	ldr	r0, [pc, #60]	; (8000fd0 <fsm_manual_run+0x21c>)
 8000f92:	f003 fe83 	bl	8004c9c <siprintf>
 8000f96:	4603      	mov	r3, r0
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9e:	490c      	ldr	r1, [pc, #48]	; (8000fd0 <fsm_manual_run+0x21c>)
 8000fa0:	480c      	ldr	r0, [pc, #48]	; (8000fd4 <fsm_manual_run+0x220>)
 8000fa2:	f003 fcfb 	bl	800499c <HAL_UART_Transmit>
		}
		if(isPed == 1){
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <fsm_manual_run+0x228>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d102      	bne.n	8000fb4 <fsm_manual_run+0x200>
			controlPedLights(RED);
 8000fae:	2064      	movs	r0, #100	; 0x64
 8000fb0:	f000 feac 	bl	8001d0c <controlPedLights>
		}
		if(isPed == 0){
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <fsm_manual_run+0x228>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	f040 80f5 	bne.w	80011a8 <fsm_manual_run+0x3f4>
			controlPedLights(OFF);
 8000fbe:	2067      	movs	r0, #103	; 0x67
 8000fc0:	f000 fea4 	bl	8001d0c <controlPedLights>
		}
		break;
 8000fc4:	e0f0      	b.n	80011a8 <fsm_manual_run+0x3f4>
 8000fc6:	bf00      	nop
 8000fc8:	20000192 	.word	0x20000192
 8000fcc:	080056a4 	.word	0x080056a4
 8000fd0:	20000160 	.word	0x20000160
 8000fd4:	20000224 	.word	0x20000224
 8000fd8:	2000035c 	.word	0x2000035c
 8000fdc:	2000015c 	.word	0x2000015c
 8000fe0:	080056b0 	.word	0x080056b0
 8000fe4:	080056c4 	.word	0x080056c4
 8000fe8:	080056dc 	.word	0x080056dc
	case MANUAL_YELLOW:
		controlTrafficLights(YELLOW, RED);
 8000fec:	2164      	movs	r1, #100	; 0x64
 8000fee:	2066      	movs	r0, #102	; 0x66
 8000ff0:	f000 fe08 	bl	8001c04 <controlTrafficLights>
		if(timer_flag[2] == 1){
 8000ff4:	4b70      	ldr	r3, [pc, #448]	; (80011b8 <fsm_manual_run+0x404>)
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d111      	bne.n	8001020 <fsm_manual_run+0x26c>
			isPed = 0;
 8000ffc:	4b6f      	ldr	r3, [pc, #444]	; (80011bc <fsm_manual_run+0x408>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
			controlPedLights(OFF);
 8001002:	2067      	movs	r0, #103	; 0x67
 8001004:	f000 fe82 	bl	8001d0c <controlPedLights>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_OFF#\r\n"), 1000);
 8001008:	496d      	ldr	r1, [pc, #436]	; (80011c0 <fsm_manual_run+0x40c>)
 800100a:	486e      	ldr	r0, [pc, #440]	; (80011c4 <fsm_manual_run+0x410>)
 800100c:	f003 fe46 	bl	8004c9c <siprintf>
 8001010:	4603      	mov	r3, r0
 8001012:	b29a      	uxth	r2, r3
 8001014:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001018:	496a      	ldr	r1, [pc, #424]	; (80011c4 <fsm_manual_run+0x410>)
 800101a:	486b      	ldr	r0, [pc, #428]	; (80011c8 <fsm_manual_run+0x414>)
 800101c:	f003 fcbe 	bl	800499c <HAL_UART_Transmit>
		}
		if(isBTPressed(0) == 1){
 8001020:	2000      	movs	r0, #0
 8001022:	f7ff f941 	bl	80002a8 <isBTPressed>
 8001026:	4603      	mov	r3, r0
 8001028:	2b01      	cmp	r3, #1
 800102a:	d118      	bne.n	800105e <fsm_manual_run+0x2aa>
			status = TUNING_INIT;
 800102c:	4b67      	ldr	r3, [pc, #412]	; (80011cc <fsm_manual_run+0x418>)
 800102e:	220a      	movs	r2, #10
 8001030:	701a      	strb	r2, [r3, #0]
			if(isPed == 1){
 8001032:	4b62      	ldr	r3, [pc, #392]	; (80011bc <fsm_manual_run+0x408>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d111      	bne.n	800105e <fsm_manual_run+0x2aa>
				isPed = 0;
 800103a:	4b60      	ldr	r3, [pc, #384]	; (80011bc <fsm_manual_run+0x408>)
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
				controlPedLights(OFF);
 8001040:	2067      	movs	r0, #103	; 0x67
 8001042:	f000 fe63 	bl	8001d0c <controlPedLights>
				HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_OFF#\r\n"), 1000);
 8001046:	495e      	ldr	r1, [pc, #376]	; (80011c0 <fsm_manual_run+0x40c>)
 8001048:	485e      	ldr	r0, [pc, #376]	; (80011c4 <fsm_manual_run+0x410>)
 800104a:	f003 fe27 	bl	8004c9c <siprintf>
 800104e:	4603      	mov	r3, r0
 8001050:	b29a      	uxth	r2, r3
 8001052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001056:	495b      	ldr	r1, [pc, #364]	; (80011c4 <fsm_manual_run+0x410>)
 8001058:	485b      	ldr	r0, [pc, #364]	; (80011c8 <fsm_manual_run+0x414>)
 800105a:	f003 fc9f 	bl	800499c <HAL_UART_Transmit>
			}
		}
		if(isBTPressed(1) == 1){
 800105e:	2001      	movs	r0, #1
 8001060:	f7ff f922 	bl	80002a8 <isBTPressed>
 8001064:	4603      	mov	r3, r0
 8001066:	2b01      	cmp	r3, #1
 8001068:	d102      	bne.n	8001070 <fsm_manual_run+0x2bc>
			status = MANUAL_RED;
 800106a:	4b58      	ldr	r3, [pc, #352]	; (80011cc <fsm_manual_run+0x418>)
 800106c:	2206      	movs	r2, #6
 800106e:	701a      	strb	r2, [r3, #0]
		}
		if(isBTPressed(3) == 1){
 8001070:	2003      	movs	r0, #3
 8001072:	f7ff f919 	bl	80002a8 <isBTPressed>
 8001076:	4603      	mov	r3, r0
 8001078:	2b01      	cmp	r3, #1
 800107a:	d113      	bne.n	80010a4 <fsm_manual_run+0x2f0>
			isPed = 1;
 800107c:	4b4f      	ldr	r3, [pc, #316]	; (80011bc <fsm_manual_run+0x408>)
 800107e:	2201      	movs	r2, #1
 8001080:	601a      	str	r2, [r3, #0]
			setTimer(PEDESTRIAN_TIMER, 2);
 8001082:	2102      	movs	r1, #2
 8001084:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001088:	f001 fb98 	bl	80027bc <setTimer>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_RED#\r\n"), 1000);
 800108c:	4950      	ldr	r1, [pc, #320]	; (80011d0 <fsm_manual_run+0x41c>)
 800108e:	484d      	ldr	r0, [pc, #308]	; (80011c4 <fsm_manual_run+0x410>)
 8001090:	f003 fe04 	bl	8004c9c <siprintf>
 8001094:	4603      	mov	r3, r0
 8001096:	b29a      	uxth	r2, r3
 8001098:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109c:	4949      	ldr	r1, [pc, #292]	; (80011c4 <fsm_manual_run+0x410>)
 800109e:	484a      	ldr	r0, [pc, #296]	; (80011c8 <fsm_manual_run+0x414>)
 80010a0:	f003 fc7c 	bl	800499c <HAL_UART_Transmit>
		}
		if(isPed == 1){
 80010a4:	4b45      	ldr	r3, [pc, #276]	; (80011bc <fsm_manual_run+0x408>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d102      	bne.n	80010b2 <fsm_manual_run+0x2fe>
			controlPedLights(RED);
 80010ac:	2064      	movs	r0, #100	; 0x64
 80010ae:	f000 fe2d 	bl	8001d0c <controlPedLights>
		}
		if(isPed == 0){
 80010b2:	4b42      	ldr	r3, [pc, #264]	; (80011bc <fsm_manual_run+0x408>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d178      	bne.n	80011ac <fsm_manual_run+0x3f8>
			controlPedLights(OFF);
 80010ba:	2067      	movs	r0, #103	; 0x67
 80010bc:	f000 fe26 	bl	8001d0c <controlPedLights>
		}
		break;
 80010c0:	e074      	b.n	80011ac <fsm_manual_run+0x3f8>
	case MANUAL_RED1_YELLOW2:
		controlTrafficLights(RED, YELLOW);
 80010c2:	2166      	movs	r1, #102	; 0x66
 80010c4:	2064      	movs	r0, #100	; 0x64
 80010c6:	f000 fd9d 	bl	8001c04 <controlTrafficLights>
		if(timer_flag[2] == 1 && isPed == 1){
 80010ca:	4b3b      	ldr	r3, [pc, #236]	; (80011b8 <fsm_manual_run+0x404>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d115      	bne.n	80010fe <fsm_manual_run+0x34a>
 80010d2:	4b3a      	ldr	r3, [pc, #232]	; (80011bc <fsm_manual_run+0x408>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d111      	bne.n	80010fe <fsm_manual_run+0x34a>
			isPed = 0;
 80010da:	4b38      	ldr	r3, [pc, #224]	; (80011bc <fsm_manual_run+0x408>)
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
			controlPedLights(OFF);
 80010e0:	2067      	movs	r0, #103	; 0x67
 80010e2:	f000 fe13 	bl	8001d0c <controlPedLights>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_OFF#\r\n"), 1000);
 80010e6:	4936      	ldr	r1, [pc, #216]	; (80011c0 <fsm_manual_run+0x40c>)
 80010e8:	4836      	ldr	r0, [pc, #216]	; (80011c4 <fsm_manual_run+0x410>)
 80010ea:	f003 fdd7 	bl	8004c9c <siprintf>
 80010ee:	4603      	mov	r3, r0
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f6:	4933      	ldr	r1, [pc, #204]	; (80011c4 <fsm_manual_run+0x410>)
 80010f8:	4833      	ldr	r0, [pc, #204]	; (80011c8 <fsm_manual_run+0x414>)
 80010fa:	f003 fc4f 	bl	800499c <HAL_UART_Transmit>
		}
		if(isBTPressed(0) == 1){
 80010fe:	2000      	movs	r0, #0
 8001100:	f7ff f8d2 	bl	80002a8 <isBTPressed>
 8001104:	4603      	mov	r3, r0
 8001106:	2b01      	cmp	r3, #1
 8001108:	d118      	bne.n	800113c <fsm_manual_run+0x388>
			status = TUNING_INIT;
 800110a:	4b30      	ldr	r3, [pc, #192]	; (80011cc <fsm_manual_run+0x418>)
 800110c:	220a      	movs	r2, #10
 800110e:	701a      	strb	r2, [r3, #0]
			if(isPed == 1){
 8001110:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <fsm_manual_run+0x408>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d111      	bne.n	800113c <fsm_manual_run+0x388>
				isPed = 0;
 8001118:	4b28      	ldr	r3, [pc, #160]	; (80011bc <fsm_manual_run+0x408>)
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
				controlPedLights(OFF);
 800111e:	2067      	movs	r0, #103	; 0x67
 8001120:	f000 fdf4 	bl	8001d0c <controlPedLights>
				HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_OFF#\r\n"), 1000);
 8001124:	4926      	ldr	r1, [pc, #152]	; (80011c0 <fsm_manual_run+0x40c>)
 8001126:	4827      	ldr	r0, [pc, #156]	; (80011c4 <fsm_manual_run+0x410>)
 8001128:	f003 fdb8 	bl	8004c9c <siprintf>
 800112c:	4603      	mov	r3, r0
 800112e:	b29a      	uxth	r2, r3
 8001130:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001134:	4923      	ldr	r1, [pc, #140]	; (80011c4 <fsm_manual_run+0x410>)
 8001136:	4824      	ldr	r0, [pc, #144]	; (80011c8 <fsm_manual_run+0x414>)
 8001138:	f003 fc30 	bl	800499c <HAL_UART_Transmit>
			}
		}
		if(isBTPressed(1) == 1){
 800113c:	2001      	movs	r0, #1
 800113e:	f7ff f8b3 	bl	80002a8 <isBTPressed>
 8001142:	4603      	mov	r3, r0
 8001144:	2b01      	cmp	r3, #1
 8001146:	d102      	bne.n	800114e <fsm_manual_run+0x39a>
			status = MANUAL_GREEN;
 8001148:	4b20      	ldr	r3, [pc, #128]	; (80011cc <fsm_manual_run+0x418>)
 800114a:	2207      	movs	r2, #7
 800114c:	701a      	strb	r2, [r3, #0]
		}
		if(isBTPressed(3) == 1){
 800114e:	2003      	movs	r0, #3
 8001150:	f7ff f8aa 	bl	80002a8 <isBTPressed>
 8001154:	4603      	mov	r3, r0
 8001156:	2b01      	cmp	r3, #1
 8001158:	d113      	bne.n	8001182 <fsm_manual_run+0x3ce>
			isPed = 1;
 800115a:	4b18      	ldr	r3, [pc, #96]	; (80011bc <fsm_manual_run+0x408>)
 800115c:	2201      	movs	r2, #1
 800115e:	601a      	str	r2, [r3, #0]
			setTimer(PEDESTRIAN_TIMER, 2);
 8001160:	2102      	movs	r1, #2
 8001162:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001166:	f001 fb29 	bl	80027bc <setTimer>
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!PEDESTRIAN_YELLOW#\r\n"), 1000);
 800116a:	491a      	ldr	r1, [pc, #104]	; (80011d4 <fsm_manual_run+0x420>)
 800116c:	4815      	ldr	r0, [pc, #84]	; (80011c4 <fsm_manual_run+0x410>)
 800116e:	f003 fd95 	bl	8004c9c <siprintf>
 8001172:	4603      	mov	r3, r0
 8001174:	b29a      	uxth	r2, r3
 8001176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117a:	4912      	ldr	r1, [pc, #72]	; (80011c4 <fsm_manual_run+0x410>)
 800117c:	4812      	ldr	r0, [pc, #72]	; (80011c8 <fsm_manual_run+0x414>)
 800117e:	f003 fc0d 	bl	800499c <HAL_UART_Transmit>
		}
		if(isPed == 1){
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <fsm_manual_run+0x408>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d102      	bne.n	8001190 <fsm_manual_run+0x3dc>
			controlPedLights(YELLOW);
 800118a:	2066      	movs	r0, #102	; 0x66
 800118c:	f000 fdbe 	bl	8001d0c <controlPedLights>
		}
		if(isPed == 0){
 8001190:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <fsm_manual_run+0x408>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d10b      	bne.n	80011b0 <fsm_manual_run+0x3fc>
			controlPedLights(OFF);
 8001198:	2067      	movs	r0, #103	; 0x67
 800119a:	f000 fdb7 	bl	8001d0c <controlPedLights>
		}
		break;
 800119e:	e007      	b.n	80011b0 <fsm_manual_run+0x3fc>
	default:
		break;
 80011a0:	bf00      	nop
 80011a2:	e006      	b.n	80011b2 <fsm_manual_run+0x3fe>
		break;
 80011a4:	bf00      	nop
 80011a6:	e004      	b.n	80011b2 <fsm_manual_run+0x3fe>
		break;
 80011a8:	bf00      	nop
 80011aa:	e002      	b.n	80011b2 <fsm_manual_run+0x3fe>
		break;
 80011ac:	bf00      	nop
 80011ae:	e000      	b.n	80011b2 <fsm_manual_run+0x3fe>
		break;
 80011b0:	bf00      	nop
	}
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	2000035c 	.word	0x2000035c
 80011bc:	2000015c 	.word	0x2000015c
 80011c0:	080056b0 	.word	0x080056b0
 80011c4:	20000160 	.word	0x20000160
 80011c8:	20000224 	.word	0x20000224
 80011cc:	20000192 	.word	0x20000192
 80011d0:	080056dc 	.word	0x080056dc
 80011d4:	080056f0 	.word	0x080056f0

080011d8 <ledBalance>:

int redTemp = 1;
int greenTemp = 1;
int yellowTemp = 1;

void ledBalance(){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b090      	sub	sp, #64	; 0x40
 80011dc:	af00      	add	r7, sp, #0
	if(red == (green + yellow)){
 80011de:	4b5d      	ldr	r3, [pc, #372]	; (8001354 <ledBalance+0x17c>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	4b5d      	ldr	r3, [pc, #372]	; (8001358 <ledBalance+0x180>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	441a      	add	r2, r3
 80011e8:	4b5c      	ldr	r3, [pc, #368]	; (800135c <ledBalance+0x184>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d17b      	bne.n	80012e8 <ledBalance+0x110>
		int buffer_red1 = red / 10;
 80011f0:	4b5a      	ldr	r3, [pc, #360]	; (800135c <ledBalance+0x184>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a5a      	ldr	r2, [pc, #360]	; (8001360 <ledBalance+0x188>)
 80011f6:	fb82 1203 	smull	r1, r2, r2, r3
 80011fa:	1092      	asrs	r2, r2, #2
 80011fc:	17db      	asrs	r3, r3, #31
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	617b      	str	r3, [r7, #20]
		int buffer_red2 = red % 10;
 8001202:	4b56      	ldr	r3, [pc, #344]	; (800135c <ledBalance+0x184>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	4b56      	ldr	r3, [pc, #344]	; (8001360 <ledBalance+0x188>)
 8001208:	fb83 1302 	smull	r1, r3, r3, r2
 800120c:	1099      	asrs	r1, r3, #2
 800120e:	17d3      	asrs	r3, r2, #31
 8001210:	1ac9      	subs	r1, r1, r3
 8001212:	460b      	mov	r3, r1
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	440b      	add	r3, r1
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	613b      	str	r3, [r7, #16]
		int buffer_yellow1 = yellow / 10;
 800121e:	4b4e      	ldr	r3, [pc, #312]	; (8001358 <ledBalance+0x180>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a4f      	ldr	r2, [pc, #316]	; (8001360 <ledBalance+0x188>)
 8001224:	fb82 1203 	smull	r1, r2, r2, r3
 8001228:	1092      	asrs	r2, r2, #2
 800122a:	17db      	asrs	r3, r3, #31
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	60fb      	str	r3, [r7, #12]
		int buffer_yellow2 = yellow % 10;
 8001230:	4b49      	ldr	r3, [pc, #292]	; (8001358 <ledBalance+0x180>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b4a      	ldr	r3, [pc, #296]	; (8001360 <ledBalance+0x188>)
 8001236:	fb83 1302 	smull	r1, r3, r3, r2
 800123a:	1099      	asrs	r1, r3, #2
 800123c:	17d3      	asrs	r3, r2, #31
 800123e:	1ac9      	subs	r1, r1, r3
 8001240:	460b      	mov	r3, r1
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	440b      	add	r3, r1
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	60bb      	str	r3, [r7, #8]
		int buffer_green1 = green / 10;
 800124c:	4b41      	ldr	r3, [pc, #260]	; (8001354 <ledBalance+0x17c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a43      	ldr	r2, [pc, #268]	; (8001360 <ledBalance+0x188>)
 8001252:	fb82 1203 	smull	r1, r2, r2, r3
 8001256:	1092      	asrs	r2, r2, #2
 8001258:	17db      	asrs	r3, r3, #31
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	607b      	str	r3, [r7, #4]
		int buffer_green2 = green % 10;
 800125e:	4b3d      	ldr	r3, [pc, #244]	; (8001354 <ledBalance+0x17c>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	4b3f      	ldr	r3, [pc, #252]	; (8001360 <ledBalance+0x188>)
 8001264:	fb83 1302 	smull	r1, r3, r3, r2
 8001268:	1099      	asrs	r1, r3, #2
 800126a:	17d3      	asrs	r3, r2, #31
 800126c:	1ac9      	subs	r1, r1, r3
 800126e:	460b      	mov	r3, r1
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	440b      	add	r3, r1
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	603b      	str	r3, [r7, #0]
		HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!AFTER_TUNING#\r\n"), 1000);
 800127a:	493a      	ldr	r1, [pc, #232]	; (8001364 <ledBalance+0x18c>)
 800127c:	483a      	ldr	r0, [pc, #232]	; (8001368 <ledBalance+0x190>)
 800127e:	f003 fd0d 	bl	8004c9c <siprintf>
 8001282:	4603      	mov	r3, r0
 8001284:	b29a      	uxth	r2, r3
 8001286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128a:	4937      	ldr	r1, [pc, #220]	; (8001368 <ledBalance+0x190>)
 800128c:	4837      	ldr	r0, [pc, #220]	; (800136c <ledBalance+0x194>)
 800128e:	f003 fb85 	bl	800499c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#RED\r\n", buffer_red1, buffer_red2), 1000);
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	697a      	ldr	r2, [r7, #20]
 8001296:	4936      	ldr	r1, [pc, #216]	; (8001370 <ledBalance+0x198>)
 8001298:	4833      	ldr	r0, [pc, #204]	; (8001368 <ledBalance+0x190>)
 800129a:	f003 fcff 	bl	8004c9c <siprintf>
 800129e:	4603      	mov	r3, r0
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a6:	4930      	ldr	r1, [pc, #192]	; (8001368 <ledBalance+0x190>)
 80012a8:	4830      	ldr	r0, [pc, #192]	; (800136c <ledBalance+0x194>)
 80012aa:	f003 fb77 	bl	800499c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#YELLOW\r\n", buffer_yellow1, buffer_yellow2), 1000);
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	68fa      	ldr	r2, [r7, #12]
 80012b2:	4930      	ldr	r1, [pc, #192]	; (8001374 <ledBalance+0x19c>)
 80012b4:	482c      	ldr	r0, [pc, #176]	; (8001368 <ledBalance+0x190>)
 80012b6:	f003 fcf1 	bl	8004c9c <siprintf>
 80012ba:	4603      	mov	r3, r0
 80012bc:	b29a      	uxth	r2, r3
 80012be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c2:	4929      	ldr	r1, [pc, #164]	; (8001368 <ledBalance+0x190>)
 80012c4:	4829      	ldr	r0, [pc, #164]	; (800136c <ledBalance+0x194>)
 80012c6:	f003 fb69 	bl	800499c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#GREEN\r\n", buffer_green1, buffer_green2), 1000);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	492a      	ldr	r1, [pc, #168]	; (8001378 <ledBalance+0x1a0>)
 80012d0:	4825      	ldr	r0, [pc, #148]	; (8001368 <ledBalance+0x190>)
 80012d2:	f003 fce3 	bl	8004c9c <siprintf>
 80012d6:	4603      	mov	r3, r0
 80012d8:	b29a      	uxth	r2, r3
 80012da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012de:	4922      	ldr	r1, [pc, #136]	; (8001368 <ledBalance+0x190>)
 80012e0:	4822      	ldr	r0, [pc, #136]	; (800136c <ledBalance+0x194>)
 80012e2:	f003 fb5b 	bl	800499c <HAL_UART_Transmit>
		return;
 80012e6:	e0f3      	b.n	80014d0 <ledBalance+0x2f8>
	}
	else if(red > (green + yellow)){
 80012e8:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <ledBalance+0x17c>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <ledBalance+0x180>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	441a      	add	r2, r3
 80012f2:	4b1a      	ldr	r3, [pc, #104]	; (800135c <ledBalance+0x184>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	da42      	bge.n	8001380 <ledBalance+0x1a8>
		red = green + yellow;
 80012fa:	4b16      	ldr	r3, [pc, #88]	; (8001354 <ledBalance+0x17c>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	4b16      	ldr	r3, [pc, #88]	; (8001358 <ledBalance+0x180>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4413      	add	r3, r2
 8001304:	4a15      	ldr	r2, [pc, #84]	; (800135c <ledBalance+0x184>)
 8001306:	6013      	str	r3, [r2, #0]
		int buffer1 = red / 10;
 8001308:	4b14      	ldr	r3, [pc, #80]	; (800135c <ledBalance+0x184>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a14      	ldr	r2, [pc, #80]	; (8001360 <ledBalance+0x188>)
 800130e:	fb82 1203 	smull	r1, r2, r2, r3
 8001312:	1092      	asrs	r2, r2, #2
 8001314:	17db      	asrs	r3, r3, #31
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	637b      	str	r3, [r7, #52]	; 0x34
		int buffer2 = red % 10;
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <ledBalance+0x184>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <ledBalance+0x188>)
 8001320:	fb83 1302 	smull	r1, r3, r3, r2
 8001324:	1099      	asrs	r1, r3, #2
 8001326:	17d3      	asrs	r3, r2, #31
 8001328:	1ac9      	subs	r1, r1, r3
 800132a:	460b      	mov	r3, r1
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	440b      	add	r3, r1
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	633b      	str	r3, [r7, #48]	; 0x30
		HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#BALANCED_RED\r\n", buffer1, buffer2), 1000);
 8001336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001338:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800133a:	4910      	ldr	r1, [pc, #64]	; (800137c <ledBalance+0x1a4>)
 800133c:	480a      	ldr	r0, [pc, #40]	; (8001368 <ledBalance+0x190>)
 800133e:	f003 fcad 	bl	8004c9c <siprintf>
 8001342:	4603      	mov	r3, r0
 8001344:	b29a      	uxth	r2, r3
 8001346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134a:	4907      	ldr	r1, [pc, #28]	; (8001368 <ledBalance+0x190>)
 800134c:	4807      	ldr	r0, [pc, #28]	; (800136c <ledBalance+0x194>)
 800134e:	f003 fb25 	bl	800499c <HAL_UART_Transmit>
 8001352:	e041      	b.n	80013d8 <ledBalance+0x200>
 8001354:	20000098 	.word	0x20000098
 8001358:	2000009c 	.word	0x2000009c
 800135c:	20000094 	.word	0x20000094
 8001360:	66666667 	.word	0x66666667
 8001364:	08005708 	.word	0x08005708
 8001368:	20000160 	.word	0x20000160
 800136c:	20000224 	.word	0x20000224
 8001370:	0800571c 	.word	0x0800571c
 8001374:	08005730 	.word	0x08005730
 8001378:	08005744 	.word	0x08005744
 800137c:	08005758 	.word	0x08005758
	}
	else{
		yellow = red - green;
 8001380:	4b55      	ldr	r3, [pc, #340]	; (80014d8 <ledBalance+0x300>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b55      	ldr	r3, [pc, #340]	; (80014dc <ledBalance+0x304>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	4a55      	ldr	r2, [pc, #340]	; (80014e0 <ledBalance+0x308>)
 800138c:	6013      	str	r3, [r2, #0]
		int buffer1 = red / 10;
 800138e:	4b52      	ldr	r3, [pc, #328]	; (80014d8 <ledBalance+0x300>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a54      	ldr	r2, [pc, #336]	; (80014e4 <ledBalance+0x30c>)
 8001394:	fb82 1203 	smull	r1, r2, r2, r3
 8001398:	1092      	asrs	r2, r2, #2
 800139a:	17db      	asrs	r3, r3, #31
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	63fb      	str	r3, [r7, #60]	; 0x3c
		int buffer2 = red % 10;
 80013a0:	4b4d      	ldr	r3, [pc, #308]	; (80014d8 <ledBalance+0x300>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b4f      	ldr	r3, [pc, #316]	; (80014e4 <ledBalance+0x30c>)
 80013a6:	fb83 1302 	smull	r1, r3, r3, r2
 80013aa:	1099      	asrs	r1, r3, #2
 80013ac:	17d3      	asrs	r3, r2, #31
 80013ae:	1ac9      	subs	r1, r1, r3
 80013b0:	460b      	mov	r3, r1
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	440b      	add	r3, r1
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	63bb      	str	r3, [r7, #56]	; 0x38
		HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#BALANCED_YELLOW\r\n", buffer1, buffer2), 1000);
 80013bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013c0:	4949      	ldr	r1, [pc, #292]	; (80014e8 <ledBalance+0x310>)
 80013c2:	484a      	ldr	r0, [pc, #296]	; (80014ec <ledBalance+0x314>)
 80013c4:	f003 fc6a 	bl	8004c9c <siprintf>
 80013c8:	4603      	mov	r3, r0
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d0:	4946      	ldr	r1, [pc, #280]	; (80014ec <ledBalance+0x314>)
 80013d2:	4847      	ldr	r0, [pc, #284]	; (80014f0 <ledBalance+0x318>)
 80013d4:	f003 fae2 	bl	800499c <HAL_UART_Transmit>
	}
	int buffer_red1 = red / 10;
 80013d8:	4b3f      	ldr	r3, [pc, #252]	; (80014d8 <ledBalance+0x300>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a41      	ldr	r2, [pc, #260]	; (80014e4 <ledBalance+0x30c>)
 80013de:	fb82 1203 	smull	r1, r2, r2, r3
 80013e2:	1092      	asrs	r2, r2, #2
 80013e4:	17db      	asrs	r3, r3, #31
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	int buffer_red2 = red % 10;
 80013ea:	4b3b      	ldr	r3, [pc, #236]	; (80014d8 <ledBalance+0x300>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	4b3d      	ldr	r3, [pc, #244]	; (80014e4 <ledBalance+0x30c>)
 80013f0:	fb83 1302 	smull	r1, r3, r3, r2
 80013f4:	1099      	asrs	r1, r3, #2
 80013f6:	17d3      	asrs	r3, r2, #31
 80013f8:	1ac9      	subs	r1, r1, r3
 80013fa:	460b      	mov	r3, r1
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	440b      	add	r3, r1
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
	int buffer_yellow1 = yellow / 10;
 8001406:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <ledBalance+0x308>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a36      	ldr	r2, [pc, #216]	; (80014e4 <ledBalance+0x30c>)
 800140c:	fb82 1203 	smull	r1, r2, r2, r3
 8001410:	1092      	asrs	r2, r2, #2
 8001412:	17db      	asrs	r3, r3, #31
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
	int buffer_yellow2 = yellow % 10;
 8001418:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <ledBalance+0x308>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b31      	ldr	r3, [pc, #196]	; (80014e4 <ledBalance+0x30c>)
 800141e:	fb83 1302 	smull	r1, r3, r3, r2
 8001422:	1099      	asrs	r1, r3, #2
 8001424:	17d3      	asrs	r3, r2, #31
 8001426:	1ac9      	subs	r1, r1, r3
 8001428:	460b      	mov	r3, r1
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	440b      	add	r3, r1
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	623b      	str	r3, [r7, #32]
	int buffer_green1 = green / 10;
 8001434:	4b29      	ldr	r3, [pc, #164]	; (80014dc <ledBalance+0x304>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a2a      	ldr	r2, [pc, #168]	; (80014e4 <ledBalance+0x30c>)
 800143a:	fb82 1203 	smull	r1, r2, r2, r3
 800143e:	1092      	asrs	r2, r2, #2
 8001440:	17db      	asrs	r3, r3, #31
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	61fb      	str	r3, [r7, #28]
	int buffer_green2 = green % 10;
 8001446:	4b25      	ldr	r3, [pc, #148]	; (80014dc <ledBalance+0x304>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	4b26      	ldr	r3, [pc, #152]	; (80014e4 <ledBalance+0x30c>)
 800144c:	fb83 1302 	smull	r1, r3, r3, r2
 8001450:	1099      	asrs	r1, r3, #2
 8001452:	17d3      	asrs	r3, r2, #31
 8001454:	1ac9      	subs	r1, r1, r3
 8001456:	460b      	mov	r3, r1
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	440b      	add	r3, r1
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	61bb      	str	r3, [r7, #24]
	HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!AFTER_TUNING#\r\n"), 1000);
 8001462:	4924      	ldr	r1, [pc, #144]	; (80014f4 <ledBalance+0x31c>)
 8001464:	4821      	ldr	r0, [pc, #132]	; (80014ec <ledBalance+0x314>)
 8001466:	f003 fc19 	bl	8004c9c <siprintf>
 800146a:	4603      	mov	r3, r0
 800146c:	b29a      	uxth	r2, r3
 800146e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001472:	491e      	ldr	r1, [pc, #120]	; (80014ec <ledBalance+0x314>)
 8001474:	481e      	ldr	r0, [pc, #120]	; (80014f0 <ledBalance+0x318>)
 8001476:	f003 fa91 	bl	800499c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#RED\r\n", buffer_red1, buffer_red2), 1000);
 800147a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800147c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800147e:	491e      	ldr	r1, [pc, #120]	; (80014f8 <ledBalance+0x320>)
 8001480:	481a      	ldr	r0, [pc, #104]	; (80014ec <ledBalance+0x314>)
 8001482:	f003 fc0b 	bl	8004c9c <siprintf>
 8001486:	4603      	mov	r3, r0
 8001488:	b29a      	uxth	r2, r3
 800148a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148e:	4917      	ldr	r1, [pc, #92]	; (80014ec <ledBalance+0x314>)
 8001490:	4817      	ldr	r0, [pc, #92]	; (80014f0 <ledBalance+0x318>)
 8001492:	f003 fa83 	bl	800499c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#YELLOW\r\n", buffer_yellow1, buffer_yellow2), 1000);
 8001496:	6a3b      	ldr	r3, [r7, #32]
 8001498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800149a:	4918      	ldr	r1, [pc, #96]	; (80014fc <ledBalance+0x324>)
 800149c:	4813      	ldr	r0, [pc, #76]	; (80014ec <ledBalance+0x314>)
 800149e:	f003 fbfd 	bl	8004c9c <siprintf>
 80014a2:	4603      	mov	r3, r0
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014aa:	4910      	ldr	r1, [pc, #64]	; (80014ec <ledBalance+0x314>)
 80014ac:	4810      	ldr	r0, [pc, #64]	; (80014f0 <ledBalance+0x318>)
 80014ae:	f003 fa75 	bl	800499c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#GREEN\r\n", buffer_green1, buffer_green2), 1000);
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	69fa      	ldr	r2, [r7, #28]
 80014b6:	4912      	ldr	r1, [pc, #72]	; (8001500 <ledBalance+0x328>)
 80014b8:	480c      	ldr	r0, [pc, #48]	; (80014ec <ledBalance+0x314>)
 80014ba:	f003 fbef 	bl	8004c9c <siprintf>
 80014be:	4603      	mov	r3, r0
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c6:	4909      	ldr	r1, [pc, #36]	; (80014ec <ledBalance+0x314>)
 80014c8:	4809      	ldr	r0, [pc, #36]	; (80014f0 <ledBalance+0x318>)
 80014ca:	f003 fa67 	bl	800499c <HAL_UART_Transmit>
	return;
 80014ce:	bf00      	nop
}
 80014d0:	3740      	adds	r7, #64	; 0x40
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000094 	.word	0x20000094
 80014dc:	20000098 	.word	0x20000098
 80014e0:	2000009c 	.word	0x2000009c
 80014e4:	66666667 	.word	0x66666667
 80014e8:	08005774 	.word	0x08005774
 80014ec:	20000160 	.word	0x20000160
 80014f0:	20000224 	.word	0x20000224
 80014f4:	08005708 	.word	0x08005708
 80014f8:	0800571c 	.word	0x0800571c
 80014fc:	08005730 	.word	0x08005730
 8001500:	08005744 	.word	0x08005744

08001504 <fsm_tuning_run>:

//Used timers: timer[3]: led blinking
void fsm_tuning_run(){
 8001504:	b580      	push	{r7, lr}
 8001506:	b09a      	sub	sp, #104	; 0x68
 8001508:	af00      	add	r7, sp, #0
	switch(status){
 800150a:	4b9e      	ldr	r3, [pc, #632]	; (8001784 <fsm_tuning_run+0x280>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	3b0a      	subs	r3, #10
 8001510:	2b03      	cmp	r3, #3
 8001512:	f200 8352 	bhi.w	8001bba <fsm_tuning_run+0x6b6>
 8001516:	a201      	add	r2, pc, #4	; (adr r2, 800151c <fsm_tuning_run+0x18>)
 8001518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151c:	0800152d 	.word	0x0800152d
 8001520:	0800159f 	.word	0x0800159f
 8001524:	080017c1 	.word	0x080017c1
 8001528:	080019d9 	.word	0x080019d9
	case TUNING_INIT:
		status = TUNING_RED;
 800152c:	4b95      	ldr	r3, [pc, #596]	; (8001784 <fsm_tuning_run+0x280>)
 800152e:	220b      	movs	r2, #11
 8001530:	701a      	strb	r2, [r3, #0]
		setTimer(250, 3);		//timer for led blinking
 8001532:	2103      	movs	r1, #3
 8001534:	20fa      	movs	r0, #250	; 0xfa
 8001536:	f001 f941 	bl	80027bc <setTimer>
		HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!TUNING#\r\n"), 1000);
 800153a:	4993      	ldr	r1, [pc, #588]	; (8001788 <fsm_tuning_run+0x284>)
 800153c:	4893      	ldr	r0, [pc, #588]	; (800178c <fsm_tuning_run+0x288>)
 800153e:	f003 fbad 	bl	8004c9c <siprintf>
 8001542:	4603      	mov	r3, r0
 8001544:	b29a      	uxth	r2, r3
 8001546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800154a:	4990      	ldr	r1, [pc, #576]	; (800178c <fsm_tuning_run+0x288>)
 800154c:	4890      	ldr	r0, [pc, #576]	; (8001790 <fsm_tuning_run+0x28c>)
 800154e:	f003 fa25 	bl	800499c <HAL_UART_Transmit>
		int buffer1 = redTemp / 10;
 8001552:	4b90      	ldr	r3, [pc, #576]	; (8001794 <fsm_tuning_run+0x290>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a90      	ldr	r2, [pc, #576]	; (8001798 <fsm_tuning_run+0x294>)
 8001558:	fb82 1203 	smull	r1, r2, r2, r3
 800155c:	1092      	asrs	r2, r2, #2
 800155e:	17db      	asrs	r3, r3, #31
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	607b      	str	r3, [r7, #4]
		int buffer2 = redTemp % 10;
 8001564:	4b8b      	ldr	r3, [pc, #556]	; (8001794 <fsm_tuning_run+0x290>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b8b      	ldr	r3, [pc, #556]	; (8001798 <fsm_tuning_run+0x294>)
 800156a:	fb83 1302 	smull	r1, r3, r3, r2
 800156e:	1099      	asrs	r1, r3, #2
 8001570:	17d3      	asrs	r3, r2, #31
 8001572:	1ac9      	subs	r1, r1, r3
 8001574:	460b      	mov	r3, r1
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	603b      	str	r3, [r7, #0]
		HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#TUNING_RED\r\n", buffer1, buffer2), 1000);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	4985      	ldr	r1, [pc, #532]	; (800179c <fsm_tuning_run+0x298>)
 8001586:	4881      	ldr	r0, [pc, #516]	; (800178c <fsm_tuning_run+0x288>)
 8001588:	f003 fb88 	bl	8004c9c <siprintf>
 800158c:	4603      	mov	r3, r0
 800158e:	b29a      	uxth	r2, r3
 8001590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001594:	497d      	ldr	r1, [pc, #500]	; (800178c <fsm_tuning_run+0x288>)
 8001596:	487e      	ldr	r0, [pc, #504]	; (8001790 <fsm_tuning_run+0x28c>)
 8001598:	f003 fa00 	bl	800499c <HAL_UART_Transmit>
		break;
 800159c:	e314      	b.n	8001bc8 <fsm_tuning_run+0x6c4>
	case TUNING_RED:
		if(timer_flag[3] == 1){
 800159e:	4b80      	ldr	r3, [pc, #512]	; (80017a0 <fsm_tuning_run+0x29c>)
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d105      	bne.n	80015b2 <fsm_tuning_run+0xae>
			toggleRedLED();
 80015a6:	f000 fc21 	bl	8001dec <toggleRedLED>
			setTimer(250, 3);
 80015aa:	2103      	movs	r1, #3
 80015ac:	20fa      	movs	r0, #250	; 0xfa
 80015ae:	f001 f905 	bl	80027bc <setTimer>
		}
		if(isBTPressed(0) == 1){
 80015b2:	2000      	movs	r0, #0
 80015b4:	f7fe fe78 	bl	80002a8 <isBTPressed>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d12c      	bne.n	8001618 <fsm_tuning_run+0x114>
			status = TUNING_YELLOW;
 80015be:	4b71      	ldr	r3, [pc, #452]	; (8001784 <fsm_tuning_run+0x280>)
 80015c0:	220d      	movs	r2, #13
 80015c2:	701a      	strb	r2, [r3, #0]
			redTemp = 1;
 80015c4:	4b73      	ldr	r3, [pc, #460]	; (8001794 <fsm_tuning_run+0x290>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	601a      	str	r2, [r3, #0]
			clearTrafficLights();
 80015ca:	f000 fbf1 	bl	8001db0 <clearTrafficLights>
			int buffer1 = yellowTemp / 10;
 80015ce:	4b75      	ldr	r3, [pc, #468]	; (80017a4 <fsm_tuning_run+0x2a0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a71      	ldr	r2, [pc, #452]	; (8001798 <fsm_tuning_run+0x294>)
 80015d4:	fb82 1203 	smull	r1, r2, r2, r3
 80015d8:	1092      	asrs	r2, r2, #2
 80015da:	17db      	asrs	r3, r3, #31
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
			int buffer2 = yellowTemp % 10;
 80015e0:	4b70      	ldr	r3, [pc, #448]	; (80017a4 <fsm_tuning_run+0x2a0>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b6c      	ldr	r3, [pc, #432]	; (8001798 <fsm_tuning_run+0x294>)
 80015e6:	fb83 1302 	smull	r1, r3, r3, r2
 80015ea:	1099      	asrs	r1, r3, #2
 80015ec:	17d3      	asrs	r3, r2, #31
 80015ee:	1ac9      	subs	r1, r1, r3
 80015f0:	460b      	mov	r3, r1
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	440b      	add	r3, r1
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	623b      	str	r3, [r7, #32]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#TUNING_YELLOW\r\n", buffer1, buffer2), 1000);
 80015fc:	6a3b      	ldr	r3, [r7, #32]
 80015fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001600:	4969      	ldr	r1, [pc, #420]	; (80017a8 <fsm_tuning_run+0x2a4>)
 8001602:	4862      	ldr	r0, [pc, #392]	; (800178c <fsm_tuning_run+0x288>)
 8001604:	f003 fb4a 	bl	8004c9c <siprintf>
 8001608:	4603      	mov	r3, r0
 800160a:	b29a      	uxth	r2, r3
 800160c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001610:	495e      	ldr	r1, [pc, #376]	; (800178c <fsm_tuning_run+0x288>)
 8001612:	485f      	ldr	r0, [pc, #380]	; (8001790 <fsm_tuning_run+0x28c>)
 8001614:	f003 f9c2 	bl	800499c <HAL_UART_Transmit>
		}
		if(isBTHold(0) == 1){
 8001618:	2000      	movs	r0, #0
 800161a:	f7fe fe5f 	bl	80002dc <isBTHold>
 800161e:	4603      	mov	r3, r0
 8001620:	2b01      	cmp	r3, #1
 8001622:	d10f      	bne.n	8001644 <fsm_tuning_run+0x140>
			status = INIT;
 8001624:	4b57      	ldr	r3, [pc, #348]	; (8001784 <fsm_tuning_run+0x280>)
 8001626:	2200      	movs	r2, #0
 8001628:	701a      	strb	r2, [r3, #0]
			redTemp = 1; greenTemp = 1; yellowTemp = 1;
 800162a:	4b5a      	ldr	r3, [pc, #360]	; (8001794 <fsm_tuning_run+0x290>)
 800162c:	2201      	movs	r2, #1
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	4b5e      	ldr	r3, [pc, #376]	; (80017ac <fsm_tuning_run+0x2a8>)
 8001632:	2201      	movs	r2, #1
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	4b5b      	ldr	r3, [pc, #364]	; (80017a4 <fsm_tuning_run+0x2a0>)
 8001638:	2201      	movs	r2, #1
 800163a:	601a      	str	r2, [r3, #0]
			ledBalance();
 800163c:	f7ff fdcc 	bl	80011d8 <ledBalance>
			clearTrafficLights();
 8001640:	f000 fbb6 	bl	8001db0 <clearTrafficLights>
		}
		if(isBTPressed(1) == 1){
 8001644:	2001      	movs	r0, #1
 8001646:	f7fe fe2f 	bl	80002a8 <isBTPressed>
 800164a:	4603      	mov	r3, r0
 800164c:	2b01      	cmp	r3, #1
 800164e:	d130      	bne.n	80016b2 <fsm_tuning_run+0x1ae>
			redTemp++;
 8001650:	4b50      	ldr	r3, [pc, #320]	; (8001794 <fsm_tuning_run+0x290>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	3301      	adds	r3, #1
 8001656:	4a4f      	ldr	r2, [pc, #316]	; (8001794 <fsm_tuning_run+0x290>)
 8001658:	6013      	str	r3, [r2, #0]
			if(redTemp > 99) redTemp = 1;
 800165a:	4b4e      	ldr	r3, [pc, #312]	; (8001794 <fsm_tuning_run+0x290>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2b63      	cmp	r3, #99	; 0x63
 8001660:	dd02      	ble.n	8001668 <fsm_tuning_run+0x164>
 8001662:	4b4c      	ldr	r3, [pc, #304]	; (8001794 <fsm_tuning_run+0x290>)
 8001664:	2201      	movs	r2, #1
 8001666:	601a      	str	r2, [r3, #0]
			int buffer1 = redTemp / 10;
 8001668:	4b4a      	ldr	r3, [pc, #296]	; (8001794 <fsm_tuning_run+0x290>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a4a      	ldr	r2, [pc, #296]	; (8001798 <fsm_tuning_run+0x294>)
 800166e:	fb82 1203 	smull	r1, r2, r2, r3
 8001672:	1092      	asrs	r2, r2, #2
 8001674:	17db      	asrs	r3, r3, #31
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	61fb      	str	r3, [r7, #28]
			int buffer2 = redTemp % 10;
 800167a:	4b46      	ldr	r3, [pc, #280]	; (8001794 <fsm_tuning_run+0x290>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	4b46      	ldr	r3, [pc, #280]	; (8001798 <fsm_tuning_run+0x294>)
 8001680:	fb83 1302 	smull	r1, r3, r3, r2
 8001684:	1099      	asrs	r1, r3, #2
 8001686:	17d3      	asrs	r3, r2, #31
 8001688:	1ac9      	subs	r1, r1, r3
 800168a:	460b      	mov	r3, r1
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	440b      	add	r3, r1
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	61bb      	str	r3, [r7, #24]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#TUNING_RED(+1)\r\n", buffer1, buffer2), 1000);
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	69fa      	ldr	r2, [r7, #28]
 800169a:	4945      	ldr	r1, [pc, #276]	; (80017b0 <fsm_tuning_run+0x2ac>)
 800169c:	483b      	ldr	r0, [pc, #236]	; (800178c <fsm_tuning_run+0x288>)
 800169e:	f003 fafd 	bl	8004c9c <siprintf>
 80016a2:	4603      	mov	r3, r0
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016aa:	4938      	ldr	r1, [pc, #224]	; (800178c <fsm_tuning_run+0x288>)
 80016ac:	4838      	ldr	r0, [pc, #224]	; (8001790 <fsm_tuning_run+0x28c>)
 80016ae:	f003 f975 	bl	800499c <HAL_UART_Transmit>
		}
		if(isBTHold(1) == 1){
 80016b2:	2001      	movs	r0, #1
 80016b4:	f7fe fe12 	bl	80002dc <isBTHold>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d130      	bne.n	8001720 <fsm_tuning_run+0x21c>
			redTemp += 10;
 80016be:	4b35      	ldr	r3, [pc, #212]	; (8001794 <fsm_tuning_run+0x290>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	330a      	adds	r3, #10
 80016c4:	4a33      	ldr	r2, [pc, #204]	; (8001794 <fsm_tuning_run+0x290>)
 80016c6:	6013      	str	r3, [r2, #0]
			if(redTemp > 99) redTemp = 1;
 80016c8:	4b32      	ldr	r3, [pc, #200]	; (8001794 <fsm_tuning_run+0x290>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b63      	cmp	r3, #99	; 0x63
 80016ce:	dd02      	ble.n	80016d6 <fsm_tuning_run+0x1d2>
 80016d0:	4b30      	ldr	r3, [pc, #192]	; (8001794 <fsm_tuning_run+0x290>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	601a      	str	r2, [r3, #0]
			int buffer1 = redTemp / 10;
 80016d6:	4b2f      	ldr	r3, [pc, #188]	; (8001794 <fsm_tuning_run+0x290>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a2f      	ldr	r2, [pc, #188]	; (8001798 <fsm_tuning_run+0x294>)
 80016dc:	fb82 1203 	smull	r1, r2, r2, r3
 80016e0:	1092      	asrs	r2, r2, #2
 80016e2:	17db      	asrs	r3, r3, #31
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	617b      	str	r3, [r7, #20]
			int buffer2 = redTemp % 10;
 80016e8:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <fsm_tuning_run+0x290>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b2a      	ldr	r3, [pc, #168]	; (8001798 <fsm_tuning_run+0x294>)
 80016ee:	fb83 1302 	smull	r1, r3, r3, r2
 80016f2:	1099      	asrs	r1, r3, #2
 80016f4:	17d3      	asrs	r3, r2, #31
 80016f6:	1ac9      	subs	r1, r1, r3
 80016f8:	460b      	mov	r3, r1
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	440b      	add	r3, r1
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	613b      	str	r3, [r7, #16]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#TUNING_RED(+10)\r\n", buffer1, buffer2), 1000);
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	492a      	ldr	r1, [pc, #168]	; (80017b4 <fsm_tuning_run+0x2b0>)
 800170a:	4820      	ldr	r0, [pc, #128]	; (800178c <fsm_tuning_run+0x288>)
 800170c:	f003 fac6 	bl	8004c9c <siprintf>
 8001710:	4603      	mov	r3, r0
 8001712:	b29a      	uxth	r2, r3
 8001714:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001718:	491c      	ldr	r1, [pc, #112]	; (800178c <fsm_tuning_run+0x288>)
 800171a:	481d      	ldr	r0, [pc, #116]	; (8001790 <fsm_tuning_run+0x28c>)
 800171c:	f003 f93e 	bl	800499c <HAL_UART_Transmit>
		}
		if(isBTPressed(2) == 1){
 8001720:	2002      	movs	r0, #2
 8001722:	f7fe fdc1 	bl	80002a8 <isBTPressed>
 8001726:	4603      	mov	r3, r0
 8001728:	2b01      	cmp	r3, #1
 800172a:	f040 8248 	bne.w	8001bbe <fsm_tuning_run+0x6ba>
			red = redTemp;
 800172e:	4b19      	ldr	r3, [pc, #100]	; (8001794 <fsm_tuning_run+0x290>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a21      	ldr	r2, [pc, #132]	; (80017b8 <fsm_tuning_run+0x2b4>)
 8001734:	6013      	str	r3, [r2, #0]
			int buffer1 = red / 10;
 8001736:	4b20      	ldr	r3, [pc, #128]	; (80017b8 <fsm_tuning_run+0x2b4>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a17      	ldr	r2, [pc, #92]	; (8001798 <fsm_tuning_run+0x294>)
 800173c:	fb82 1203 	smull	r1, r2, r2, r3
 8001740:	1092      	asrs	r2, r2, #2
 8001742:	17db      	asrs	r3, r3, #31
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	60fb      	str	r3, [r7, #12]
			int buffer2 = red % 10;
 8001748:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <fsm_tuning_run+0x2b4>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b12      	ldr	r3, [pc, #72]	; (8001798 <fsm_tuning_run+0x294>)
 800174e:	fb83 1302 	smull	r1, r3, r3, r2
 8001752:	1099      	asrs	r1, r3, #2
 8001754:	17d3      	asrs	r3, r2, #31
 8001756:	1ac9      	subs	r1, r1, r3
 8001758:	460b      	mov	r3, r1
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	440b      	add	r3, r1
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	60bb      	str	r3, [r7, #8]
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#RED_SET\r\n", buffer1, buffer2), 1000);
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	4914      	ldr	r1, [pc, #80]	; (80017bc <fsm_tuning_run+0x2b8>)
 800176a:	4808      	ldr	r0, [pc, #32]	; (800178c <fsm_tuning_run+0x288>)
 800176c:	f003 fa96 	bl	8004c9c <siprintf>
 8001770:	4603      	mov	r3, r0
 8001772:	b29a      	uxth	r2, r3
 8001774:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001778:	4904      	ldr	r1, [pc, #16]	; (800178c <fsm_tuning_run+0x288>)
 800177a:	4805      	ldr	r0, [pc, #20]	; (8001790 <fsm_tuning_run+0x28c>)
 800177c:	f003 f90e 	bl	800499c <HAL_UART_Transmit>
		}
		break;
 8001780:	e21d      	b.n	8001bbe <fsm_tuning_run+0x6ba>
 8001782:	bf00      	nop
 8001784:	20000192 	.word	0x20000192
 8001788:	08005794 	.word	0x08005794
 800178c:	20000160 	.word	0x20000160
 8001790:	20000224 	.word	0x20000224
 8001794:	20000088 	.word	0x20000088
 8001798:	66666667 	.word	0x66666667
 800179c:	080057a0 	.word	0x080057a0
 80017a0:	2000035c 	.word	0x2000035c
 80017a4:	20000090 	.word	0x20000090
 80017a8:	080057b8 	.word	0x080057b8
 80017ac:	2000008c 	.word	0x2000008c
 80017b0:	080057d4 	.word	0x080057d4
 80017b4:	080057f0 	.word	0x080057f0
 80017b8:	20000094 	.word	0x20000094
 80017bc:	08005810 	.word	0x08005810
	case TUNING_GREEN:
		if(timer_flag[3] == 1){
 80017c0:	4b78      	ldr	r3, [pc, #480]	; (80019a4 <fsm_tuning_run+0x4a0>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d105      	bne.n	80017d4 <fsm_tuning_run+0x2d0>
			toggleGreenLED();
 80017c8:	f000 fb2c 	bl	8001e24 <toggleGreenLED>
			setTimer(250, 3);
 80017cc:	2103      	movs	r1, #3
 80017ce:	20fa      	movs	r0, #250	; 0xfa
 80017d0:	f000 fff4 	bl	80027bc <setTimer>
		}
		if(isBTPressed(0) == 1){
 80017d4:	2000      	movs	r0, #0
 80017d6:	f7fe fd67 	bl	80002a8 <isBTPressed>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d12c      	bne.n	800183a <fsm_tuning_run+0x336>
			status = TUNING_RED;
 80017e0:	4b71      	ldr	r3, [pc, #452]	; (80019a8 <fsm_tuning_run+0x4a4>)
 80017e2:	220b      	movs	r2, #11
 80017e4:	701a      	strb	r2, [r3, #0]
			greenTemp = 1;
 80017e6:	4b71      	ldr	r3, [pc, #452]	; (80019ac <fsm_tuning_run+0x4a8>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	601a      	str	r2, [r3, #0]
			clearTrafficLights();
 80017ec:	f000 fae0 	bl	8001db0 <clearTrafficLights>
			int buffer1 = redTemp / 10;
 80017f0:	4b6f      	ldr	r3, [pc, #444]	; (80019b0 <fsm_tuning_run+0x4ac>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a6f      	ldr	r2, [pc, #444]	; (80019b4 <fsm_tuning_run+0x4b0>)
 80017f6:	fb82 1203 	smull	r1, r2, r2, r3
 80017fa:	1092      	asrs	r2, r2, #2
 80017fc:	17db      	asrs	r3, r3, #31
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	647b      	str	r3, [r7, #68]	; 0x44
			int buffer2 = redTemp % 10;
 8001802:	4b6b      	ldr	r3, [pc, #428]	; (80019b0 <fsm_tuning_run+0x4ac>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	4b6b      	ldr	r3, [pc, #428]	; (80019b4 <fsm_tuning_run+0x4b0>)
 8001808:	fb83 1302 	smull	r1, r3, r3, r2
 800180c:	1099      	asrs	r1, r3, #2
 800180e:	17d3      	asrs	r3, r2, #31
 8001810:	1ac9      	subs	r1, r1, r3
 8001812:	460b      	mov	r3, r1
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	440b      	add	r3, r1
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	643b      	str	r3, [r7, #64]	; 0x40
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#TUNING_RED\r\n", buffer1, buffer2), 1000);
 800181e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001820:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001822:	4965      	ldr	r1, [pc, #404]	; (80019b8 <fsm_tuning_run+0x4b4>)
 8001824:	4865      	ldr	r0, [pc, #404]	; (80019bc <fsm_tuning_run+0x4b8>)
 8001826:	f003 fa39 	bl	8004c9c <siprintf>
 800182a:	4603      	mov	r3, r0
 800182c:	b29a      	uxth	r2, r3
 800182e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001832:	4962      	ldr	r1, [pc, #392]	; (80019bc <fsm_tuning_run+0x4b8>)
 8001834:	4862      	ldr	r0, [pc, #392]	; (80019c0 <fsm_tuning_run+0x4bc>)
 8001836:	f003 f8b1 	bl	800499c <HAL_UART_Transmit>
		}
		if(isBTHold(0) == 1){
 800183a:	2000      	movs	r0, #0
 800183c:	f7fe fd4e 	bl	80002dc <isBTHold>
 8001840:	4603      	mov	r3, r0
 8001842:	2b01      	cmp	r3, #1
 8001844:	d10f      	bne.n	8001866 <fsm_tuning_run+0x362>
			status = INIT;
 8001846:	4b58      	ldr	r3, [pc, #352]	; (80019a8 <fsm_tuning_run+0x4a4>)
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]
			redTemp = 1; greenTemp = 1; yellowTemp = 1;
 800184c:	4b58      	ldr	r3, [pc, #352]	; (80019b0 <fsm_tuning_run+0x4ac>)
 800184e:	2201      	movs	r2, #1
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	4b56      	ldr	r3, [pc, #344]	; (80019ac <fsm_tuning_run+0x4a8>)
 8001854:	2201      	movs	r2, #1
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	4b5a      	ldr	r3, [pc, #360]	; (80019c4 <fsm_tuning_run+0x4c0>)
 800185a:	2201      	movs	r2, #1
 800185c:	601a      	str	r2, [r3, #0]
			ledBalance();
 800185e:	f7ff fcbb 	bl	80011d8 <ledBalance>
			clearTrafficLights();
 8001862:	f000 faa5 	bl	8001db0 <clearTrafficLights>
		}
		if(isBTPressed(1) == 1){
 8001866:	2001      	movs	r0, #1
 8001868:	f7fe fd1e 	bl	80002a8 <isBTPressed>
 800186c:	4603      	mov	r3, r0
 800186e:	2b01      	cmp	r3, #1
 8001870:	d130      	bne.n	80018d4 <fsm_tuning_run+0x3d0>
			greenTemp++;
 8001872:	4b4e      	ldr	r3, [pc, #312]	; (80019ac <fsm_tuning_run+0x4a8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	3301      	adds	r3, #1
 8001878:	4a4c      	ldr	r2, [pc, #304]	; (80019ac <fsm_tuning_run+0x4a8>)
 800187a:	6013      	str	r3, [r2, #0]
			if(greenTemp > 99) greenTemp = 1;
 800187c:	4b4b      	ldr	r3, [pc, #300]	; (80019ac <fsm_tuning_run+0x4a8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b63      	cmp	r3, #99	; 0x63
 8001882:	dd02      	ble.n	800188a <fsm_tuning_run+0x386>
 8001884:	4b49      	ldr	r3, [pc, #292]	; (80019ac <fsm_tuning_run+0x4a8>)
 8001886:	2201      	movs	r2, #1
 8001888:	601a      	str	r2, [r3, #0]
			int buffer1 = greenTemp / 10;
 800188a:	4b48      	ldr	r3, [pc, #288]	; (80019ac <fsm_tuning_run+0x4a8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a49      	ldr	r2, [pc, #292]	; (80019b4 <fsm_tuning_run+0x4b0>)
 8001890:	fb82 1203 	smull	r1, r2, r2, r3
 8001894:	1092      	asrs	r2, r2, #2
 8001896:	17db      	asrs	r3, r3, #31
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	63fb      	str	r3, [r7, #60]	; 0x3c
			int buffer2 = greenTemp % 10;
 800189c:	4b43      	ldr	r3, [pc, #268]	; (80019ac <fsm_tuning_run+0x4a8>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4b44      	ldr	r3, [pc, #272]	; (80019b4 <fsm_tuning_run+0x4b0>)
 80018a2:	fb83 1302 	smull	r1, r3, r3, r2
 80018a6:	1099      	asrs	r1, r3, #2
 80018a8:	17d3      	asrs	r3, r2, #31
 80018aa:	1ac9      	subs	r1, r1, r3
 80018ac:	460b      	mov	r3, r1
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	63bb      	str	r3, [r7, #56]	; 0x38
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#TUNING_GREEN(+1)\r\n", buffer1, buffer2), 1000);
 80018b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018bc:	4942      	ldr	r1, [pc, #264]	; (80019c8 <fsm_tuning_run+0x4c4>)
 80018be:	483f      	ldr	r0, [pc, #252]	; (80019bc <fsm_tuning_run+0x4b8>)
 80018c0:	f003 f9ec 	bl	8004c9c <siprintf>
 80018c4:	4603      	mov	r3, r0
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018cc:	493b      	ldr	r1, [pc, #236]	; (80019bc <fsm_tuning_run+0x4b8>)
 80018ce:	483c      	ldr	r0, [pc, #240]	; (80019c0 <fsm_tuning_run+0x4bc>)
 80018d0:	f003 f864 	bl	800499c <HAL_UART_Transmit>
		}
		if(isBTHold(1) == 1){
 80018d4:	2001      	movs	r0, #1
 80018d6:	f7fe fd01 	bl	80002dc <isBTHold>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d130      	bne.n	8001942 <fsm_tuning_run+0x43e>
			greenTemp += 10;
 80018e0:	4b32      	ldr	r3, [pc, #200]	; (80019ac <fsm_tuning_run+0x4a8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	330a      	adds	r3, #10
 80018e6:	4a31      	ldr	r2, [pc, #196]	; (80019ac <fsm_tuning_run+0x4a8>)
 80018e8:	6013      	str	r3, [r2, #0]
			if(greenTemp > 99) greenTemp = 1;
 80018ea:	4b30      	ldr	r3, [pc, #192]	; (80019ac <fsm_tuning_run+0x4a8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b63      	cmp	r3, #99	; 0x63
 80018f0:	dd02      	ble.n	80018f8 <fsm_tuning_run+0x3f4>
 80018f2:	4b2e      	ldr	r3, [pc, #184]	; (80019ac <fsm_tuning_run+0x4a8>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	601a      	str	r2, [r3, #0]
			int buffer1 = greenTemp / 10;
 80018f8:	4b2c      	ldr	r3, [pc, #176]	; (80019ac <fsm_tuning_run+0x4a8>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a2d      	ldr	r2, [pc, #180]	; (80019b4 <fsm_tuning_run+0x4b0>)
 80018fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001902:	1092      	asrs	r2, r2, #2
 8001904:	17db      	asrs	r3, r3, #31
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	637b      	str	r3, [r7, #52]	; 0x34
			int buffer2 = greenTemp % 10;
 800190a:	4b28      	ldr	r3, [pc, #160]	; (80019ac <fsm_tuning_run+0x4a8>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	4b29      	ldr	r3, [pc, #164]	; (80019b4 <fsm_tuning_run+0x4b0>)
 8001910:	fb83 1302 	smull	r1, r3, r3, r2
 8001914:	1099      	asrs	r1, r3, #2
 8001916:	17d3      	asrs	r3, r2, #31
 8001918:	1ac9      	subs	r1, r1, r3
 800191a:	460b      	mov	r3, r1
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	440b      	add	r3, r1
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	633b      	str	r3, [r7, #48]	; 0x30
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#TUNING_GREEN(+10)\r\n", buffer1, buffer2), 1000);
 8001926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001928:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800192a:	4928      	ldr	r1, [pc, #160]	; (80019cc <fsm_tuning_run+0x4c8>)
 800192c:	4823      	ldr	r0, [pc, #140]	; (80019bc <fsm_tuning_run+0x4b8>)
 800192e:	f003 f9b5 	bl	8004c9c <siprintf>
 8001932:	4603      	mov	r3, r0
 8001934:	b29a      	uxth	r2, r3
 8001936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800193a:	4920      	ldr	r1, [pc, #128]	; (80019bc <fsm_tuning_run+0x4b8>)
 800193c:	4820      	ldr	r0, [pc, #128]	; (80019c0 <fsm_tuning_run+0x4bc>)
 800193e:	f003 f82d 	bl	800499c <HAL_UART_Transmit>
		}
		if(isBTPressed(2) == 1){
 8001942:	2002      	movs	r0, #2
 8001944:	f7fe fcb0 	bl	80002a8 <isBTPressed>
 8001948:	4603      	mov	r3, r0
 800194a:	2b01      	cmp	r3, #1
 800194c:	f040 8139 	bne.w	8001bc2 <fsm_tuning_run+0x6be>
			green = greenTemp;
 8001950:	4b16      	ldr	r3, [pc, #88]	; (80019ac <fsm_tuning_run+0x4a8>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a1e      	ldr	r2, [pc, #120]	; (80019d0 <fsm_tuning_run+0x4cc>)
 8001956:	6013      	str	r3, [r2, #0]
			int buffer1 = green / 10;
 8001958:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <fsm_tuning_run+0x4cc>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a15      	ldr	r2, [pc, #84]	; (80019b4 <fsm_tuning_run+0x4b0>)
 800195e:	fb82 1203 	smull	r1, r2, r2, r3
 8001962:	1092      	asrs	r2, r2, #2
 8001964:	17db      	asrs	r3, r3, #31
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	62fb      	str	r3, [r7, #44]	; 0x2c
			int buffer2 = green % 10;
 800196a:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <fsm_tuning_run+0x4cc>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <fsm_tuning_run+0x4b0>)
 8001970:	fb83 1302 	smull	r1, r3, r3, r2
 8001974:	1099      	asrs	r1, r3, #2
 8001976:	17d3      	asrs	r3, r2, #31
 8001978:	1ac9      	subs	r1, r1, r3
 800197a:	460b      	mov	r3, r1
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	440b      	add	r3, r1
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	62bb      	str	r3, [r7, #40]	; 0x28
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#GREEN_SET\r\n", buffer1, buffer2), 1000);
 8001986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001988:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800198a:	4912      	ldr	r1, [pc, #72]	; (80019d4 <fsm_tuning_run+0x4d0>)
 800198c:	480b      	ldr	r0, [pc, #44]	; (80019bc <fsm_tuning_run+0x4b8>)
 800198e:	f003 f985 	bl	8004c9c <siprintf>
 8001992:	4603      	mov	r3, r0
 8001994:	b29a      	uxth	r2, r3
 8001996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800199a:	4908      	ldr	r1, [pc, #32]	; (80019bc <fsm_tuning_run+0x4b8>)
 800199c:	4808      	ldr	r0, [pc, #32]	; (80019c0 <fsm_tuning_run+0x4bc>)
 800199e:	f002 fffd 	bl	800499c <HAL_UART_Transmit>
		}
		break;
 80019a2:	e10e      	b.n	8001bc2 <fsm_tuning_run+0x6be>
 80019a4:	2000035c 	.word	0x2000035c
 80019a8:	20000192 	.word	0x20000192
 80019ac:	2000008c 	.word	0x2000008c
 80019b0:	20000088 	.word	0x20000088
 80019b4:	66666667 	.word	0x66666667
 80019b8:	080057a0 	.word	0x080057a0
 80019bc:	20000160 	.word	0x20000160
 80019c0:	20000224 	.word	0x20000224
 80019c4:	20000090 	.word	0x20000090
 80019c8:	08005828 	.word	0x08005828
 80019cc:	08005848 	.word	0x08005848
 80019d0:	20000098 	.word	0x20000098
 80019d4:	08005868 	.word	0x08005868
	case TUNING_YELLOW:
		if(timer_flag[3] == 1){
 80019d8:	4b7d      	ldr	r3, [pc, #500]	; (8001bd0 <fsm_tuning_run+0x6cc>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d105      	bne.n	80019ec <fsm_tuning_run+0x4e8>
			toggleYellowLED();
 80019e0:	f000 fa3c 	bl	8001e5c <toggleYellowLED>
			setTimer(250, 3);
 80019e4:	2103      	movs	r1, #3
 80019e6:	20fa      	movs	r0, #250	; 0xfa
 80019e8:	f000 fee8 	bl	80027bc <setTimer>
		}
		if(isBTPressed(0) == 1){
 80019ec:	2000      	movs	r0, #0
 80019ee:	f7fe fc5b 	bl	80002a8 <isBTPressed>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d12c      	bne.n	8001a52 <fsm_tuning_run+0x54e>
			status = TUNING_GREEN;
 80019f8:	4b76      	ldr	r3, [pc, #472]	; (8001bd4 <fsm_tuning_run+0x6d0>)
 80019fa:	220c      	movs	r2, #12
 80019fc:	701a      	strb	r2, [r3, #0]
			yellowTemp = 1;
 80019fe:	4b76      	ldr	r3, [pc, #472]	; (8001bd8 <fsm_tuning_run+0x6d4>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	601a      	str	r2, [r3, #0]
			clearTrafficLights();
 8001a04:	f000 f9d4 	bl	8001db0 <clearTrafficLights>
			int buffer1 = greenTemp / 10;
 8001a08:	4b74      	ldr	r3, [pc, #464]	; (8001bdc <fsm_tuning_run+0x6d8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <fsm_tuning_run+0x6dc>)
 8001a0e:	fb82 1203 	smull	r1, r2, r2, r3
 8001a12:	1092      	asrs	r2, r2, #2
 8001a14:	17db      	asrs	r3, r3, #31
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	667b      	str	r3, [r7, #100]	; 0x64
			int buffer2 = greenTemp % 10;
 8001a1a:	4b70      	ldr	r3, [pc, #448]	; (8001bdc <fsm_tuning_run+0x6d8>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	4b70      	ldr	r3, [pc, #448]	; (8001be0 <fsm_tuning_run+0x6dc>)
 8001a20:	fb83 1302 	smull	r1, r3, r3, r2
 8001a24:	1099      	asrs	r1, r3, #2
 8001a26:	17d3      	asrs	r3, r2, #31
 8001a28:	1ac9      	subs	r1, r1, r3
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	663b      	str	r3, [r7, #96]	; 0x60
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#TUNING_GREEN\r\n", buffer1, buffer2), 1000);
 8001a36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a38:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001a3a:	496a      	ldr	r1, [pc, #424]	; (8001be4 <fsm_tuning_run+0x6e0>)
 8001a3c:	486a      	ldr	r0, [pc, #424]	; (8001be8 <fsm_tuning_run+0x6e4>)
 8001a3e:	f003 f92d 	bl	8004c9c <siprintf>
 8001a42:	4603      	mov	r3, r0
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a4a:	4967      	ldr	r1, [pc, #412]	; (8001be8 <fsm_tuning_run+0x6e4>)
 8001a4c:	4867      	ldr	r0, [pc, #412]	; (8001bec <fsm_tuning_run+0x6e8>)
 8001a4e:	f002 ffa5 	bl	800499c <HAL_UART_Transmit>
		}
		if(isBTHold(0) == 1){
 8001a52:	2000      	movs	r0, #0
 8001a54:	f7fe fc42 	bl	80002dc <isBTHold>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d10f      	bne.n	8001a7e <fsm_tuning_run+0x57a>
			status = INIT;
 8001a5e:	4b5d      	ldr	r3, [pc, #372]	; (8001bd4 <fsm_tuning_run+0x6d0>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
			redTemp = 1; greenTemp = 1; yellowTemp = 1;
 8001a64:	4b62      	ldr	r3, [pc, #392]	; (8001bf0 <fsm_tuning_run+0x6ec>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	4b5c      	ldr	r3, [pc, #368]	; (8001bdc <fsm_tuning_run+0x6d8>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	4b59      	ldr	r3, [pc, #356]	; (8001bd8 <fsm_tuning_run+0x6d4>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	601a      	str	r2, [r3, #0]
			ledBalance();
 8001a76:	f7ff fbaf 	bl	80011d8 <ledBalance>
			clearTrafficLights();
 8001a7a:	f000 f999 	bl	8001db0 <clearTrafficLights>
		}
		if(isBTPressed(1) == 1){
 8001a7e:	2001      	movs	r0, #1
 8001a80:	f7fe fc12 	bl	80002a8 <isBTPressed>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d130      	bne.n	8001aec <fsm_tuning_run+0x5e8>
			yellowTemp++;
 8001a8a:	4b53      	ldr	r3, [pc, #332]	; (8001bd8 <fsm_tuning_run+0x6d4>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	4a51      	ldr	r2, [pc, #324]	; (8001bd8 <fsm_tuning_run+0x6d4>)
 8001a92:	6013      	str	r3, [r2, #0]
			if(yellowTemp > 99) yellowTemp = 1;
 8001a94:	4b50      	ldr	r3, [pc, #320]	; (8001bd8 <fsm_tuning_run+0x6d4>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b63      	cmp	r3, #99	; 0x63
 8001a9a:	dd02      	ble.n	8001aa2 <fsm_tuning_run+0x59e>
 8001a9c:	4b4e      	ldr	r3, [pc, #312]	; (8001bd8 <fsm_tuning_run+0x6d4>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	601a      	str	r2, [r3, #0]
			int buffer1 = yellowTemp / 10;
 8001aa2:	4b4d      	ldr	r3, [pc, #308]	; (8001bd8 <fsm_tuning_run+0x6d4>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a4e      	ldr	r2, [pc, #312]	; (8001be0 <fsm_tuning_run+0x6dc>)
 8001aa8:	fb82 1203 	smull	r1, r2, r2, r3
 8001aac:	1092      	asrs	r2, r2, #2
 8001aae:	17db      	asrs	r3, r3, #31
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
			int buffer2 = yellowTemp % 10;
 8001ab4:	4b48      	ldr	r3, [pc, #288]	; (8001bd8 <fsm_tuning_run+0x6d4>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b49      	ldr	r3, [pc, #292]	; (8001be0 <fsm_tuning_run+0x6dc>)
 8001aba:	fb83 1302 	smull	r1, r3, r3, r2
 8001abe:	1099      	asrs	r1, r3, #2
 8001ac0:	17d3      	asrs	r3, r2, #31
 8001ac2:	1ac9      	subs	r1, r1, r3
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	440b      	add	r3, r1
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	65bb      	str	r3, [r7, #88]	; 0x58
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#TUNING_YELLOW(+1)\r\n", buffer1, buffer2), 1000);
 8001ad0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ad2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001ad4:	4947      	ldr	r1, [pc, #284]	; (8001bf4 <fsm_tuning_run+0x6f0>)
 8001ad6:	4844      	ldr	r0, [pc, #272]	; (8001be8 <fsm_tuning_run+0x6e4>)
 8001ad8:	f003 f8e0 	bl	8004c9c <siprintf>
 8001adc:	4603      	mov	r3, r0
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae4:	4940      	ldr	r1, [pc, #256]	; (8001be8 <fsm_tuning_run+0x6e4>)
 8001ae6:	4841      	ldr	r0, [pc, #260]	; (8001bec <fsm_tuning_run+0x6e8>)
 8001ae8:	f002 ff58 	bl	800499c <HAL_UART_Transmit>
		}
		if(isBTHold(1) == 1){
 8001aec:	2001      	movs	r0, #1
 8001aee:	f7fe fbf5 	bl	80002dc <isBTHold>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d130      	bne.n	8001b5a <fsm_tuning_run+0x656>
			yellowTemp += 10;
 8001af8:	4b37      	ldr	r3, [pc, #220]	; (8001bd8 <fsm_tuning_run+0x6d4>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	330a      	adds	r3, #10
 8001afe:	4a36      	ldr	r2, [pc, #216]	; (8001bd8 <fsm_tuning_run+0x6d4>)
 8001b00:	6013      	str	r3, [r2, #0]
			if(yellowTemp > 99) yellowTemp = 1;
 8001b02:	4b35      	ldr	r3, [pc, #212]	; (8001bd8 <fsm_tuning_run+0x6d4>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b63      	cmp	r3, #99	; 0x63
 8001b08:	dd02      	ble.n	8001b10 <fsm_tuning_run+0x60c>
 8001b0a:	4b33      	ldr	r3, [pc, #204]	; (8001bd8 <fsm_tuning_run+0x6d4>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]
			int buffer1 = yellowTemp / 10;
 8001b10:	4b31      	ldr	r3, [pc, #196]	; (8001bd8 <fsm_tuning_run+0x6d4>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a32      	ldr	r2, [pc, #200]	; (8001be0 <fsm_tuning_run+0x6dc>)
 8001b16:	fb82 1203 	smull	r1, r2, r2, r3
 8001b1a:	1092      	asrs	r2, r2, #2
 8001b1c:	17db      	asrs	r3, r3, #31
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	657b      	str	r3, [r7, #84]	; 0x54
			int buffer2 = yellowTemp % 10;
 8001b22:	4b2d      	ldr	r3, [pc, #180]	; (8001bd8 <fsm_tuning_run+0x6d4>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	4b2e      	ldr	r3, [pc, #184]	; (8001be0 <fsm_tuning_run+0x6dc>)
 8001b28:	fb83 1302 	smull	r1, r3, r3, r2
 8001b2c:	1099      	asrs	r1, r3, #2
 8001b2e:	17d3      	asrs	r3, r2, #31
 8001b30:	1ac9      	subs	r1, r1, r3
 8001b32:	460b      	mov	r3, r1
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	440b      	add	r3, r1
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	653b      	str	r3, [r7, #80]	; 0x50
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#TUNING_YELLOW(+10)\r\n", buffer1, buffer2), 1000);
 8001b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b42:	492d      	ldr	r1, [pc, #180]	; (8001bf8 <fsm_tuning_run+0x6f4>)
 8001b44:	4828      	ldr	r0, [pc, #160]	; (8001be8 <fsm_tuning_run+0x6e4>)
 8001b46:	f003 f8a9 	bl	8004c9c <siprintf>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b52:	4925      	ldr	r1, [pc, #148]	; (8001be8 <fsm_tuning_run+0x6e4>)
 8001b54:	4825      	ldr	r0, [pc, #148]	; (8001bec <fsm_tuning_run+0x6e8>)
 8001b56:	f002 ff21 	bl	800499c <HAL_UART_Transmit>
		}
		if(isBTPressed(2) == 1){
 8001b5a:	2002      	movs	r0, #2
 8001b5c:	f7fe fba4 	bl	80002a8 <isBTPressed>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d12f      	bne.n	8001bc6 <fsm_tuning_run+0x6c2>
			yellow = yellowTemp;
 8001b66:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <fsm_tuning_run+0x6d4>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a24      	ldr	r2, [pc, #144]	; (8001bfc <fsm_tuning_run+0x6f8>)
 8001b6c:	6013      	str	r3, [r2, #0]
			int buffer1 = yellow / 10;
 8001b6e:	4b23      	ldr	r3, [pc, #140]	; (8001bfc <fsm_tuning_run+0x6f8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a1b      	ldr	r2, [pc, #108]	; (8001be0 <fsm_tuning_run+0x6dc>)
 8001b74:	fb82 1203 	smull	r1, r2, r2, r3
 8001b78:	1092      	asrs	r2, r2, #2
 8001b7a:	17db      	asrs	r3, r3, #31
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
			int buffer2 = yellow % 10;
 8001b80:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <fsm_tuning_run+0x6f8>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4b16      	ldr	r3, [pc, #88]	; (8001be0 <fsm_tuning_run+0x6dc>)
 8001b86:	fb83 1302 	smull	r1, r3, r3, r2
 8001b8a:	1099      	asrs	r1, r3, #2
 8001b8c:	17d3      	asrs	r3, r2, #31
 8001b8e:	1ac9      	subs	r1, r1, r3
 8001b90:	460b      	mov	r3, r1
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	64bb      	str	r3, [r7, #72]	; 0x48
			HAL_UART_Transmit(&huart2, (void *)message, sprintf(message, "!7SEG:%d%d#YELLOW_SET\r\n", buffer1, buffer2), 1000);
 8001b9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ba0:	4917      	ldr	r1, [pc, #92]	; (8001c00 <fsm_tuning_run+0x6fc>)
 8001ba2:	4811      	ldr	r0, [pc, #68]	; (8001be8 <fsm_tuning_run+0x6e4>)
 8001ba4:	f003 f87a 	bl	8004c9c <siprintf>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bb0:	490d      	ldr	r1, [pc, #52]	; (8001be8 <fsm_tuning_run+0x6e4>)
 8001bb2:	480e      	ldr	r0, [pc, #56]	; (8001bec <fsm_tuning_run+0x6e8>)
 8001bb4:	f002 fef2 	bl	800499c <HAL_UART_Transmit>
		}
		break;
 8001bb8:	e005      	b.n	8001bc6 <fsm_tuning_run+0x6c2>
	default:
		break;
 8001bba:	bf00      	nop
 8001bbc:	e004      	b.n	8001bc8 <fsm_tuning_run+0x6c4>
		break;
 8001bbe:	bf00      	nop
 8001bc0:	e002      	b.n	8001bc8 <fsm_tuning_run+0x6c4>
		break;
 8001bc2:	bf00      	nop
 8001bc4:	e000      	b.n	8001bc8 <fsm_tuning_run+0x6c4>
		break;
 8001bc6:	bf00      	nop
	}
}
 8001bc8:	bf00      	nop
 8001bca:	3768      	adds	r7, #104	; 0x68
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	2000035c 	.word	0x2000035c
 8001bd4:	20000192 	.word	0x20000192
 8001bd8:	20000090 	.word	0x20000090
 8001bdc:	2000008c 	.word	0x2000008c
 8001be0:	66666667 	.word	0x66666667
 8001be4:	08005880 	.word	0x08005880
 8001be8:	20000160 	.word	0x20000160
 8001bec:	20000224 	.word	0x20000224
 8001bf0:	20000088 	.word	0x20000088
 8001bf4:	0800589c 	.word	0x0800589c
 8001bf8:	080058bc 	.word	0x080058bc
 8001bfc:	2000009c 	.word	0x2000009c
 8001c00:	080058dc 	.word	0x080058dc

08001c04 <controlTrafficLights>:
int yellow = 2;
int isPed;
char message[MAX_MESSAGE_LENGTH];
enum TRAFFIC_STATE status = INIT;

void controlTrafficLights(int color1, int color2){
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
//	index = 0 -> W-E Traffic light
//  index = 1 -> N-S Traffic light
	switch(color1){
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b66      	cmp	r3, #102	; 0x66
 8001c12:	d021      	beq.n	8001c58 <controlTrafficLights+0x54>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b66      	cmp	r3, #102	; 0x66
 8001c18:	dc2a      	bgt.n	8001c70 <controlTrafficLights+0x6c>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b64      	cmp	r3, #100	; 0x64
 8001c1e:	d003      	beq.n	8001c28 <controlTrafficLights+0x24>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b65      	cmp	r3, #101	; 0x65
 8001c24:	d00c      	beq.n	8001c40 <controlTrafficLights+0x3c>
 8001c26:	e023      	b.n	8001c70 <controlTrafficLights+0x6c>
	case RED:
		HAL_GPIO_WritePin(D2_TF1_LED1_GPIO_Port, D2_TF1_LED1_Pin, GPIO_PIN_SET);
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c2e:	4835      	ldr	r0, [pc, #212]	; (8001d04 <controlTrafficLights+0x100>)
 8001c30:	f001 faa9 	bl	8003186 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_TF1_LED2_GPIO_Port, D3_TF1_LED2_Pin, GPIO_PIN_RESET);
 8001c34:	2200      	movs	r2, #0
 8001c36:	2108      	movs	r1, #8
 8001c38:	4833      	ldr	r0, [pc, #204]	; (8001d08 <controlTrafficLights+0x104>)
 8001c3a:	f001 faa4 	bl	8003186 <HAL_GPIO_WritePin>
		break;
 8001c3e:	e023      	b.n	8001c88 <controlTrafficLights+0x84>
	case GREEN:
		HAL_GPIO_WritePin(D2_TF1_LED1_GPIO_Port, D2_TF1_LED1_Pin, GPIO_PIN_RESET);
 8001c40:	2200      	movs	r2, #0
 8001c42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c46:	482f      	ldr	r0, [pc, #188]	; (8001d04 <controlTrafficLights+0x100>)
 8001c48:	f001 fa9d 	bl	8003186 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_TF1_LED2_GPIO_Port, D3_TF1_LED2_Pin, GPIO_PIN_SET);
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	2108      	movs	r1, #8
 8001c50:	482d      	ldr	r0, [pc, #180]	; (8001d08 <controlTrafficLights+0x104>)
 8001c52:	f001 fa98 	bl	8003186 <HAL_GPIO_WritePin>
		break;
 8001c56:	e017      	b.n	8001c88 <controlTrafficLights+0x84>
	case YELLOW:
		HAL_GPIO_WritePin(D2_TF1_LED1_GPIO_Port, D2_TF1_LED1_Pin, GPIO_PIN_SET);
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c5e:	4829      	ldr	r0, [pc, #164]	; (8001d04 <controlTrafficLights+0x100>)
 8001c60:	f001 fa91 	bl	8003186 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_TF1_LED2_GPIO_Port, D3_TF1_LED2_Pin, GPIO_PIN_SET);
 8001c64:	2201      	movs	r2, #1
 8001c66:	2108      	movs	r1, #8
 8001c68:	4827      	ldr	r0, [pc, #156]	; (8001d08 <controlTrafficLights+0x104>)
 8001c6a:	f001 fa8c 	bl	8003186 <HAL_GPIO_WritePin>
		break;
 8001c6e:	e00b      	b.n	8001c88 <controlTrafficLights+0x84>
	default:
		HAL_GPIO_WritePin(D2_TF1_LED1_GPIO_Port, D2_TF1_LED1_Pin, GPIO_PIN_RESET);
 8001c70:	2200      	movs	r2, #0
 8001c72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c76:	4823      	ldr	r0, [pc, #140]	; (8001d04 <controlTrafficLights+0x100>)
 8001c78:	f001 fa85 	bl	8003186 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_TF1_LED2_GPIO_Port, D3_TF1_LED2_Pin, GPIO_PIN_RESET);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2108      	movs	r1, #8
 8001c80:	4821      	ldr	r0, [pc, #132]	; (8001d08 <controlTrafficLights+0x104>)
 8001c82:	f001 fa80 	bl	8003186 <HAL_GPIO_WritePin>
		break;
 8001c86:	bf00      	nop
	}
	switch(color2){
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	2b66      	cmp	r3, #102	; 0x66
 8001c8c:	d01f      	beq.n	8001cce <controlTrafficLights+0xca>
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	2b66      	cmp	r3, #102	; 0x66
 8001c92:	dc27      	bgt.n	8001ce4 <controlTrafficLights+0xe0>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	2b64      	cmp	r3, #100	; 0x64
 8001c98:	d003      	beq.n	8001ca2 <controlTrafficLights+0x9e>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	2b65      	cmp	r3, #101	; 0x65
 8001c9e:	d00b      	beq.n	8001cb8 <controlTrafficLights+0xb4>
 8001ca0:	e020      	b.n	8001ce4 <controlTrafficLights+0xe0>
	case RED:
		HAL_GPIO_WritePin(D4_TF2_LED1_GPIO_Port, D4_TF2_LED1_Pin, GPIO_PIN_SET);
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	2120      	movs	r1, #32
 8001ca6:	4818      	ldr	r0, [pc, #96]	; (8001d08 <controlTrafficLights+0x104>)
 8001ca8:	f001 fa6d 	bl	8003186 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_TF2_LED2_GPIO_Port, D5_TF2_LED2_Pin, GPIO_PIN_RESET);
 8001cac:	2200      	movs	r2, #0
 8001cae:	2110      	movs	r1, #16
 8001cb0:	4815      	ldr	r0, [pc, #84]	; (8001d08 <controlTrafficLights+0x104>)
 8001cb2:	f001 fa68 	bl	8003186 <HAL_GPIO_WritePin>
		break;
 8001cb6:	e020      	b.n	8001cfa <controlTrafficLights+0xf6>
	case GREEN: // GREEN
		HAL_GPIO_WritePin(D4_TF2_LED1_GPIO_Port, D4_TF2_LED1_Pin, GPIO_PIN_RESET);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2120      	movs	r1, #32
 8001cbc:	4812      	ldr	r0, [pc, #72]	; (8001d08 <controlTrafficLights+0x104>)
 8001cbe:	f001 fa62 	bl	8003186 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_TF2_LED2_GPIO_Port, D5_TF2_LED2_Pin, GPIO_PIN_SET);
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	2110      	movs	r1, #16
 8001cc6:	4810      	ldr	r0, [pc, #64]	; (8001d08 <controlTrafficLights+0x104>)
 8001cc8:	f001 fa5d 	bl	8003186 <HAL_GPIO_WritePin>
		break;
 8001ccc:	e015      	b.n	8001cfa <controlTrafficLights+0xf6>
	case YELLOW: // YELLOW
		HAL_GPIO_WritePin(D4_TF2_LED1_GPIO_Port, D4_TF2_LED1_Pin, GPIO_PIN_SET);
 8001cce:	2201      	movs	r2, #1
 8001cd0:	2120      	movs	r1, #32
 8001cd2:	480d      	ldr	r0, [pc, #52]	; (8001d08 <controlTrafficLights+0x104>)
 8001cd4:	f001 fa57 	bl	8003186 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_TF2_LED2_GPIO_Port, D5_TF2_LED2_Pin, GPIO_PIN_SET);
 8001cd8:	2201      	movs	r2, #1
 8001cda:	2110      	movs	r1, #16
 8001cdc:	480a      	ldr	r0, [pc, #40]	; (8001d08 <controlTrafficLights+0x104>)
 8001cde:	f001 fa52 	bl	8003186 <HAL_GPIO_WritePin>
		break;
 8001ce2:	e00a      	b.n	8001cfa <controlTrafficLights+0xf6>
	default:
		HAL_GPIO_WritePin(D4_TF2_LED1_GPIO_Port, D4_TF2_LED1_Pin, GPIO_PIN_RESET);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2120      	movs	r1, #32
 8001ce8:	4807      	ldr	r0, [pc, #28]	; (8001d08 <controlTrafficLights+0x104>)
 8001cea:	f001 fa4c 	bl	8003186 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_TF2_LED2_GPIO_Port, D5_TF2_LED2_Pin, GPIO_PIN_RESET);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2110      	movs	r1, #16
 8001cf2:	4805      	ldr	r0, [pc, #20]	; (8001d08 <controlTrafficLights+0x104>)
 8001cf4:	f001 fa47 	bl	8003186 <HAL_GPIO_WritePin>
		break;
 8001cf8:	bf00      	nop
	}
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40010800 	.word	0x40010800
 8001d08:	40010c00 	.word	0x40010c00

08001d0c <controlPedLights>:

void controlPedLights(int color){
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
	switch(color){
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3b64      	subs	r3, #100	; 0x64
 8001d18:	2b03      	cmp	r3, #3
 8001d1a:	d83f      	bhi.n	8001d9c <controlPedLights+0x90>
 8001d1c:	a201      	add	r2, pc, #4	; (adr r2, 8001d24 <controlPedLights+0x18>)
 8001d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d22:	bf00      	nop
 8001d24:	08001d35 	.word	0x08001d35
 8001d28:	08001d4f 	.word	0x08001d4f
 8001d2c:	08001d69 	.word	0x08001d69
 8001d30:	08001d83 	.word	0x08001d83
	case RED: // RED
		HAL_GPIO_WritePin(D6_PDL_LED1_GPIO_Port, D6_PDL_LED1_Pin, GPIO_PIN_SET);
 8001d34:	2201      	movs	r2, #1
 8001d36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d3a:	481b      	ldr	r0, [pc, #108]	; (8001da8 <controlPedLights+0x9c>)
 8001d3c:	f001 fa23 	bl	8003186 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_PDL_LED2_GPIO_Port, D7_PDL_LED2_Pin, GPIO_PIN_RESET);
 8001d40:	2200      	movs	r2, #0
 8001d42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d46:	4819      	ldr	r0, [pc, #100]	; (8001dac <controlPedLights+0xa0>)
 8001d48:	f001 fa1d 	bl	8003186 <HAL_GPIO_WritePin>
		break;
 8001d4c:	e027      	b.n	8001d9e <controlPedLights+0x92>
	case GREEN: // GREEN
		HAL_GPIO_WritePin(D6_PDL_LED1_GPIO_Port, D6_PDL_LED1_Pin, GPIO_PIN_RESET);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d54:	4814      	ldr	r0, [pc, #80]	; (8001da8 <controlPedLights+0x9c>)
 8001d56:	f001 fa16 	bl	8003186 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_PDL_LED2_GPIO_Port, D7_PDL_LED2_Pin, GPIO_PIN_SET);
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d60:	4812      	ldr	r0, [pc, #72]	; (8001dac <controlPedLights+0xa0>)
 8001d62:	f001 fa10 	bl	8003186 <HAL_GPIO_WritePin>
		break;
 8001d66:	e01a      	b.n	8001d9e <controlPedLights+0x92>
	case YELLOW: // YELLOW
		HAL_GPIO_WritePin(D6_PDL_LED1_GPIO_Port, D6_PDL_LED1_Pin, GPIO_PIN_SET);
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d6e:	480e      	ldr	r0, [pc, #56]	; (8001da8 <controlPedLights+0x9c>)
 8001d70:	f001 fa09 	bl	8003186 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_PDL_LED2_GPIO_Port, D7_PDL_LED2_Pin, GPIO_PIN_SET);
 8001d74:	2201      	movs	r2, #1
 8001d76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d7a:	480c      	ldr	r0, [pc, #48]	; (8001dac <controlPedLights+0xa0>)
 8001d7c:	f001 fa03 	bl	8003186 <HAL_GPIO_WritePin>
		break;
 8001d80:	e00d      	b.n	8001d9e <controlPedLights+0x92>
	case OFF: // OFF
		HAL_GPIO_WritePin(D6_PDL_LED1_GPIO_Port, D6_PDL_LED1_Pin, GPIO_PIN_RESET);
 8001d82:	2200      	movs	r2, #0
 8001d84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d88:	4807      	ldr	r0, [pc, #28]	; (8001da8 <controlPedLights+0x9c>)
 8001d8a:	f001 f9fc 	bl	8003186 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_PDL_LED2_GPIO_Port, D7_PDL_LED2_Pin, GPIO_PIN_RESET);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d94:	4805      	ldr	r0, [pc, #20]	; (8001dac <controlPedLights+0xa0>)
 8001d96:	f001 f9f6 	bl	8003186 <HAL_GPIO_WritePin>
		break;
 8001d9a:	e000      	b.n	8001d9e <controlPedLights+0x92>
	default:
		break;
 8001d9c:	bf00      	nop
	}
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40010c00 	.word	0x40010c00
 8001dac:	40010800 	.word	0x40010800

08001db0 <clearTrafficLights>:

void clearTrafficLights(){
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
	//Main TL
	HAL_GPIO_WritePin(D2_TF1_LED1_GPIO_Port, D2_TF1_LED1_Pin, GPIO_PIN_RESET);
 8001db4:	2200      	movs	r2, #0
 8001db6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dba:	480a      	ldr	r0, [pc, #40]	; (8001de4 <clearTrafficLights+0x34>)
 8001dbc:	f001 f9e3 	bl	8003186 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_TF1_LED2_GPIO_Port, D3_TF1_LED2_Pin, GPIO_PIN_RESET);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2108      	movs	r1, #8
 8001dc4:	4808      	ldr	r0, [pc, #32]	; (8001de8 <clearTrafficLights+0x38>)
 8001dc6:	f001 f9de 	bl	8003186 <HAL_GPIO_WritePin>

	//Other TL
	HAL_GPIO_WritePin(D4_TF2_LED1_GPIO_Port, D4_TF2_LED1_Pin, GPIO_PIN_RESET);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2120      	movs	r1, #32
 8001dce:	4806      	ldr	r0, [pc, #24]	; (8001de8 <clearTrafficLights+0x38>)
 8001dd0:	f001 f9d9 	bl	8003186 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_TF2_LED2_GPIO_Port, D5_TF2_LED2_Pin, GPIO_PIN_RESET);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2110      	movs	r1, #16
 8001dd8:	4803      	ldr	r0, [pc, #12]	; (8001de8 <clearTrafficLights+0x38>)
 8001dda:	f001 f9d4 	bl	8003186 <HAL_GPIO_WritePin>
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40010800 	.word	0x40010800
 8001de8:	40010c00 	.word	0x40010c00

08001dec <toggleRedLED>:

void toggleRedLED(){
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D3_TF1_LED2_GPIO_Port, D3_TF1_LED2_Pin, GPIO_PIN_RESET);
 8001df0:	2200      	movs	r2, #0
 8001df2:	2108      	movs	r1, #8
 8001df4:	4809      	ldr	r0, [pc, #36]	; (8001e1c <toggleRedLED+0x30>)
 8001df6:	f001 f9c6 	bl	8003186 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_TF2_LED2_GPIO_Port, D5_TF2_LED2_Pin, GPIO_PIN_RESET);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2110      	movs	r1, #16
 8001dfe:	4807      	ldr	r0, [pc, #28]	; (8001e1c <toggleRedLED+0x30>)
 8001e00:	f001 f9c1 	bl	8003186 <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(D2_TF1_LED1_GPIO_Port, D2_TF1_LED1_Pin);
 8001e04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e08:	4805      	ldr	r0, [pc, #20]	; (8001e20 <toggleRedLED+0x34>)
 8001e0a:	f001 f9d4 	bl	80031b6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D4_TF2_LED1_GPIO_Port, D4_TF2_LED1_Pin);
 8001e0e:	2120      	movs	r1, #32
 8001e10:	4802      	ldr	r0, [pc, #8]	; (8001e1c <toggleRedLED+0x30>)
 8001e12:	f001 f9d0 	bl	80031b6 <HAL_GPIO_TogglePin>
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40010c00 	.word	0x40010c00
 8001e20:	40010800 	.word	0x40010800

08001e24 <toggleGreenLED>:

void toggleGreenLED(){
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_TF1_LED1_GPIO_Port, D2_TF1_LED1_Pin, GPIO_PIN_RESET);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e2e:	4809      	ldr	r0, [pc, #36]	; (8001e54 <toggleGreenLED+0x30>)
 8001e30:	f001 f9a9 	bl	8003186 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_TF2_LED1_GPIO_Port, D4_TF2_LED1_Pin, GPIO_PIN_RESET);
 8001e34:	2200      	movs	r2, #0
 8001e36:	2120      	movs	r1, #32
 8001e38:	4807      	ldr	r0, [pc, #28]	; (8001e58 <toggleGreenLED+0x34>)
 8001e3a:	f001 f9a4 	bl	8003186 <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(D3_TF1_LED2_GPIO_Port, D3_TF1_LED2_Pin);
 8001e3e:	2108      	movs	r1, #8
 8001e40:	4805      	ldr	r0, [pc, #20]	; (8001e58 <toggleGreenLED+0x34>)
 8001e42:	f001 f9b8 	bl	80031b6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D5_TF2_LED2_GPIO_Port, D5_TF2_LED2_Pin);
 8001e46:	2110      	movs	r1, #16
 8001e48:	4803      	ldr	r0, [pc, #12]	; (8001e58 <toggleGreenLED+0x34>)
 8001e4a:	f001 f9b4 	bl	80031b6 <HAL_GPIO_TogglePin>
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40010800 	.word	0x40010800
 8001e58:	40010c00 	.word	0x40010c00

08001e5c <toggleYellowLED>:

void toggleYellowLED(){
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
		HAL_GPIO_TogglePin(D2_TF1_LED1_GPIO_Port, D2_TF1_LED1_Pin);
 8001e60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e64:	4808      	ldr	r0, [pc, #32]	; (8001e88 <toggleYellowLED+0x2c>)
 8001e66:	f001 f9a6 	bl	80031b6 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(D3_TF1_LED2_GPIO_Port, D3_TF1_LED2_Pin);
 8001e6a:	2108      	movs	r1, #8
 8001e6c:	4807      	ldr	r0, [pc, #28]	; (8001e8c <toggleYellowLED+0x30>)
 8001e6e:	f001 f9a2 	bl	80031b6 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(D4_TF2_LED1_GPIO_Port, D4_TF2_LED1_Pin);
 8001e72:	2120      	movs	r1, #32
 8001e74:	4805      	ldr	r0, [pc, #20]	; (8001e8c <toggleYellowLED+0x30>)
 8001e76:	f001 f99e 	bl	80031b6 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(D5_TF2_LED2_GPIO_Port, D5_TF2_LED2_Pin);
 8001e7a:	2110      	movs	r1, #16
 8001e7c:	4803      	ldr	r0, [pc, #12]	; (8001e8c <toggleYellowLED+0x30>)
 8001e7e:	f001 f99a 	bl	80031b6 <HAL_GPIO_TogglePin>
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40010800 	.word	0x40010800
 8001e8c:	40010c00 	.word	0x40010c00

08001e90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e94:	f000 fe6c 	bl	8002b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e98:	f000 f84a 	bl	8001f30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e9c:	f000 f95a 	bl	8002154 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001ea0:	f000 f888 	bl	8001fb4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001ea4:	f000 f92c 	bl	8002100 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001ea8:	f000 f8d0 	bl	800204c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001eac:	4816      	ldr	r0, [pc, #88]	; (8001f08 <main+0x78>)
 8001eae:	f001 fe17 	bl	8003ae0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	4815      	ldr	r0, [pc, #84]	; (8001f0c <main+0x7c>)
 8001eb6:	f001 feb5 	bl	8003c24 <HAL_TIM_PWM_Start>
  buzzer_init(TIM3);
 8001eba:	4815      	ldr	r0, [pc, #84]	; (8001f10 <main+0x80>)
 8001ebc:	f7fe fa28 	bl	8000310 <buzzer_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 8001ec0:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <main+0x84>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]

  SCH_Add_Task(fsm_automatic_run, 0, 1);
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	2100      	movs	r1, #0
 8001eca:	4813      	ldr	r0, [pc, #76]	; (8001f18 <main+0x88>)
 8001ecc:	f000 f9e8 	bl	80022a0 <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_run, 0, 1);
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4811      	ldr	r0, [pc, #68]	; (8001f1c <main+0x8c>)
 8001ed6:	f000 f9e3 	bl	80022a0 <SCH_Add_Task>
  SCH_Add_Task(fsm_tuning_run, 0, 1);
 8001eda:	2201      	movs	r2, #1
 8001edc:	2100      	movs	r1, #0
 8001ede:	4810      	ldr	r0, [pc, #64]	; (8001f20 <main+0x90>)
 8001ee0:	f000 f9de 	bl	80022a0 <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 0, 1);
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	480e      	ldr	r0, [pc, #56]	; (8001f24 <main+0x94>)
 8001eea:	f000 f9d9 	bl	80022a0 <SCH_Add_Task>
  SCH_Add_Task(timerRun, 0, 1);
 8001eee:	2201      	movs	r2, #1
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	480d      	ldr	r0, [pc, #52]	; (8001f28 <main+0x98>)
 8001ef4:	f000 f9d4 	bl	80022a0 <SCH_Add_Task>
  SCH_Add_Task(buzzer_run, 0, 1);
 8001ef8:	2201      	movs	r2, #1
 8001efa:	2100      	movs	r1, #0
 8001efc:	480b      	ldr	r0, [pc, #44]	; (8001f2c <main+0x9c>)
 8001efe:	f000 f9cf 	bl	80022a0 <SCH_Add_Task>

  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks();
 8001f02:	f000 fc17 	bl	8002734 <SCH_Dispatch_Tasks>
 8001f06:	e7fc      	b.n	8001f02 <main+0x72>
 8001f08:	20000194 	.word	0x20000194
 8001f0c:	200001dc 	.word	0x200001dc
 8001f10:	40000400 	.word	0x40000400
 8001f14:	20000192 	.word	0x20000192
 8001f18:	080004a9 	.word	0x080004a9
 8001f1c:	08000db5 	.word	0x08000db5
 8001f20:	08001505 	.word	0x08001505
 8001f24:	0800014d 	.word	0x0800014d
 8001f28:	080027fd 	.word	0x080027fd
 8001f2c:	08000399 	.word	0x08000399

08001f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b090      	sub	sp, #64	; 0x40
 8001f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f36:	f107 0318 	add.w	r3, r7, #24
 8001f3a:	2228      	movs	r2, #40	; 0x28
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f002 fecc 	bl	8004cdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]
 8001f4c:	609a      	str	r2, [r3, #8]
 8001f4e:	60da      	str	r2, [r3, #12]
 8001f50:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f52:	2302      	movs	r3, #2
 8001f54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f56:	2301      	movs	r3, #1
 8001f58:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f5a:	2310      	movs	r3, #16
 8001f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001f62:	2300      	movs	r3, #0
 8001f64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001f66:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f6c:	f107 0318 	add.w	r3, r7, #24
 8001f70:	4618      	mov	r0, r3
 8001f72:	f001 f955 	bl	8003220 <HAL_RCC_OscConfig>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001f7c:	f000 f962 	bl	8002244 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f80:	230f      	movs	r3, #15
 8001f82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f84:	2302      	movs	r3, #2
 8001f86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f92:	2300      	movs	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f96:	1d3b      	adds	r3, r7, #4
 8001f98:	2102      	movs	r1, #2
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f001 fbc2 	bl	8003724 <HAL_RCC_ClockConfig>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001fa6:	f000 f94d 	bl	8002244 <Error_Handler>
  }
}
 8001faa:	bf00      	nop
 8001fac:	3740      	adds	r7, #64	; 0x40
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fba:	f107 0308 	add.w	r3, r7, #8
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc8:	463b      	mov	r3, r7
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fd0:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <MX_TIM2_Init+0x94>)
 8001fd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001fd8:	4b1b      	ldr	r3, [pc, #108]	; (8002048 <MX_TIM2_Init+0x94>)
 8001fda:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001fde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe0:	4b19      	ldr	r3, [pc, #100]	; (8002048 <MX_TIM2_Init+0x94>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 8001fe6:	4b18      	ldr	r3, [pc, #96]	; (8002048 <MX_TIM2_Init+0x94>)
 8001fe8:	224f      	movs	r2, #79	; 0x4f
 8001fea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fec:	4b16      	ldr	r3, [pc, #88]	; (8002048 <MX_TIM2_Init+0x94>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <MX_TIM2_Init+0x94>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ff8:	4813      	ldr	r0, [pc, #76]	; (8002048 <MX_TIM2_Init+0x94>)
 8001ffa:	f001 fd21 	bl	8003a40 <HAL_TIM_Base_Init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002004:	f000 f91e 	bl	8002244 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002008:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800200c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800200e:	f107 0308 	add.w	r3, r7, #8
 8002012:	4619      	mov	r1, r3
 8002014:	480c      	ldr	r0, [pc, #48]	; (8002048 <MX_TIM2_Init+0x94>)
 8002016:	f002 f871 	bl	80040fc <HAL_TIM_ConfigClockSource>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002020:	f000 f910 	bl	8002244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002024:	2300      	movs	r3, #0
 8002026:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002028:	2300      	movs	r3, #0
 800202a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800202c:	463b      	mov	r3, r7
 800202e:	4619      	mov	r1, r3
 8002030:	4805      	ldr	r0, [pc, #20]	; (8002048 <MX_TIM2_Init+0x94>)
 8002032:	f002 fbf3 	bl	800481c <HAL_TIMEx_MasterConfigSynchronization>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800203c:	f000 f902 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002040:	bf00      	nop
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20000194 	.word	0x20000194

0800204c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08a      	sub	sp, #40	; 0x28
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002052:	f107 0320 	add.w	r3, r7, #32
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800205c:	1d3b      	adds	r3, r7, #4
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	60da      	str	r2, [r3, #12]
 8002068:	611a      	str	r2, [r3, #16]
 800206a:	615a      	str	r2, [r3, #20]
 800206c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800206e:	4b22      	ldr	r3, [pc, #136]	; (80020f8 <MX_TIM3_Init+0xac>)
 8002070:	4a22      	ldr	r2, [pc, #136]	; (80020fc <MX_TIM3_Init+0xb0>)
 8002072:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8002074:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <MX_TIM3_Init+0xac>)
 8002076:	223f      	movs	r2, #63	; 0x3f
 8002078:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800207a:	4b1f      	ldr	r3, [pc, #124]	; (80020f8 <MX_TIM3_Init+0xac>)
 800207c:	2200      	movs	r2, #0
 800207e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002080:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <MX_TIM3_Init+0xac>)
 8002082:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002086:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002088:	4b1b      	ldr	r3, [pc, #108]	; (80020f8 <MX_TIM3_Init+0xac>)
 800208a:	2200      	movs	r2, #0
 800208c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800208e:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <MX_TIM3_Init+0xac>)
 8002090:	2200      	movs	r2, #0
 8002092:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002094:	4818      	ldr	r0, [pc, #96]	; (80020f8 <MX_TIM3_Init+0xac>)
 8002096:	f001 fd75 	bl	8003b84 <HAL_TIM_PWM_Init>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80020a0:	f000 f8d0 	bl	8002244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a4:	2300      	movs	r3, #0
 80020a6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a8:	2300      	movs	r3, #0
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020ac:	f107 0320 	add.w	r3, r7, #32
 80020b0:	4619      	mov	r1, r3
 80020b2:	4811      	ldr	r0, [pc, #68]	; (80020f8 <MX_TIM3_Init+0xac>)
 80020b4:	f002 fbb2 	bl	800481c <HAL_TIMEx_MasterConfigSynchronization>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80020be:	f000 f8c1 	bl	8002244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020c2:	2360      	movs	r3, #96	; 0x60
 80020c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020d2:	1d3b      	adds	r3, r7, #4
 80020d4:	2200      	movs	r2, #0
 80020d6:	4619      	mov	r1, r3
 80020d8:	4807      	ldr	r0, [pc, #28]	; (80020f8 <MX_TIM3_Init+0xac>)
 80020da:	f001 ff4d 	bl	8003f78 <HAL_TIM_PWM_ConfigChannel>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80020e4:	f000 f8ae 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80020e8:	4803      	ldr	r0, [pc, #12]	; (80020f8 <MX_TIM3_Init+0xac>)
 80020ea:	f000 fc31 	bl	8002950 <HAL_TIM_MspPostInit>

}
 80020ee:	bf00      	nop
 80020f0:	3728      	adds	r7, #40	; 0x28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200001dc 	.word	0x200001dc
 80020fc:	40000400 	.word	0x40000400

08002100 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002104:	4b11      	ldr	r3, [pc, #68]	; (800214c <MX_USART2_UART_Init+0x4c>)
 8002106:	4a12      	ldr	r2, [pc, #72]	; (8002150 <MX_USART2_UART_Init+0x50>)
 8002108:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800210a:	4b10      	ldr	r3, [pc, #64]	; (800214c <MX_USART2_UART_Init+0x4c>)
 800210c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002110:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002112:	4b0e      	ldr	r3, [pc, #56]	; (800214c <MX_USART2_UART_Init+0x4c>)
 8002114:	2200      	movs	r2, #0
 8002116:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <MX_USART2_UART_Init+0x4c>)
 800211a:	2200      	movs	r2, #0
 800211c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800211e:	4b0b      	ldr	r3, [pc, #44]	; (800214c <MX_USART2_UART_Init+0x4c>)
 8002120:	2200      	movs	r2, #0
 8002122:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002124:	4b09      	ldr	r3, [pc, #36]	; (800214c <MX_USART2_UART_Init+0x4c>)
 8002126:	220c      	movs	r2, #12
 8002128:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800212a:	4b08      	ldr	r3, [pc, #32]	; (800214c <MX_USART2_UART_Init+0x4c>)
 800212c:	2200      	movs	r2, #0
 800212e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <MX_USART2_UART_Init+0x4c>)
 8002132:	2200      	movs	r2, #0
 8002134:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002136:	4805      	ldr	r0, [pc, #20]	; (800214c <MX_USART2_UART_Init+0x4c>)
 8002138:	f002 fbe0 	bl	80048fc <HAL_UART_Init>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002142:	f000 f87f 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000224 	.word	0x20000224
 8002150:	40004400 	.word	0x40004400

08002154 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215a:	f107 0308 	add.w	r3, r7, #8
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	609a      	str	r2, [r3, #8]
 8002166:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002168:	4b2e      	ldr	r3, [pc, #184]	; (8002224 <MX_GPIO_Init+0xd0>)
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	4a2d      	ldr	r2, [pc, #180]	; (8002224 <MX_GPIO_Init+0xd0>)
 800216e:	f043 0304 	orr.w	r3, r3, #4
 8002172:	6193      	str	r3, [r2, #24]
 8002174:	4b2b      	ldr	r3, [pc, #172]	; (8002224 <MX_GPIO_Init+0xd0>)
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	607b      	str	r3, [r7, #4]
 800217e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002180:	4b28      	ldr	r3, [pc, #160]	; (8002224 <MX_GPIO_Init+0xd0>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	4a27      	ldr	r2, [pc, #156]	; (8002224 <MX_GPIO_Init+0xd0>)
 8002186:	f043 0308 	orr.w	r3, r3, #8
 800218a:	6193      	str	r3, [r2, #24]
 800218c:	4b25      	ldr	r3, [pc, #148]	; (8002224 <MX_GPIO_Init+0xd0>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	f003 0308 	and.w	r3, r3, #8
 8002194:	603b      	str	r3, [r7, #0]
 8002196:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_PDL_LED1_Pin|D3_TF1_LED2_Pin|D5_TF2_LED2_Pin|D4_TF2_LED1_Pin, GPIO_PIN_RESET);
 8002198:	2200      	movs	r2, #0
 800219a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800219e:	4822      	ldr	r0, [pc, #136]	; (8002228 <MX_GPIO_Init+0xd4>)
 80021a0:	f000 fff1 	bl	8003186 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_PDL_LED2_Pin|D2_TF1_LED1_Pin, GPIO_PIN_RESET);
 80021a4:	2200      	movs	r2, #0
 80021a6:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80021aa:	4820      	ldr	r0, [pc, #128]	; (800222c <MX_GPIO_Init+0xd8>)
 80021ac:	f000 ffeb 	bl	8003186 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_PD_BT_Pin A1_BT1_Pin A2_BT2_Pin */
  GPIO_InitStruct.Pin = A0_PD_BT_Pin|A1_BT1_Pin|A2_BT2_Pin;
 80021b0:	2313      	movs	r3, #19
 80021b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021b8:	2301      	movs	r3, #1
 80021ba:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021bc:	f107 0308 	add.w	r3, r7, #8
 80021c0:	4619      	mov	r1, r3
 80021c2:	481a      	ldr	r0, [pc, #104]	; (800222c <MX_GPIO_Init+0xd8>)
 80021c4:	f000 fe44 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_BT3_Pin */
  GPIO_InitStruct.Pin = A3_BT3_Pin;
 80021c8:	2301      	movs	r3, #1
 80021ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021d0:	2301      	movs	r3, #1
 80021d2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_BT3_GPIO_Port, &GPIO_InitStruct);
 80021d4:	f107 0308 	add.w	r3, r7, #8
 80021d8:	4619      	mov	r1, r3
 80021da:	4813      	ldr	r0, [pc, #76]	; (8002228 <MX_GPIO_Init+0xd4>)
 80021dc:	f000 fe38 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_PDL_LED1_Pin D3_TF1_LED2_Pin D5_TF2_LED2_Pin D4_TF2_LED1_Pin */
  GPIO_InitStruct.Pin = D6_PDL_LED1_Pin|D3_TF1_LED2_Pin|D5_TF2_LED2_Pin|D4_TF2_LED1_Pin;
 80021e0:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80021e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e6:	2301      	movs	r3, #1
 80021e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ee:	2302      	movs	r3, #2
 80021f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f2:	f107 0308 	add.w	r3, r7, #8
 80021f6:	4619      	mov	r1, r3
 80021f8:	480b      	ldr	r0, [pc, #44]	; (8002228 <MX_GPIO_Init+0xd4>)
 80021fa:	f000 fe29 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_PDL_LED2_Pin D2_TF1_LED1_Pin */
  GPIO_InitStruct.Pin = D7_PDL_LED2_Pin|D2_TF1_LED1_Pin;
 80021fe:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002202:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002204:	2301      	movs	r3, #1
 8002206:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220c:	2302      	movs	r3, #2
 800220e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002210:	f107 0308 	add.w	r3, r7, #8
 8002214:	4619      	mov	r1, r3
 8002216:	4805      	ldr	r0, [pc, #20]	; (800222c <MX_GPIO_Init+0xd8>)
 8002218:	f000 fe1a 	bl	8002e50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800221c:	bf00      	nop
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40021000 	.word	0x40021000
 8002228:	40010c00 	.word	0x40010c00
 800222c:	40010800 	.word	0x40010800

08002230 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8002238:	f000 f80a 	bl	8002250 <SCH_Update>
	//getKeyInput();
	//timerRun();
	//buzzer_run();
}
 800223c:	bf00      	nop
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002248:	b672      	cpsid	i
}
 800224a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800224c:	e7fe      	b.n	800224c <Error_Handler+0x8>
	...

08002250 <SCH_Update>:

        SCH_tasks_G[i].TaskID = -1;
    }
}

void SCH_Update(void) {
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
	count_SCH_Update++;
 8002254:	4b10      	ldr	r3, [pc, #64]	; (8002298 <SCH_Update+0x48>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	3301      	adds	r3, #1
 800225a:	4a0f      	ldr	r2, [pc, #60]	; (8002298 <SCH_Update+0x48>)
 800225c:	6013      	str	r3, [r2, #0]
	if (SCH_tasks_G[0].pTask && SCH_tasks_G[0].RunMe == 0) {
 800225e:	4b0f      	ldr	r3, [pc, #60]	; (800229c <SCH_Update+0x4c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d013      	beq.n	800228e <SCH_Update+0x3e>
 8002266:	4b0d      	ldr	r3, [pc, #52]	; (800229c <SCH_Update+0x4c>)
 8002268:	7b1b      	ldrb	r3, [r3, #12]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10f      	bne.n	800228e <SCH_Update+0x3e>
		if(SCH_tasks_G[0].Delay > 0){
 800226e:	4b0b      	ldr	r3, [pc, #44]	; (800229c <SCH_Update+0x4c>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d004      	beq.n	8002280 <SCH_Update+0x30>
			SCH_tasks_G[0].Delay -= 1;
 8002276:	4b09      	ldr	r3, [pc, #36]	; (800229c <SCH_Update+0x4c>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	3b01      	subs	r3, #1
 800227c:	4a07      	ldr	r2, [pc, #28]	; (800229c <SCH_Update+0x4c>)
 800227e:	6053      	str	r3, [r2, #4]
		}
		if (SCH_tasks_G[0].Delay == 0) {
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <SCH_Update+0x4c>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d102      	bne.n	800228e <SCH_Update+0x3e>
			SCH_tasks_G[0].RunMe = 1;
 8002288:	4b04      	ldr	r3, [pc, #16]	; (800229c <SCH_Update+0x4c>)
 800228a:	2201      	movs	r2, #1
 800228c:	731a      	strb	r2, [r3, #12]
		}
	}
}
 800228e:	bf00      	nop
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	20000338 	.word	0x20000338
 800229c:	2000026c 	.word	0x2000026c

080022a0 <SCH_Add_Task>:

uint32_t SCH_Add_Task(void (* pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 80022a0:	b590      	push	{r4, r7, lr}
 80022a2:	b089      	sub	sp, #36	; 0x24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
	uint8_t newTaskIndex = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	77fb      	strb	r3, [r7, #31]
	uint32_t sumDelay = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	61bb      	str	r3, [r7, #24]
	uint32_t newDelay = 0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	613b      	str	r3, [r7, #16]

	for (newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex++) {
 80022b8:	2300      	movs	r3, #0
 80022ba:	77fb      	strb	r3, [r7, #31]
 80022bc:	e133      	b.n	8002526 <SCH_Add_Task+0x286>
		sumDelay = sumDelay + SCH_tasks_G[newTaskIndex].Delay;
 80022be:	7ffa      	ldrb	r2, [r7, #31]
 80022c0:	49a1      	ldr	r1, [pc, #644]	; (8002548 <SCH_Add_Task+0x2a8>)
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	440b      	add	r3, r1
 80022cc:	3304      	adds	r3, #4
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4413      	add	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
		if (sumDelay > DELAY) {
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	429a      	cmp	r2, r3
 80022dc:	f240 80c1 	bls.w	8002462 <SCH_Add_Task+0x1c2>
			newDelay = DELAY - (sumDelay - SCH_tasks_G[newTaskIndex].Delay);
 80022e0:	7ffa      	ldrb	r2, [r7, #31]
 80022e2:	4999      	ldr	r1, [pc, #612]	; (8002548 <SCH_Add_Task+0x2a8>)
 80022e4:	4613      	mov	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	3304      	adds	r3, #4
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	4413      	add	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
			SCH_tasks_G[newTaskIndex].Delay = sumDelay - DELAY;
 80022fc:	7ffa      	ldrb	r2, [r7, #31]
 80022fe:	69b9      	ldr	r1, [r7, #24]
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	1ac9      	subs	r1, r1, r3
 8002304:	4890      	ldr	r0, [pc, #576]	; (8002548 <SCH_Add_Task+0x2a8>)
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4403      	add	r3, r0
 8002310:	3304      	adds	r3, #4
 8002312:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 8002314:	2309      	movs	r3, #9
 8002316:	75fb      	strb	r3, [r7, #23]
 8002318:	e04c      	b.n	80023b4 <SCH_Add_Task+0x114>
				SCH_tasks_G[i].pTask = SCH_tasks_G[i - 1].pTask;
 800231a:	7dfb      	ldrb	r3, [r7, #23]
 800231c:	1e59      	subs	r1, r3, #1
 800231e:	7dfa      	ldrb	r2, [r7, #23]
 8002320:	4889      	ldr	r0, [pc, #548]	; (8002548 <SCH_Add_Task+0x2a8>)
 8002322:	460b      	mov	r3, r1
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	440b      	add	r3, r1
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4403      	add	r3, r0
 800232c:	6819      	ldr	r1, [r3, #0]
 800232e:	4886      	ldr	r0, [pc, #536]	; (8002548 <SCH_Add_Task+0x2a8>)
 8002330:	4613      	mov	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4403      	add	r3, r0
 800233a:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[i].Period = SCH_tasks_G[i - 1].Period;
 800233c:	7dfb      	ldrb	r3, [r7, #23]
 800233e:	1e59      	subs	r1, r3, #1
 8002340:	7dfa      	ldrb	r2, [r7, #23]
 8002342:	4881      	ldr	r0, [pc, #516]	; (8002548 <SCH_Add_Task+0x2a8>)
 8002344:	460b      	mov	r3, r1
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4403      	add	r3, r0
 800234e:	3308      	adds	r3, #8
 8002350:	6819      	ldr	r1, [r3, #0]
 8002352:	487d      	ldr	r0, [pc, #500]	; (8002548 <SCH_Add_Task+0x2a8>)
 8002354:	4613      	mov	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4403      	add	r3, r0
 800235e:	3308      	adds	r3, #8
 8002360:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[i].Delay = SCH_tasks_G[i - 1].Delay;
 8002362:	7dfb      	ldrb	r3, [r7, #23]
 8002364:	1e59      	subs	r1, r3, #1
 8002366:	7dfa      	ldrb	r2, [r7, #23]
 8002368:	4877      	ldr	r0, [pc, #476]	; (8002548 <SCH_Add_Task+0x2a8>)
 800236a:	460b      	mov	r3, r1
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4403      	add	r3, r0
 8002374:	3304      	adds	r3, #4
 8002376:	6819      	ldr	r1, [r3, #0]
 8002378:	4873      	ldr	r0, [pc, #460]	; (8002548 <SCH_Add_Task+0x2a8>)
 800237a:	4613      	mov	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4403      	add	r3, r0
 8002384:	3304      	adds	r3, #4
 8002386:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[i].TaskID = SCH_tasks_G[i - 1].TaskID;
 8002388:	7dfb      	ldrb	r3, [r7, #23]
 800238a:	1e59      	subs	r1, r3, #1
 800238c:	7dfa      	ldrb	r2, [r7, #23]
 800238e:	486e      	ldr	r0, [pc, #440]	; (8002548 <SCH_Add_Task+0x2a8>)
 8002390:	460b      	mov	r3, r1
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4403      	add	r3, r0
 800239a:	3310      	adds	r3, #16
 800239c:	6819      	ldr	r1, [r3, #0]
 800239e:	486a      	ldr	r0, [pc, #424]	; (8002548 <SCH_Add_Task+0x2a8>)
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4403      	add	r3, r0
 80023aa:	3310      	adds	r3, #16
 80023ac:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 80023ae:	7dfb      	ldrb	r3, [r7, #23]
 80023b0:	3b01      	subs	r3, #1
 80023b2:	75fb      	strb	r3, [r7, #23]
 80023b4:	7dfa      	ldrb	r2, [r7, #23]
 80023b6:	7ffb      	ldrb	r3, [r7, #31]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d8ae      	bhi.n	800231a <SCH_Add_Task+0x7a>
			}
			SCH_tasks_G[newTaskIndex].pTask = pFunction;
 80023bc:	7ffa      	ldrb	r2, [r7, #31]
 80023be:	4962      	ldr	r1, [pc, #392]	; (8002548 <SCH_Add_Task+0x2a8>)
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Delay = newDelay;
 80023ce:	7ffa      	ldrb	r2, [r7, #31]
 80023d0:	495d      	ldr	r1, [pc, #372]	; (8002548 <SCH_Add_Task+0x2a8>)
 80023d2:	4613      	mov	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	3304      	adds	r3, #4
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Period = PERIOD;
 80023e2:	7ffa      	ldrb	r2, [r7, #31]
 80023e4:	4958      	ldr	r1, [pc, #352]	; (8002548 <SCH_Add_Task+0x2a8>)
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	440b      	add	r3, r1
 80023f0:	3308      	adds	r3, #8
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	601a      	str	r2, [r3, #0]
			if (SCH_tasks_G[newTaskIndex].Delay == 0) {
 80023f6:	7ffa      	ldrb	r2, [r7, #31]
 80023f8:	4953      	ldr	r1, [pc, #332]	; (8002548 <SCH_Add_Task+0x2a8>)
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	3304      	adds	r3, #4
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10a      	bne.n	8002422 <SCH_Add_Task+0x182>
				SCH_tasks_G[newTaskIndex].RunMe = 1;
 800240c:	7ffa      	ldrb	r2, [r7, #31]
 800240e:	494e      	ldr	r1, [pc, #312]	; (8002548 <SCH_Add_Task+0x2a8>)
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	330c      	adds	r3, #12
 800241c:	2201      	movs	r2, #1
 800241e:	701a      	strb	r2, [r3, #0]
 8002420:	e009      	b.n	8002436 <SCH_Add_Task+0x196>
			} else {
				SCH_tasks_G[newTaskIndex].RunMe = 0;
 8002422:	7ffa      	ldrb	r2, [r7, #31]
 8002424:	4948      	ldr	r1, [pc, #288]	; (8002548 <SCH_Add_Task+0x2a8>)
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	330c      	adds	r3, #12
 8002432:	2200      	movs	r2, #0
 8002434:	701a      	strb	r2, [r3, #0]
			}
			SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 8002436:	7ffc      	ldrb	r4, [r7, #31]
 8002438:	f000 f9a8 	bl	800278c <Get_New_Task_ID>
 800243c:	4602      	mov	r2, r0
 800243e:	4942      	ldr	r1, [pc, #264]	; (8002548 <SCH_Add_Task+0x2a8>)
 8002440:	4623      	mov	r3, r4
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4423      	add	r3, r4
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	3310      	adds	r3, #16
 800244c:	601a      	str	r2, [r3, #0]
			return SCH_tasks_G[newTaskIndex].TaskID;
 800244e:	7ffa      	ldrb	r2, [r7, #31]
 8002450:	493d      	ldr	r1, [pc, #244]	; (8002548 <SCH_Add_Task+0x2a8>)
 8002452:	4613      	mov	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	440b      	add	r3, r1
 800245c:	3310      	adds	r3, #16
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	e06e      	b.n	8002540 <SCH_Add_Task+0x2a0>
		} else {
			if(SCH_tasks_G[newTaskIndex].pTask == 0x0000){
 8002462:	7ffa      	ldrb	r2, [r7, #31]
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <SCH_Add_Task+0x2a8>)
 8002466:	4613      	mov	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	440b      	add	r3, r1
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d154      	bne.n	8002520 <SCH_Add_Task+0x280>
				SCH_tasks_G[newTaskIndex].pTask = pFunction;
 8002476:	7ffa      	ldrb	r2, [r7, #31]
 8002478:	4933      	ldr	r1, [pc, #204]	; (8002548 <SCH_Add_Task+0x2a8>)
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	440b      	add	r3, r1
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[newTaskIndex].Delay = DELAY - sumDelay;
 8002488:	7ffa      	ldrb	r2, [r7, #31]
 800248a:	68b9      	ldr	r1, [r7, #8]
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	1ac9      	subs	r1, r1, r3
 8002490:	482d      	ldr	r0, [pc, #180]	; (8002548 <SCH_Add_Task+0x2a8>)
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4403      	add	r3, r0
 800249c:	3304      	adds	r3, #4
 800249e:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[newTaskIndex].Period = PERIOD;
 80024a0:	7ffa      	ldrb	r2, [r7, #31]
 80024a2:	4929      	ldr	r1, [pc, #164]	; (8002548 <SCH_Add_Task+0x2a8>)
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	3308      	adds	r3, #8
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	601a      	str	r2, [r3, #0]
				if(SCH_tasks_G[newTaskIndex].Delay == 0){
 80024b4:	7ffa      	ldrb	r2, [r7, #31]
 80024b6:	4924      	ldr	r1, [pc, #144]	; (8002548 <SCH_Add_Task+0x2a8>)
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	3304      	adds	r3, #4
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10a      	bne.n	80024e0 <SCH_Add_Task+0x240>
					SCH_tasks_G[newTaskIndex].RunMe = 1;
 80024ca:	7ffa      	ldrb	r2, [r7, #31]
 80024cc:	491e      	ldr	r1, [pc, #120]	; (8002548 <SCH_Add_Task+0x2a8>)
 80024ce:	4613      	mov	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	330c      	adds	r3, #12
 80024da:	2201      	movs	r2, #1
 80024dc:	701a      	strb	r2, [r3, #0]
 80024de:	e009      	b.n	80024f4 <SCH_Add_Task+0x254>
				} else {
					SCH_tasks_G[newTaskIndex].RunMe = 0;
 80024e0:	7ffa      	ldrb	r2, [r7, #31]
 80024e2:	4919      	ldr	r1, [pc, #100]	; (8002548 <SCH_Add_Task+0x2a8>)
 80024e4:	4613      	mov	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	330c      	adds	r3, #12
 80024f0:	2200      	movs	r2, #0
 80024f2:	701a      	strb	r2, [r3, #0]
				}
				SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 80024f4:	7ffc      	ldrb	r4, [r7, #31]
 80024f6:	f000 f949 	bl	800278c <Get_New_Task_ID>
 80024fa:	4602      	mov	r2, r0
 80024fc:	4912      	ldr	r1, [pc, #72]	; (8002548 <SCH_Add_Task+0x2a8>)
 80024fe:	4623      	mov	r3, r4
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4423      	add	r3, r4
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	3310      	adds	r3, #16
 800250a:	601a      	str	r2, [r3, #0]
				return SCH_tasks_G[newTaskIndex].TaskID;
 800250c:	7ffa      	ldrb	r2, [r7, #31]
 800250e:	490e      	ldr	r1, [pc, #56]	; (8002548 <SCH_Add_Task+0x2a8>)
 8002510:	4613      	mov	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	3310      	adds	r3, #16
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	e00f      	b.n	8002540 <SCH_Add_Task+0x2a0>
	for (newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex++) {
 8002520:	7ffb      	ldrb	r3, [r7, #31]
 8002522:	3301      	adds	r3, #1
 8002524:	77fb      	strb	r3, [r7, #31]
 8002526:	7ffb      	ldrb	r3, [r7, #31]
 8002528:	2b09      	cmp	r3, #9
 800252a:	f67f aec8 	bls.w	80022be <SCH_Add_Task+0x1e>
			}
		}
	}
	return SCH_tasks_G[newTaskIndex].TaskID;
 800252e:	7ffa      	ldrb	r2, [r7, #31]
 8002530:	4905      	ldr	r1, [pc, #20]	; (8002548 <SCH_Add_Task+0x2a8>)
 8002532:	4613      	mov	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	440b      	add	r3, r1
 800253c:	3310      	adds	r3, #16
 800253e:	681b      	ldr	r3, [r3, #0]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3724      	adds	r7, #36	; 0x24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd90      	pop	{r4, r7, pc}
 8002548:	2000026c 	.word	0x2000026c

0800254c <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(uint32_t taskID){
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
	uint8_t Return_code  = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	737b      	strb	r3, [r7, #13]
	uint8_t taskIndex;
	uint8_t j;
	if(taskID != NO_TASK_ID){
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 80e2 	beq.w	8002724 <SCH_Delete_Task+0x1d8>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 8002560:	2300      	movs	r3, #0
 8002562:	73fb      	strb	r3, [r7, #15]
 8002564:	e0da      	b.n	800271c <SCH_Delete_Task+0x1d0>
			if(SCH_tasks_G[taskIndex].TaskID == taskID){
 8002566:	7bfa      	ldrb	r2, [r7, #15]
 8002568:	4971      	ldr	r1, [pc, #452]	; (8002730 <SCH_Delete_Task+0x1e4>)
 800256a:	4613      	mov	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	440b      	add	r3, r1
 8002574:	3310      	adds	r3, #16
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	429a      	cmp	r2, r3
 800257c:	f040 80cb 	bne.w	8002716 <SCH_Delete_Task+0x1ca>
				Return_code = 1;
 8002580:	2301      	movs	r3, #1
 8002582:	737b      	strb	r3, [r7, #13]
				if(taskIndex != 0 && taskIndex < SCH_MAX_TASKS - 1){
 8002584:	7bfb      	ldrb	r3, [r7, #15]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d02b      	beq.n	80025e2 <SCH_Delete_Task+0x96>
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	2b08      	cmp	r3, #8
 800258e:	d828      	bhi.n	80025e2 <SCH_Delete_Task+0x96>
					if(SCH_tasks_G[taskIndex+1].pTask != 0x0000){
 8002590:	7bfb      	ldrb	r3, [r7, #15]
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	4966      	ldr	r1, [pc, #408]	; (8002730 <SCH_Delete_Task+0x1e4>)
 8002596:	4613      	mov	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	440b      	add	r3, r1
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d01d      	beq.n	80025e2 <SCH_Delete_Task+0x96>
						SCH_tasks_G[taskIndex+1].Delay += SCH_tasks_G[taskIndex].Delay;
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	1c5a      	adds	r2, r3, #1
 80025aa:	4961      	ldr	r1, [pc, #388]	; (8002730 <SCH_Delete_Task+0x1e4>)
 80025ac:	4613      	mov	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	3304      	adds	r3, #4
 80025b8:	6819      	ldr	r1, [r3, #0]
 80025ba:	7bfa      	ldrb	r2, [r7, #15]
 80025bc:	485c      	ldr	r0, [pc, #368]	; (8002730 <SCH_Delete_Task+0x1e4>)
 80025be:	4613      	mov	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4403      	add	r3, r0
 80025c8:	3304      	adds	r3, #4
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	7bfa      	ldrb	r2, [r7, #15]
 80025ce:	3201      	adds	r2, #1
 80025d0:	4419      	add	r1, r3
 80025d2:	4857      	ldr	r0, [pc, #348]	; (8002730 <SCH_Delete_Task+0x1e4>)
 80025d4:	4613      	mov	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4413      	add	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4403      	add	r3, r0
 80025de:	3304      	adds	r3, #4
 80025e0:	6019      	str	r1, [r3, #0]
					}
				}

				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
 80025e4:	73bb      	strb	r3, [r7, #14]
 80025e6:	e060      	b.n	80026aa <SCH_Delete_Task+0x15e>
					SCH_tasks_G[j].pTask = SCH_tasks_G[j+1].pTask;
 80025e8:	7bbb      	ldrb	r3, [r7, #14]
 80025ea:	1c59      	adds	r1, r3, #1
 80025ec:	7bba      	ldrb	r2, [r7, #14]
 80025ee:	4850      	ldr	r0, [pc, #320]	; (8002730 <SCH_Delete_Task+0x1e4>)
 80025f0:	460b      	mov	r3, r1
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4403      	add	r3, r0
 80025fa:	6819      	ldr	r1, [r3, #0]
 80025fc:	484c      	ldr	r0, [pc, #304]	; (8002730 <SCH_Delete_Task+0x1e4>)
 80025fe:	4613      	mov	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4403      	add	r3, r0
 8002608:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Period = SCH_tasks_G[j+1].Period;
 800260a:	7bbb      	ldrb	r3, [r7, #14]
 800260c:	1c59      	adds	r1, r3, #1
 800260e:	7bba      	ldrb	r2, [r7, #14]
 8002610:	4847      	ldr	r0, [pc, #284]	; (8002730 <SCH_Delete_Task+0x1e4>)
 8002612:	460b      	mov	r3, r1
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	440b      	add	r3, r1
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4403      	add	r3, r0
 800261c:	3308      	adds	r3, #8
 800261e:	6819      	ldr	r1, [r3, #0]
 8002620:	4843      	ldr	r0, [pc, #268]	; (8002730 <SCH_Delete_Task+0x1e4>)
 8002622:	4613      	mov	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4403      	add	r3, r0
 800262c:	3308      	adds	r3, #8
 800262e:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Delay = SCH_tasks_G[j+1].Delay;
 8002630:	7bbb      	ldrb	r3, [r7, #14]
 8002632:	1c59      	adds	r1, r3, #1
 8002634:	7bba      	ldrb	r2, [r7, #14]
 8002636:	483e      	ldr	r0, [pc, #248]	; (8002730 <SCH_Delete_Task+0x1e4>)
 8002638:	460b      	mov	r3, r1
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4403      	add	r3, r0
 8002642:	3304      	adds	r3, #4
 8002644:	6819      	ldr	r1, [r3, #0]
 8002646:	483a      	ldr	r0, [pc, #232]	; (8002730 <SCH_Delete_Task+0x1e4>)
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4403      	add	r3, r0
 8002652:	3304      	adds	r3, #4
 8002654:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].RunMe = SCH_tasks_G[j+1].RunMe;
 8002656:	7bbb      	ldrb	r3, [r7, #14]
 8002658:	1c59      	adds	r1, r3, #1
 800265a:	7bba      	ldrb	r2, [r7, #14]
 800265c:	4834      	ldr	r0, [pc, #208]	; (8002730 <SCH_Delete_Task+0x1e4>)
 800265e:	460b      	mov	r3, r1
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4403      	add	r3, r0
 8002668:	330c      	adds	r3, #12
 800266a:	7818      	ldrb	r0, [r3, #0]
 800266c:	4930      	ldr	r1, [pc, #192]	; (8002730 <SCH_Delete_Task+0x1e4>)
 800266e:	4613      	mov	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	330c      	adds	r3, #12
 800267a:	4602      	mov	r2, r0
 800267c:	701a      	strb	r2, [r3, #0]
					SCH_tasks_G[j].TaskID = SCH_tasks_G[j+1].TaskID;
 800267e:	7bbb      	ldrb	r3, [r7, #14]
 8002680:	1c59      	adds	r1, r3, #1
 8002682:	7bba      	ldrb	r2, [r7, #14]
 8002684:	482a      	ldr	r0, [pc, #168]	; (8002730 <SCH_Delete_Task+0x1e4>)
 8002686:	460b      	mov	r3, r1
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	440b      	add	r3, r1
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4403      	add	r3, r0
 8002690:	3310      	adds	r3, #16
 8002692:	6819      	ldr	r1, [r3, #0]
 8002694:	4826      	ldr	r0, [pc, #152]	; (8002730 <SCH_Delete_Task+0x1e4>)
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4403      	add	r3, r0
 80026a0:	3310      	adds	r3, #16
 80026a2:	6019      	str	r1, [r3, #0]
				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 80026a4:	7bbb      	ldrb	r3, [r7, #14]
 80026a6:	3301      	adds	r3, #1
 80026a8:	73bb      	strb	r3, [r7, #14]
 80026aa:	7bbb      	ldrb	r3, [r7, #14]
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d99b      	bls.n	80025e8 <SCH_Delete_Task+0x9c>
				}
				SCH_tasks_G[j].pTask = 0;
 80026b0:	7bba      	ldrb	r2, [r7, #14]
 80026b2:	491f      	ldr	r1, [pc, #124]	; (8002730 <SCH_Delete_Task+0x1e4>)
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Period = 0;
 80026c2:	7bba      	ldrb	r2, [r7, #14]
 80026c4:	491a      	ldr	r1, [pc, #104]	; (8002730 <SCH_Delete_Task+0x1e4>)
 80026c6:	4613      	mov	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	440b      	add	r3, r1
 80026d0:	3308      	adds	r3, #8
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Delay = 0;
 80026d6:	7bba      	ldrb	r2, [r7, #14]
 80026d8:	4915      	ldr	r1, [pc, #84]	; (8002730 <SCH_Delete_Task+0x1e4>)
 80026da:	4613      	mov	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4413      	add	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	440b      	add	r3, r1
 80026e4:	3304      	adds	r3, #4
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].RunMe = 0;
 80026ea:	7bba      	ldrb	r2, [r7, #14]
 80026ec:	4910      	ldr	r1, [pc, #64]	; (8002730 <SCH_Delete_Task+0x1e4>)
 80026ee:	4613      	mov	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	440b      	add	r3, r1
 80026f8:	330c      	adds	r3, #12
 80026fa:	2200      	movs	r2, #0
 80026fc:	701a      	strb	r2, [r3, #0]
				SCH_tasks_G[j].TaskID = 0;
 80026fe:	7bba      	ldrb	r2, [r7, #14]
 8002700:	490b      	ldr	r1, [pc, #44]	; (8002730 <SCH_Delete_Task+0x1e4>)
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	440b      	add	r3, r1
 800270c:	3310      	adds	r3, #16
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
				return Return_code;
 8002712:	7b7b      	ldrb	r3, [r7, #13]
 8002714:	e007      	b.n	8002726 <SCH_Delete_Task+0x1da>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 8002716:	7bfb      	ldrb	r3, [r7, #15]
 8002718:	3301      	adds	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
 800271c:	7bfb      	ldrb	r3, [r7, #15]
 800271e:	2b09      	cmp	r3, #9
 8002720:	f67f af21 	bls.w	8002566 <SCH_Delete_Task+0x1a>
			}
		}
	}
	return Return_code;
 8002724:	7b7b      	ldrb	r3, [r7, #13]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr
 8002730:	2000026c 	.word	0x2000026c

08002734 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8002734:	b5b0      	push	{r4, r5, r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[0].RunMe > 0) {
 800273a:	4b13      	ldr	r3, [pc, #76]	; (8002788 <SCH_Dispatch_Tasks+0x54>)
 800273c:	7b1b      	ldrb	r3, [r3, #12]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d019      	beq.n	8002776 <SCH_Dispatch_Tasks+0x42>
		(*SCH_tasks_G[0].pTask)();
 8002742:	4b11      	ldr	r3, [pc, #68]	; (8002788 <SCH_Dispatch_Tasks+0x54>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4798      	blx	r3
		SCH_tasks_G[0].RunMe = 0;
 8002748:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <SCH_Dispatch_Tasks+0x54>)
 800274a:	2200      	movs	r2, #0
 800274c:	731a      	strb	r2, [r3, #12]
		sTask temtask = SCH_tasks_G[0];
 800274e:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <SCH_Dispatch_Tasks+0x54>)
 8002750:	1d3c      	adds	r4, r7, #4
 8002752:	461d      	mov	r5, r3
 8002754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002758:	682b      	ldr	r3, [r5, #0]
 800275a:	6023      	str	r3, [r4, #0]
		SCH_Delete_Task(temtask.TaskID);
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fef4 	bl	800254c <SCH_Delete_Task>
		if (temtask.Period != 0) {
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d005      	beq.n	8002776 <SCH_Dispatch_Tasks+0x42>
			SCH_Add_Task(temtask.pTask, temtask.Period, temtask.Period);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68f9      	ldr	r1, [r7, #12]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fd95 	bl	80022a0 <SCH_Add_Task>
		}
	}
	// Enter low-power mode (Sleep mode). The MCU will wake up on the next interrupt
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8002776:	2101      	movs	r1, #1
 8002778:	2000      	movs	r0, #0
 800277a:	f000 fd35 	bl	80031e8 <HAL_PWR_EnterSLEEPMode>
}
 800277e:	bf00      	nop
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bdb0      	pop	{r4, r5, r7, pc}
 8002786:	bf00      	nop
 8002788:	2000026c 	.word	0x2000026c

0800278c <Get_New_Task_ID>:

static uint32_t Get_New_Task_ID(void){
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
	newTaskID++;
 8002790:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <Get_New_Task_ID+0x2c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	3301      	adds	r3, #1
 8002796:	4a08      	ldr	r2, [pc, #32]	; (80027b8 <Get_New_Task_ID+0x2c>)
 8002798:	6013      	str	r3, [r2, #0]
	if(newTaskID == NO_TASK_ID){
 800279a:	4b07      	ldr	r3, [pc, #28]	; (80027b8 <Get_New_Task_ID+0x2c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d104      	bne.n	80027ac <Get_New_Task_ID+0x20>
		newTaskID++;
 80027a2:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <Get_New_Task_ID+0x2c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	3301      	adds	r3, #1
 80027a8:	4a03      	ldr	r2, [pc, #12]	; (80027b8 <Get_New_Task_ID+0x2c>)
 80027aa:	6013      	str	r3, [r2, #0]
	}
	return newTaskID;
 80027ac:	4b02      	ldr	r3, [pc, #8]	; (80027b8 <Get_New_Task_ID+0x2c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr
 80027b8:	20000334 	.word	0x20000334

080027bc <setTimer>:
#include "software_timer.h"

int timer_counter[MAX_TIMERS] = {0};
int timer_flag[MAX_TIMERS] = {0};

void setTimer(int duration, int id){
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
	timer_counter[id] = duration/TICK;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a09      	ldr	r2, [pc, #36]	; (80027f0 <setTimer+0x34>)
 80027ca:	fb82 1203 	smull	r1, r2, r2, r3
 80027ce:	1092      	asrs	r2, r2, #2
 80027d0:	17db      	asrs	r3, r3, #31
 80027d2:	1ad2      	subs	r2, r2, r3
 80027d4:	4907      	ldr	r1, [pc, #28]	; (80027f4 <setTimer+0x38>)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[id] = 0;
 80027dc:	4a06      	ldr	r2, [pc, #24]	; (80027f8 <setTimer+0x3c>)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2100      	movs	r1, #0
 80027e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr
 80027f0:	66666667 	.word	0x66666667
 80027f4:	2000033c 	.word	0x2000033c
 80027f8:	2000035c 	.word	0x2000035c

080027fc <timerRun>:
void timerRun(){
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_TIMERS; i++){
 8002802:	2300      	movs	r3, #0
 8002804:	607b      	str	r3, [r7, #4]
 8002806:	e022      	b.n	800284e <timerRun+0x52>
		if(timer_counter[i] > 0 && timer_flag[i] == 0){
 8002808:	4a15      	ldr	r2, [pc, #84]	; (8002860 <timerRun+0x64>)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002810:	2b00      	cmp	r3, #0
 8002812:	dd19      	ble.n	8002848 <timerRun+0x4c>
 8002814:	4a13      	ldr	r2, [pc, #76]	; (8002864 <timerRun+0x68>)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d113      	bne.n	8002848 <timerRun+0x4c>
			timer_counter[i]--;
 8002820:	4a0f      	ldr	r2, [pc, #60]	; (8002860 <timerRun+0x64>)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002828:	1e5a      	subs	r2, r3, #1
 800282a:	490d      	ldr	r1, [pc, #52]	; (8002860 <timerRun+0x64>)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0){
 8002832:	4a0b      	ldr	r2, [pc, #44]	; (8002860 <timerRun+0x64>)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283a:	2b00      	cmp	r3, #0
 800283c:	dc04      	bgt.n	8002848 <timerRun+0x4c>
				timer_flag[i] = 1;
 800283e:	4a09      	ldr	r2, [pc, #36]	; (8002864 <timerRun+0x68>)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2101      	movs	r1, #1
 8002844:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < MAX_TIMERS; i++){
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3301      	adds	r3, #1
 800284c:	607b      	str	r3, [r7, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b07      	cmp	r3, #7
 8002852:	ddd9      	ble.n	8002808 <timerRun+0xc>
			}
		}
	}
}
 8002854:	bf00      	nop
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr
 8002860:	2000033c 	.word	0x2000033c
 8002864:	2000035c 	.word	0x2000035c

08002868 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800286e:	4b15      	ldr	r3, [pc, #84]	; (80028c4 <HAL_MspInit+0x5c>)
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	4a14      	ldr	r2, [pc, #80]	; (80028c4 <HAL_MspInit+0x5c>)
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	6193      	str	r3, [r2, #24]
 800287a:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <HAL_MspInit+0x5c>)
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	60bb      	str	r3, [r7, #8]
 8002884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002886:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <HAL_MspInit+0x5c>)
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	4a0e      	ldr	r2, [pc, #56]	; (80028c4 <HAL_MspInit+0x5c>)
 800288c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002890:	61d3      	str	r3, [r2, #28]
 8002892:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <HAL_MspInit+0x5c>)
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289a:	607b      	str	r3, [r7, #4]
 800289c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800289e:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <HAL_MspInit+0x60>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	4a04      	ldr	r2, [pc, #16]	; (80028c8 <HAL_MspInit+0x60>)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028ba:	bf00      	nop
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40010000 	.word	0x40010000

080028cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028dc:	d113      	bne.n	8002906 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028de:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <HAL_TIM_Base_MspInit+0x44>)
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	4a0b      	ldr	r2, [pc, #44]	; (8002910 <HAL_TIM_Base_MspInit+0x44>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	61d3      	str	r3, [r2, #28]
 80028ea:	4b09      	ldr	r3, [pc, #36]	; (8002910 <HAL_TIM_Base_MspInit+0x44>)
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80028f6:	2200      	movs	r2, #0
 80028f8:	2100      	movs	r1, #0
 80028fa:	201c      	movs	r0, #28
 80028fc:	f000 fa71 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002900:	201c      	movs	r0, #28
 8002902:	f000 fa8a 	bl	8002e1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002906:	bf00      	nop
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40021000 	.word	0x40021000

08002914 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a09      	ldr	r2, [pc, #36]	; (8002948 <HAL_TIM_PWM_MspInit+0x34>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d10b      	bne.n	800293e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002926:	4b09      	ldr	r3, [pc, #36]	; (800294c <HAL_TIM_PWM_MspInit+0x38>)
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	4a08      	ldr	r2, [pc, #32]	; (800294c <HAL_TIM_PWM_MspInit+0x38>)
 800292c:	f043 0302 	orr.w	r3, r3, #2
 8002930:	61d3      	str	r3, [r2, #28]
 8002932:	4b06      	ldr	r3, [pc, #24]	; (800294c <HAL_TIM_PWM_MspInit+0x38>)
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800293e:	bf00      	nop
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr
 8002948:	40000400 	.word	0x40000400
 800294c:	40021000 	.word	0x40021000

08002950 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b088      	sub	sp, #32
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002958:	f107 0310 	add.w	r3, r7, #16
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a0f      	ldr	r2, [pc, #60]	; (80029a8 <HAL_TIM_MspPostInit+0x58>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d117      	bne.n	80029a0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002970:	4b0e      	ldr	r3, [pc, #56]	; (80029ac <HAL_TIM_MspPostInit+0x5c>)
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	4a0d      	ldr	r2, [pc, #52]	; (80029ac <HAL_TIM_MspPostInit+0x5c>)
 8002976:	f043 0304 	orr.w	r3, r3, #4
 800297a:	6193      	str	r3, [r2, #24]
 800297c:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <HAL_TIM_MspPostInit+0x5c>)
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PD_BUZZER_Pin;
 8002988:	2340      	movs	r3, #64	; 0x40
 800298a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298c:	2302      	movs	r3, #2
 800298e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002990:	2302      	movs	r3, #2
 8002992:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PD_BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002994:	f107 0310 	add.w	r3, r7, #16
 8002998:	4619      	mov	r1, r3
 800299a:	4805      	ldr	r0, [pc, #20]	; (80029b0 <HAL_TIM_MspPostInit+0x60>)
 800299c:	f000 fa58 	bl	8002e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80029a0:	bf00      	nop
 80029a2:	3720      	adds	r7, #32
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40000400 	.word	0x40000400
 80029ac:	40021000 	.word	0x40021000
 80029b0:	40010800 	.word	0x40010800

080029b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b088      	sub	sp, #32
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029bc:	f107 0310 	add.w	r3, r7, #16
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a1b      	ldr	r2, [pc, #108]	; (8002a3c <HAL_UART_MspInit+0x88>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d12f      	bne.n	8002a34 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029d4:	4b1a      	ldr	r3, [pc, #104]	; (8002a40 <HAL_UART_MspInit+0x8c>)
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	4a19      	ldr	r2, [pc, #100]	; (8002a40 <HAL_UART_MspInit+0x8c>)
 80029da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029de:	61d3      	str	r3, [r2, #28]
 80029e0:	4b17      	ldr	r3, [pc, #92]	; (8002a40 <HAL_UART_MspInit+0x8c>)
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ec:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <HAL_UART_MspInit+0x8c>)
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	4a13      	ldr	r2, [pc, #76]	; (8002a40 <HAL_UART_MspInit+0x8c>)
 80029f2:	f043 0304 	orr.w	r3, r3, #4
 80029f6:	6193      	str	r3, [r2, #24]
 80029f8:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <HAL_UART_MspInit+0x8c>)
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a04:	2304      	movs	r3, #4
 8002a06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a10:	f107 0310 	add.w	r3, r7, #16
 8002a14:	4619      	mov	r1, r3
 8002a16:	480b      	ldr	r0, [pc, #44]	; (8002a44 <HAL_UART_MspInit+0x90>)
 8002a18:	f000 fa1a 	bl	8002e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a1c:	2308      	movs	r3, #8
 8002a1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a28:	f107 0310 	add.w	r3, r7, #16
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4805      	ldr	r0, [pc, #20]	; (8002a44 <HAL_UART_MspInit+0x90>)
 8002a30:	f000 fa0e 	bl	8002e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a34:	bf00      	nop
 8002a36:	3720      	adds	r7, #32
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40004400 	.word	0x40004400
 8002a40:	40021000 	.word	0x40021000
 8002a44:	40010800 	.word	0x40010800

08002a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a4c:	e7fe      	b.n	8002a4c <NMI_Handler+0x4>

08002a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a52:	e7fe      	b.n	8002a52 <HardFault_Handler+0x4>

08002a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a58:	e7fe      	b.n	8002a58 <MemManage_Handler+0x4>

08002a5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a5e:	e7fe      	b.n	8002a5e <BusFault_Handler+0x4>

08002a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a64:	e7fe      	b.n	8002a64 <UsageFault_Handler+0x4>

08002a66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a66:	b480      	push	{r7}
 8002a68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr

08002a72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a72:	b480      	push	{r7}
 8002a74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a76:	bf00      	nop
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bc80      	pop	{r7}
 8002a7c:	4770      	bx	lr

08002a7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a82:	bf00      	nop
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr

08002a8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a8e:	f000 f8b5 	bl	8002bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a9c:	4802      	ldr	r0, [pc, #8]	; (8002aa8 <TIM2_IRQHandler+0x10>)
 8002a9e:	f001 f963 	bl	8003d68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002aa2:	bf00      	nop
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20000194 	.word	0x20000194

08002aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ab4:	4a14      	ldr	r2, [pc, #80]	; (8002b08 <_sbrk+0x5c>)
 8002ab6:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <_sbrk+0x60>)
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ac0:	4b13      	ldr	r3, [pc, #76]	; (8002b10 <_sbrk+0x64>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d102      	bne.n	8002ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ac8:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <_sbrk+0x64>)
 8002aca:	4a12      	ldr	r2, [pc, #72]	; (8002b14 <_sbrk+0x68>)
 8002acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ace:	4b10      	ldr	r3, [pc, #64]	; (8002b10 <_sbrk+0x64>)
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d207      	bcs.n	8002aec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002adc:	f002 f906 	bl	8004cec <__errno>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	220c      	movs	r2, #12
 8002ae4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aea:	e009      	b.n	8002b00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002aec:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <_sbrk+0x64>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002af2:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <_sbrk+0x64>)
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4413      	add	r3, r2
 8002afa:	4a05      	ldr	r2, [pc, #20]	; (8002b10 <_sbrk+0x64>)
 8002afc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002afe:	68fb      	ldr	r3, [r7, #12]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	20005000 	.word	0x20005000
 8002b0c:	00000400 	.word	0x00000400
 8002b10:	2000037c 	.word	0x2000037c
 8002b14:	200004d0 	.word	0x200004d0

08002b18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b24:	f7ff fff8 	bl	8002b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b28:	480b      	ldr	r0, [pc, #44]	; (8002b58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002b2a:	490c      	ldr	r1, [pc, #48]	; (8002b5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002b2c:	4a0c      	ldr	r2, [pc, #48]	; (8002b60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b30:	e002      	b.n	8002b38 <LoopCopyDataInit>

08002b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b36:	3304      	adds	r3, #4

08002b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b3c:	d3f9      	bcc.n	8002b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b3e:	4a09      	ldr	r2, [pc, #36]	; (8002b64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002b40:	4c09      	ldr	r4, [pc, #36]	; (8002b68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b44:	e001      	b.n	8002b4a <LoopFillZerobss>

08002b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b48:	3204      	adds	r2, #4

08002b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b4c:	d3fb      	bcc.n	8002b46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b4e:	f002 f8d3 	bl	8004cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b52:	f7ff f99d 	bl	8001e90 <main>
  bx lr
 8002b56:	4770      	bx	lr
  ldr r0, =_sdata
 8002b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b5c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8002b60:	0800595c 	.word	0x0800595c
  ldr r2, =_sbss
 8002b64:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8002b68:	200004cc 	.word	0x200004cc

08002b6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b6c:	e7fe      	b.n	8002b6c <ADC1_2_IRQHandler>
	...

08002b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b74:	4b08      	ldr	r3, [pc, #32]	; (8002b98 <HAL_Init+0x28>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a07      	ldr	r2, [pc, #28]	; (8002b98 <HAL_Init+0x28>)
 8002b7a:	f043 0310 	orr.w	r3, r3, #16
 8002b7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b80:	2003      	movs	r0, #3
 8002b82:	f000 f923 	bl	8002dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b86:	200f      	movs	r0, #15
 8002b88:	f000 f808 	bl	8002b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b8c:	f7ff fe6c 	bl	8002868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40022000 	.word	0x40022000

08002b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ba4:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <HAL_InitTick+0x54>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	4b12      	ldr	r3, [pc, #72]	; (8002bf4 <HAL_InitTick+0x58>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	4619      	mov	r1, r3
 8002bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 f93b 	bl	8002e36 <HAL_SYSTICK_Config>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e00e      	b.n	8002be8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b0f      	cmp	r3, #15
 8002bce:	d80a      	bhi.n	8002be6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd8:	f000 f903 	bl	8002de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bdc:	4a06      	ldr	r2, [pc, #24]	; (8002bf8 <HAL_InitTick+0x5c>)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
 8002be4:	e000      	b.n	8002be8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	200000a0 	.word	0x200000a0
 8002bf4:	200000a8 	.word	0x200000a8
 8002bf8:	200000a4 	.word	0x200000a4

08002bfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <HAL_IncTick+0x1c>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	461a      	mov	r2, r3
 8002c06:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <HAL_IncTick+0x20>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	4a03      	ldr	r2, [pc, #12]	; (8002c1c <HAL_IncTick+0x20>)
 8002c0e:	6013      	str	r3, [r2, #0]
}
 8002c10:	bf00      	nop
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr
 8002c18:	200000a8 	.word	0x200000a8
 8002c1c:	20000380 	.word	0x20000380

08002c20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return uwTick;
 8002c24:	4b02      	ldr	r3, [pc, #8]	; (8002c30 <HAL_GetTick+0x10>)
 8002c26:	681b      	ldr	r3, [r3, #0]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr
 8002c30:	20000380 	.word	0x20000380

08002c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c44:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <__NVIC_SetPriorityGrouping+0x44>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c50:	4013      	ands	r3, r2
 8002c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c66:	4a04      	ldr	r2, [pc, #16]	; (8002c78 <__NVIC_SetPriorityGrouping+0x44>)
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	60d3      	str	r3, [r2, #12]
}
 8002c6c:	bf00      	nop
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c80:	4b04      	ldr	r3, [pc, #16]	; (8002c94 <__NVIC_GetPriorityGrouping+0x18>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	0a1b      	lsrs	r3, r3, #8
 8002c86:	f003 0307 	and.w	r3, r3, #7
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	e000ed00 	.word	0xe000ed00

08002c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	db0b      	blt.n	8002cc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	f003 021f 	and.w	r2, r3, #31
 8002cb0:	4906      	ldr	r1, [pc, #24]	; (8002ccc <__NVIC_EnableIRQ+0x34>)
 8002cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb6:	095b      	lsrs	r3, r3, #5
 8002cb8:	2001      	movs	r0, #1
 8002cba:	fa00 f202 	lsl.w	r2, r0, r2
 8002cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr
 8002ccc:	e000e100 	.word	0xe000e100

08002cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	6039      	str	r1, [r7, #0]
 8002cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	db0a      	blt.n	8002cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	490c      	ldr	r1, [pc, #48]	; (8002d1c <__NVIC_SetPriority+0x4c>)
 8002cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cee:	0112      	lsls	r2, r2, #4
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cf8:	e00a      	b.n	8002d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	4908      	ldr	r1, [pc, #32]	; (8002d20 <__NVIC_SetPriority+0x50>)
 8002d00:	79fb      	ldrb	r3, [r7, #7]
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	3b04      	subs	r3, #4
 8002d08:	0112      	lsls	r2, r2, #4
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	761a      	strb	r2, [r3, #24]
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	e000e100 	.word	0xe000e100
 8002d20:	e000ed00 	.word	0xe000ed00

08002d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b089      	sub	sp, #36	; 0x24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f1c3 0307 	rsb	r3, r3, #7
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	bf28      	it	cs
 8002d42:	2304      	movcs	r3, #4
 8002d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	3304      	adds	r3, #4
 8002d4a:	2b06      	cmp	r3, #6
 8002d4c:	d902      	bls.n	8002d54 <NVIC_EncodePriority+0x30>
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	3b03      	subs	r3, #3
 8002d52:	e000      	b.n	8002d56 <NVIC_EncodePriority+0x32>
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d58:	f04f 32ff 	mov.w	r2, #4294967295
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	43da      	mvns	r2, r3
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	401a      	ands	r2, r3
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	fa01 f303 	lsl.w	r3, r1, r3
 8002d76:	43d9      	mvns	r1, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d7c:	4313      	orrs	r3, r2
         );
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3724      	adds	r7, #36	; 0x24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr

08002d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d98:	d301      	bcc.n	8002d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e00f      	b.n	8002dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d9e:	4a0a      	ldr	r2, [pc, #40]	; (8002dc8 <SysTick_Config+0x40>)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002da6:	210f      	movs	r1, #15
 8002da8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dac:	f7ff ff90 	bl	8002cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002db0:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <SysTick_Config+0x40>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002db6:	4b04      	ldr	r3, [pc, #16]	; (8002dc8 <SysTick_Config+0x40>)
 8002db8:	2207      	movs	r2, #7
 8002dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	e000e010 	.word	0xe000e010

08002dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff ff2d 	bl	8002c34 <__NVIC_SetPriorityGrouping>
}
 8002dda:	bf00      	nop
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b086      	sub	sp, #24
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	4603      	mov	r3, r0
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
 8002dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002df4:	f7ff ff42 	bl	8002c7c <__NVIC_GetPriorityGrouping>
 8002df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	68b9      	ldr	r1, [r7, #8]
 8002dfe:	6978      	ldr	r0, [r7, #20]
 8002e00:	f7ff ff90 	bl	8002d24 <NVIC_EncodePriority>
 8002e04:	4602      	mov	r2, r0
 8002e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff ff5f 	bl	8002cd0 <__NVIC_SetPriority>
}
 8002e12:	bf00      	nop
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	4603      	mov	r3, r0
 8002e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff ff35 	bl	8002c98 <__NVIC_EnableIRQ>
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b082      	sub	sp, #8
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff ffa2 	bl	8002d88 <SysTick_Config>
 8002e44:	4603      	mov	r3, r0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b08b      	sub	sp, #44	; 0x2c
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e62:	e169      	b.n	8003138 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e64:	2201      	movs	r2, #1
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	69fa      	ldr	r2, [r7, #28]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	f040 8158 	bne.w	8003132 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	4a9a      	ldr	r2, [pc, #616]	; (80030f0 <HAL_GPIO_Init+0x2a0>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d05e      	beq.n	8002f4a <HAL_GPIO_Init+0xfa>
 8002e8c:	4a98      	ldr	r2, [pc, #608]	; (80030f0 <HAL_GPIO_Init+0x2a0>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d875      	bhi.n	8002f7e <HAL_GPIO_Init+0x12e>
 8002e92:	4a98      	ldr	r2, [pc, #608]	; (80030f4 <HAL_GPIO_Init+0x2a4>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d058      	beq.n	8002f4a <HAL_GPIO_Init+0xfa>
 8002e98:	4a96      	ldr	r2, [pc, #600]	; (80030f4 <HAL_GPIO_Init+0x2a4>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d86f      	bhi.n	8002f7e <HAL_GPIO_Init+0x12e>
 8002e9e:	4a96      	ldr	r2, [pc, #600]	; (80030f8 <HAL_GPIO_Init+0x2a8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d052      	beq.n	8002f4a <HAL_GPIO_Init+0xfa>
 8002ea4:	4a94      	ldr	r2, [pc, #592]	; (80030f8 <HAL_GPIO_Init+0x2a8>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d869      	bhi.n	8002f7e <HAL_GPIO_Init+0x12e>
 8002eaa:	4a94      	ldr	r2, [pc, #592]	; (80030fc <HAL_GPIO_Init+0x2ac>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d04c      	beq.n	8002f4a <HAL_GPIO_Init+0xfa>
 8002eb0:	4a92      	ldr	r2, [pc, #584]	; (80030fc <HAL_GPIO_Init+0x2ac>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d863      	bhi.n	8002f7e <HAL_GPIO_Init+0x12e>
 8002eb6:	4a92      	ldr	r2, [pc, #584]	; (8003100 <HAL_GPIO_Init+0x2b0>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d046      	beq.n	8002f4a <HAL_GPIO_Init+0xfa>
 8002ebc:	4a90      	ldr	r2, [pc, #576]	; (8003100 <HAL_GPIO_Init+0x2b0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d85d      	bhi.n	8002f7e <HAL_GPIO_Init+0x12e>
 8002ec2:	2b12      	cmp	r3, #18
 8002ec4:	d82a      	bhi.n	8002f1c <HAL_GPIO_Init+0xcc>
 8002ec6:	2b12      	cmp	r3, #18
 8002ec8:	d859      	bhi.n	8002f7e <HAL_GPIO_Init+0x12e>
 8002eca:	a201      	add	r2, pc, #4	; (adr r2, 8002ed0 <HAL_GPIO_Init+0x80>)
 8002ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed0:	08002f4b 	.word	0x08002f4b
 8002ed4:	08002f25 	.word	0x08002f25
 8002ed8:	08002f37 	.word	0x08002f37
 8002edc:	08002f79 	.word	0x08002f79
 8002ee0:	08002f7f 	.word	0x08002f7f
 8002ee4:	08002f7f 	.word	0x08002f7f
 8002ee8:	08002f7f 	.word	0x08002f7f
 8002eec:	08002f7f 	.word	0x08002f7f
 8002ef0:	08002f7f 	.word	0x08002f7f
 8002ef4:	08002f7f 	.word	0x08002f7f
 8002ef8:	08002f7f 	.word	0x08002f7f
 8002efc:	08002f7f 	.word	0x08002f7f
 8002f00:	08002f7f 	.word	0x08002f7f
 8002f04:	08002f7f 	.word	0x08002f7f
 8002f08:	08002f7f 	.word	0x08002f7f
 8002f0c:	08002f7f 	.word	0x08002f7f
 8002f10:	08002f7f 	.word	0x08002f7f
 8002f14:	08002f2d 	.word	0x08002f2d
 8002f18:	08002f41 	.word	0x08002f41
 8002f1c:	4a79      	ldr	r2, [pc, #484]	; (8003104 <HAL_GPIO_Init+0x2b4>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d013      	beq.n	8002f4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f22:	e02c      	b.n	8002f7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	623b      	str	r3, [r7, #32]
          break;
 8002f2a:	e029      	b.n	8002f80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	3304      	adds	r3, #4
 8002f32:	623b      	str	r3, [r7, #32]
          break;
 8002f34:	e024      	b.n	8002f80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	3308      	adds	r3, #8
 8002f3c:	623b      	str	r3, [r7, #32]
          break;
 8002f3e:	e01f      	b.n	8002f80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	330c      	adds	r3, #12
 8002f46:	623b      	str	r3, [r7, #32]
          break;
 8002f48:	e01a      	b.n	8002f80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d102      	bne.n	8002f58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f52:	2304      	movs	r3, #4
 8002f54:	623b      	str	r3, [r7, #32]
          break;
 8002f56:	e013      	b.n	8002f80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d105      	bne.n	8002f6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f60:	2308      	movs	r3, #8
 8002f62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69fa      	ldr	r2, [r7, #28]
 8002f68:	611a      	str	r2, [r3, #16]
          break;
 8002f6a:	e009      	b.n	8002f80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f6c:	2308      	movs	r3, #8
 8002f6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69fa      	ldr	r2, [r7, #28]
 8002f74:	615a      	str	r2, [r3, #20]
          break;
 8002f76:	e003      	b.n	8002f80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	623b      	str	r3, [r7, #32]
          break;
 8002f7c:	e000      	b.n	8002f80 <HAL_GPIO_Init+0x130>
          break;
 8002f7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	2bff      	cmp	r3, #255	; 0xff
 8002f84:	d801      	bhi.n	8002f8a <HAL_GPIO_Init+0x13a>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	e001      	b.n	8002f8e <HAL_GPIO_Init+0x13e>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	2bff      	cmp	r3, #255	; 0xff
 8002f94:	d802      	bhi.n	8002f9c <HAL_GPIO_Init+0x14c>
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	e002      	b.n	8002fa2 <HAL_GPIO_Init+0x152>
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	3b08      	subs	r3, #8
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	210f      	movs	r1, #15
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	401a      	ands	r2, r3
 8002fb4:	6a39      	ldr	r1, [r7, #32]
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 80b1 	beq.w	8003132 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fd0:	4b4d      	ldr	r3, [pc, #308]	; (8003108 <HAL_GPIO_Init+0x2b8>)
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	4a4c      	ldr	r2, [pc, #304]	; (8003108 <HAL_GPIO_Init+0x2b8>)
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	6193      	str	r3, [r2, #24]
 8002fdc:	4b4a      	ldr	r3, [pc, #296]	; (8003108 <HAL_GPIO_Init+0x2b8>)
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002fe8:	4a48      	ldr	r2, [pc, #288]	; (800310c <HAL_GPIO_Init+0x2bc>)
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	089b      	lsrs	r3, r3, #2
 8002fee:	3302      	adds	r3, #2
 8002ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	220f      	movs	r2, #15
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	4013      	ands	r3, r2
 800300a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a40      	ldr	r2, [pc, #256]	; (8003110 <HAL_GPIO_Init+0x2c0>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d013      	beq.n	800303c <HAL_GPIO_Init+0x1ec>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a3f      	ldr	r2, [pc, #252]	; (8003114 <HAL_GPIO_Init+0x2c4>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d00d      	beq.n	8003038 <HAL_GPIO_Init+0x1e8>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a3e      	ldr	r2, [pc, #248]	; (8003118 <HAL_GPIO_Init+0x2c8>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d007      	beq.n	8003034 <HAL_GPIO_Init+0x1e4>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a3d      	ldr	r2, [pc, #244]	; (800311c <HAL_GPIO_Init+0x2cc>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d101      	bne.n	8003030 <HAL_GPIO_Init+0x1e0>
 800302c:	2303      	movs	r3, #3
 800302e:	e006      	b.n	800303e <HAL_GPIO_Init+0x1ee>
 8003030:	2304      	movs	r3, #4
 8003032:	e004      	b.n	800303e <HAL_GPIO_Init+0x1ee>
 8003034:	2302      	movs	r3, #2
 8003036:	e002      	b.n	800303e <HAL_GPIO_Init+0x1ee>
 8003038:	2301      	movs	r3, #1
 800303a:	e000      	b.n	800303e <HAL_GPIO_Init+0x1ee>
 800303c:	2300      	movs	r3, #0
 800303e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003040:	f002 0203 	and.w	r2, r2, #3
 8003044:	0092      	lsls	r2, r2, #2
 8003046:	4093      	lsls	r3, r2
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	4313      	orrs	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800304e:	492f      	ldr	r1, [pc, #188]	; (800310c <HAL_GPIO_Init+0x2bc>)
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	089b      	lsrs	r3, r3, #2
 8003054:	3302      	adds	r3, #2
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d006      	beq.n	8003076 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003068:	4b2d      	ldr	r3, [pc, #180]	; (8003120 <HAL_GPIO_Init+0x2d0>)
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	492c      	ldr	r1, [pc, #176]	; (8003120 <HAL_GPIO_Init+0x2d0>)
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	4313      	orrs	r3, r2
 8003072:	608b      	str	r3, [r1, #8]
 8003074:	e006      	b.n	8003084 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003076:	4b2a      	ldr	r3, [pc, #168]	; (8003120 <HAL_GPIO_Init+0x2d0>)
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	43db      	mvns	r3, r3
 800307e:	4928      	ldr	r1, [pc, #160]	; (8003120 <HAL_GPIO_Init+0x2d0>)
 8003080:	4013      	ands	r3, r2
 8003082:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d006      	beq.n	800309e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003090:	4b23      	ldr	r3, [pc, #140]	; (8003120 <HAL_GPIO_Init+0x2d0>)
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	4922      	ldr	r1, [pc, #136]	; (8003120 <HAL_GPIO_Init+0x2d0>)
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	4313      	orrs	r3, r2
 800309a:	60cb      	str	r3, [r1, #12]
 800309c:	e006      	b.n	80030ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800309e:	4b20      	ldr	r3, [pc, #128]	; (8003120 <HAL_GPIO_Init+0x2d0>)
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	43db      	mvns	r3, r3
 80030a6:	491e      	ldr	r1, [pc, #120]	; (8003120 <HAL_GPIO_Init+0x2d0>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d006      	beq.n	80030c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030b8:	4b19      	ldr	r3, [pc, #100]	; (8003120 <HAL_GPIO_Init+0x2d0>)
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	4918      	ldr	r1, [pc, #96]	; (8003120 <HAL_GPIO_Init+0x2d0>)
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	604b      	str	r3, [r1, #4]
 80030c4:	e006      	b.n	80030d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030c6:	4b16      	ldr	r3, [pc, #88]	; (8003120 <HAL_GPIO_Init+0x2d0>)
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	43db      	mvns	r3, r3
 80030ce:	4914      	ldr	r1, [pc, #80]	; (8003120 <HAL_GPIO_Init+0x2d0>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d021      	beq.n	8003124 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030e0:	4b0f      	ldr	r3, [pc, #60]	; (8003120 <HAL_GPIO_Init+0x2d0>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	490e      	ldr	r1, [pc, #56]	; (8003120 <HAL_GPIO_Init+0x2d0>)
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	600b      	str	r3, [r1, #0]
 80030ec:	e021      	b.n	8003132 <HAL_GPIO_Init+0x2e2>
 80030ee:	bf00      	nop
 80030f0:	10320000 	.word	0x10320000
 80030f4:	10310000 	.word	0x10310000
 80030f8:	10220000 	.word	0x10220000
 80030fc:	10210000 	.word	0x10210000
 8003100:	10120000 	.word	0x10120000
 8003104:	10110000 	.word	0x10110000
 8003108:	40021000 	.word	0x40021000
 800310c:	40010000 	.word	0x40010000
 8003110:	40010800 	.word	0x40010800
 8003114:	40010c00 	.word	0x40010c00
 8003118:	40011000 	.word	0x40011000
 800311c:	40011400 	.word	0x40011400
 8003120:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003124:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <HAL_GPIO_Init+0x304>)
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	43db      	mvns	r3, r3
 800312c:	4909      	ldr	r1, [pc, #36]	; (8003154 <HAL_GPIO_Init+0x304>)
 800312e:	4013      	ands	r3, r2
 8003130:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	3301      	adds	r3, #1
 8003136:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	fa22 f303 	lsr.w	r3, r2, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	f47f ae8e 	bne.w	8002e64 <HAL_GPIO_Init+0x14>
  }
}
 8003148:	bf00      	nop
 800314a:	bf00      	nop
 800314c:	372c      	adds	r7, #44	; 0x2c
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr
 8003154:	40010400 	.word	0x40010400

08003158 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	887b      	ldrh	r3, [r7, #2]
 800316a:	4013      	ands	r3, r2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d002      	beq.n	8003176 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003170:	2301      	movs	r3, #1
 8003172:	73fb      	strb	r3, [r7, #15]
 8003174:	e001      	b.n	800317a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003176:	2300      	movs	r3, #0
 8003178:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800317a:	7bfb      	ldrb	r3, [r7, #15]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	bc80      	pop	{r7}
 8003184:	4770      	bx	lr

08003186 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	460b      	mov	r3, r1
 8003190:	807b      	strh	r3, [r7, #2]
 8003192:	4613      	mov	r3, r2
 8003194:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003196:	787b      	ldrb	r3, [r7, #1]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800319c:	887a      	ldrh	r2, [r7, #2]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80031a2:	e003      	b.n	80031ac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031a4:	887b      	ldrh	r3, [r7, #2]
 80031a6:	041a      	lsls	r2, r3, #16
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	611a      	str	r2, [r3, #16]
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bc80      	pop	{r7}
 80031b4:	4770      	bx	lr

080031b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b085      	sub	sp, #20
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	460b      	mov	r3, r1
 80031c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031c8:	887a      	ldrh	r2, [r7, #2]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4013      	ands	r3, r2
 80031ce:	041a      	lsls	r2, r3, #16
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	43d9      	mvns	r1, r3
 80031d4:	887b      	ldrh	r3, [r7, #2]
 80031d6:	400b      	ands	r3, r1
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	611a      	str	r2, [r3, #16]
}
 80031de:	bf00      	nop
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr

080031e8 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	460b      	mov	r3, r1
 80031f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80031f4:	4b09      	ldr	r3, [pc, #36]	; (800321c <HAL_PWR_EnterSLEEPMode+0x34>)
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	4a08      	ldr	r2, [pc, #32]	; (800321c <HAL_PWR_EnterSLEEPMode+0x34>)
 80031fa:	f023 0304 	bic.w	r3, r3, #4
 80031fe:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d101      	bne.n	800320a <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003206:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8003208:	e002      	b.n	8003210 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 800320a:	bf40      	sev
    __WFE();
 800320c:	bf20      	wfe
    __WFE();
 800320e:	bf20      	wfe
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	e000ed00 	.word	0xe000ed00

08003220 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e272      	b.n	8003718 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 8087 	beq.w	800334e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003240:	4b92      	ldr	r3, [pc, #584]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 030c 	and.w	r3, r3, #12
 8003248:	2b04      	cmp	r3, #4
 800324a:	d00c      	beq.n	8003266 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800324c:	4b8f      	ldr	r3, [pc, #572]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f003 030c 	and.w	r3, r3, #12
 8003254:	2b08      	cmp	r3, #8
 8003256:	d112      	bne.n	800327e <HAL_RCC_OscConfig+0x5e>
 8003258:	4b8c      	ldr	r3, [pc, #560]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003264:	d10b      	bne.n	800327e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003266:	4b89      	ldr	r3, [pc, #548]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d06c      	beq.n	800334c <HAL_RCC_OscConfig+0x12c>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d168      	bne.n	800334c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e24c      	b.n	8003718 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003286:	d106      	bne.n	8003296 <HAL_RCC_OscConfig+0x76>
 8003288:	4b80      	ldr	r3, [pc, #512]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a7f      	ldr	r2, [pc, #508]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 800328e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	e02e      	b.n	80032f4 <HAL_RCC_OscConfig+0xd4>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10c      	bne.n	80032b8 <HAL_RCC_OscConfig+0x98>
 800329e:	4b7b      	ldr	r3, [pc, #492]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a7a      	ldr	r2, [pc, #488]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	4b78      	ldr	r3, [pc, #480]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a77      	ldr	r2, [pc, #476]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	e01d      	b.n	80032f4 <HAL_RCC_OscConfig+0xd4>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032c0:	d10c      	bne.n	80032dc <HAL_RCC_OscConfig+0xbc>
 80032c2:	4b72      	ldr	r3, [pc, #456]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a71      	ldr	r2, [pc, #452]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	4b6f      	ldr	r3, [pc, #444]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a6e      	ldr	r2, [pc, #440]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	e00b      	b.n	80032f4 <HAL_RCC_OscConfig+0xd4>
 80032dc:	4b6b      	ldr	r3, [pc, #428]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a6a      	ldr	r2, [pc, #424]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e6:	6013      	str	r3, [r2, #0]
 80032e8:	4b68      	ldr	r3, [pc, #416]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a67      	ldr	r2, [pc, #412]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d013      	beq.n	8003324 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fc:	f7ff fc90 	bl	8002c20 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003304:	f7ff fc8c 	bl	8002c20 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b64      	cmp	r3, #100	; 0x64
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e200      	b.n	8003718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003316:	4b5d      	ldr	r3, [pc, #372]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f0      	beq.n	8003304 <HAL_RCC_OscConfig+0xe4>
 8003322:	e014      	b.n	800334e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003324:	f7ff fc7c 	bl	8002c20 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800332c:	f7ff fc78 	bl	8002c20 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b64      	cmp	r3, #100	; 0x64
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e1ec      	b.n	8003718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800333e:	4b53      	ldr	r3, [pc, #332]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f0      	bne.n	800332c <HAL_RCC_OscConfig+0x10c>
 800334a:	e000      	b.n	800334e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800334c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d063      	beq.n	8003422 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800335a:	4b4c      	ldr	r3, [pc, #304]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f003 030c 	and.w	r3, r3, #12
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00b      	beq.n	800337e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003366:	4b49      	ldr	r3, [pc, #292]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	2b08      	cmp	r3, #8
 8003370:	d11c      	bne.n	80033ac <HAL_RCC_OscConfig+0x18c>
 8003372:	4b46      	ldr	r3, [pc, #280]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d116      	bne.n	80033ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800337e:	4b43      	ldr	r3, [pc, #268]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d005      	beq.n	8003396 <HAL_RCC_OscConfig+0x176>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d001      	beq.n	8003396 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e1c0      	b.n	8003718 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003396:	4b3d      	ldr	r3, [pc, #244]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	4939      	ldr	r1, [pc, #228]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033aa:	e03a      	b.n	8003422 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d020      	beq.n	80033f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033b4:	4b36      	ldr	r3, [pc, #216]	; (8003490 <HAL_RCC_OscConfig+0x270>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ba:	f7ff fc31 	bl	8002c20 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c2:	f7ff fc2d 	bl	8002c20 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e1a1      	b.n	8003718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d4:	4b2d      	ldr	r3, [pc, #180]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0f0      	beq.n	80033c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e0:	4b2a      	ldr	r3, [pc, #168]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	4927      	ldr	r1, [pc, #156]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	600b      	str	r3, [r1, #0]
 80033f4:	e015      	b.n	8003422 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033f6:	4b26      	ldr	r3, [pc, #152]	; (8003490 <HAL_RCC_OscConfig+0x270>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fc:	f7ff fc10 	bl	8002c20 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003404:	f7ff fc0c 	bl	8002c20 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e180      	b.n	8003718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003416:	4b1d      	ldr	r3, [pc, #116]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1f0      	bne.n	8003404 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b00      	cmp	r3, #0
 800342c:	d03a      	beq.n	80034a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d019      	beq.n	800346a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003436:	4b17      	ldr	r3, [pc, #92]	; (8003494 <HAL_RCC_OscConfig+0x274>)
 8003438:	2201      	movs	r2, #1
 800343a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800343c:	f7ff fbf0 	bl	8002c20 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003444:	f7ff fbec 	bl	8002c20 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e160      	b.n	8003718 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003456:	4b0d      	ldr	r3, [pc, #52]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0f0      	beq.n	8003444 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003462:	2001      	movs	r0, #1
 8003464:	f000 face 	bl	8003a04 <RCC_Delay>
 8003468:	e01c      	b.n	80034a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800346a:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <HAL_RCC_OscConfig+0x274>)
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003470:	f7ff fbd6 	bl	8002c20 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003476:	e00f      	b.n	8003498 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003478:	f7ff fbd2 	bl	8002c20 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d908      	bls.n	8003498 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e146      	b.n	8003718 <HAL_RCC_OscConfig+0x4f8>
 800348a:	bf00      	nop
 800348c:	40021000 	.word	0x40021000
 8003490:	42420000 	.word	0x42420000
 8003494:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003498:	4b92      	ldr	r3, [pc, #584]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1e9      	bne.n	8003478 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 80a6 	beq.w	80035fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034b2:	2300      	movs	r3, #0
 80034b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034b6:	4b8b      	ldr	r3, [pc, #556]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10d      	bne.n	80034de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c2:	4b88      	ldr	r3, [pc, #544]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	4a87      	ldr	r2, [pc, #540]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 80034c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034cc:	61d3      	str	r3, [r2, #28]
 80034ce:	4b85      	ldr	r3, [pc, #532]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d6:	60bb      	str	r3, [r7, #8]
 80034d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034da:	2301      	movs	r3, #1
 80034dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034de:	4b82      	ldr	r3, [pc, #520]	; (80036e8 <HAL_RCC_OscConfig+0x4c8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d118      	bne.n	800351c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ea:	4b7f      	ldr	r3, [pc, #508]	; (80036e8 <HAL_RCC_OscConfig+0x4c8>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a7e      	ldr	r2, [pc, #504]	; (80036e8 <HAL_RCC_OscConfig+0x4c8>)
 80034f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034f6:	f7ff fb93 	bl	8002c20 <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034fe:	f7ff fb8f 	bl	8002c20 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b64      	cmp	r3, #100	; 0x64
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e103      	b.n	8003718 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003510:	4b75      	ldr	r3, [pc, #468]	; (80036e8 <HAL_RCC_OscConfig+0x4c8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0f0      	beq.n	80034fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d106      	bne.n	8003532 <HAL_RCC_OscConfig+0x312>
 8003524:	4b6f      	ldr	r3, [pc, #444]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	4a6e      	ldr	r2, [pc, #440]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 800352a:	f043 0301 	orr.w	r3, r3, #1
 800352e:	6213      	str	r3, [r2, #32]
 8003530:	e02d      	b.n	800358e <HAL_RCC_OscConfig+0x36e>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10c      	bne.n	8003554 <HAL_RCC_OscConfig+0x334>
 800353a:	4b6a      	ldr	r3, [pc, #424]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	4a69      	ldr	r2, [pc, #420]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 8003540:	f023 0301 	bic.w	r3, r3, #1
 8003544:	6213      	str	r3, [r2, #32]
 8003546:	4b67      	ldr	r3, [pc, #412]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	4a66      	ldr	r2, [pc, #408]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 800354c:	f023 0304 	bic.w	r3, r3, #4
 8003550:	6213      	str	r3, [r2, #32]
 8003552:	e01c      	b.n	800358e <HAL_RCC_OscConfig+0x36e>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	2b05      	cmp	r3, #5
 800355a:	d10c      	bne.n	8003576 <HAL_RCC_OscConfig+0x356>
 800355c:	4b61      	ldr	r3, [pc, #388]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	4a60      	ldr	r2, [pc, #384]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 8003562:	f043 0304 	orr.w	r3, r3, #4
 8003566:	6213      	str	r3, [r2, #32]
 8003568:	4b5e      	ldr	r3, [pc, #376]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	4a5d      	ldr	r2, [pc, #372]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	6213      	str	r3, [r2, #32]
 8003574:	e00b      	b.n	800358e <HAL_RCC_OscConfig+0x36e>
 8003576:	4b5b      	ldr	r3, [pc, #364]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	4a5a      	ldr	r2, [pc, #360]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 800357c:	f023 0301 	bic.w	r3, r3, #1
 8003580:	6213      	str	r3, [r2, #32]
 8003582:	4b58      	ldr	r3, [pc, #352]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	4a57      	ldr	r2, [pc, #348]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 8003588:	f023 0304 	bic.w	r3, r3, #4
 800358c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d015      	beq.n	80035c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003596:	f7ff fb43 	bl	8002c20 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359c:	e00a      	b.n	80035b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800359e:	f7ff fb3f 	bl	8002c20 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e0b1      	b.n	8003718 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b4:	4b4b      	ldr	r3, [pc, #300]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0ee      	beq.n	800359e <HAL_RCC_OscConfig+0x37e>
 80035c0:	e014      	b.n	80035ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c2:	f7ff fb2d 	bl	8002c20 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c8:	e00a      	b.n	80035e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ca:	f7ff fb29 	bl	8002c20 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d8:	4293      	cmp	r3, r2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e09b      	b.n	8003718 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035e0:	4b40      	ldr	r3, [pc, #256]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1ee      	bne.n	80035ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035ec:	7dfb      	ldrb	r3, [r7, #23]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d105      	bne.n	80035fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f2:	4b3c      	ldr	r3, [pc, #240]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	4a3b      	ldr	r2, [pc, #236]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 80035f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 8087 	beq.w	8003716 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003608:	4b36      	ldr	r3, [pc, #216]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f003 030c 	and.w	r3, r3, #12
 8003610:	2b08      	cmp	r3, #8
 8003612:	d061      	beq.n	80036d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	2b02      	cmp	r3, #2
 800361a:	d146      	bne.n	80036aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800361c:	4b33      	ldr	r3, [pc, #204]	; (80036ec <HAL_RCC_OscConfig+0x4cc>)
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003622:	f7ff fafd 	bl	8002c20 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800362a:	f7ff faf9 	bl	8002c20 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e06d      	b.n	8003718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800363c:	4b29      	ldr	r3, [pc, #164]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1f0      	bne.n	800362a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003650:	d108      	bne.n	8003664 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003652:	4b24      	ldr	r3, [pc, #144]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	4921      	ldr	r1, [pc, #132]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 8003660:	4313      	orrs	r3, r2
 8003662:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003664:	4b1f      	ldr	r3, [pc, #124]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a19      	ldr	r1, [r3, #32]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	430b      	orrs	r3, r1
 8003676:	491b      	ldr	r1, [pc, #108]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 8003678:	4313      	orrs	r3, r2
 800367a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800367c:	4b1b      	ldr	r3, [pc, #108]	; (80036ec <HAL_RCC_OscConfig+0x4cc>)
 800367e:	2201      	movs	r2, #1
 8003680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003682:	f7ff facd 	bl	8002c20 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800368a:	f7ff fac9 	bl	8002c20 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e03d      	b.n	8003718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800369c:	4b11      	ldr	r3, [pc, #68]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0f0      	beq.n	800368a <HAL_RCC_OscConfig+0x46a>
 80036a8:	e035      	b.n	8003716 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036aa:	4b10      	ldr	r3, [pc, #64]	; (80036ec <HAL_RCC_OscConfig+0x4cc>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b0:	f7ff fab6 	bl	8002c20 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b8:	f7ff fab2 	bl	8002c20 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e026      	b.n	8003718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ca:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f0      	bne.n	80036b8 <HAL_RCC_OscConfig+0x498>
 80036d6:	e01e      	b.n	8003716 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d107      	bne.n	80036f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e019      	b.n	8003718 <HAL_RCC_OscConfig+0x4f8>
 80036e4:	40021000 	.word	0x40021000
 80036e8:	40007000 	.word	0x40007000
 80036ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036f0:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <HAL_RCC_OscConfig+0x500>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	429a      	cmp	r2, r3
 8003702:	d106      	bne.n	8003712 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800370e:	429a      	cmp	r2, r3
 8003710:	d001      	beq.n	8003716 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e000      	b.n	8003718 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40021000 	.word	0x40021000

08003724 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0d0      	b.n	80038da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003738:	4b6a      	ldr	r3, [pc, #424]	; (80038e4 <HAL_RCC_ClockConfig+0x1c0>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	429a      	cmp	r2, r3
 8003744:	d910      	bls.n	8003768 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003746:	4b67      	ldr	r3, [pc, #412]	; (80038e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f023 0207 	bic.w	r2, r3, #7
 800374e:	4965      	ldr	r1, [pc, #404]	; (80038e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	4313      	orrs	r3, r2
 8003754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003756:	4b63      	ldr	r3, [pc, #396]	; (80038e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d001      	beq.n	8003768 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0b8      	b.n	80038da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d020      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	d005      	beq.n	800378c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003780:	4b59      	ldr	r3, [pc, #356]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	4a58      	ldr	r2, [pc, #352]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003786:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800378a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0308 	and.w	r3, r3, #8
 8003794:	2b00      	cmp	r3, #0
 8003796:	d005      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003798:	4b53      	ldr	r3, [pc, #332]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	4a52      	ldr	r2, [pc, #328]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 800379e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a4:	4b50      	ldr	r3, [pc, #320]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	494d      	ldr	r1, [pc, #308]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d040      	beq.n	8003844 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d107      	bne.n	80037da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ca:	4b47      	ldr	r3, [pc, #284]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d115      	bne.n	8003802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e07f      	b.n	80038da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d107      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e2:	4b41      	ldr	r3, [pc, #260]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d109      	bne.n	8003802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e073      	b.n	80038da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f2:	4b3d      	ldr	r3, [pc, #244]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e06b      	b.n	80038da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003802:	4b39      	ldr	r3, [pc, #228]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f023 0203 	bic.w	r2, r3, #3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	4936      	ldr	r1, [pc, #216]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003810:	4313      	orrs	r3, r2
 8003812:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003814:	f7ff fa04 	bl	8002c20 <HAL_GetTick>
 8003818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381a:	e00a      	b.n	8003832 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800381c:	f7ff fa00 	bl	8002c20 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	f241 3288 	movw	r2, #5000	; 0x1388
 800382a:	4293      	cmp	r3, r2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e053      	b.n	80038da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003832:	4b2d      	ldr	r3, [pc, #180]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f003 020c 	and.w	r2, r3, #12
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	429a      	cmp	r2, r3
 8003842:	d1eb      	bne.n	800381c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003844:	4b27      	ldr	r3, [pc, #156]	; (80038e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d210      	bcs.n	8003874 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003852:	4b24      	ldr	r3, [pc, #144]	; (80038e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f023 0207 	bic.w	r2, r3, #7
 800385a:	4922      	ldr	r1, [pc, #136]	; (80038e4 <HAL_RCC_ClockConfig+0x1c0>)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	4313      	orrs	r3, r2
 8003860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003862:	4b20      	ldr	r3, [pc, #128]	; (80038e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d001      	beq.n	8003874 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e032      	b.n	80038da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	d008      	beq.n	8003892 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003880:	4b19      	ldr	r3, [pc, #100]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	4916      	ldr	r1, [pc, #88]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 800388e:	4313      	orrs	r3, r2
 8003890:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0308 	and.w	r3, r3, #8
 800389a:	2b00      	cmp	r3, #0
 800389c:	d009      	beq.n	80038b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800389e:	4b12      	ldr	r3, [pc, #72]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	490e      	ldr	r1, [pc, #56]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038b2:	f000 f821 	bl	80038f8 <HAL_RCC_GetSysClockFreq>
 80038b6:	4602      	mov	r2, r0
 80038b8:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	091b      	lsrs	r3, r3, #4
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	490a      	ldr	r1, [pc, #40]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 80038c4:	5ccb      	ldrb	r3, [r1, r3]
 80038c6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ca:	4a09      	ldr	r2, [pc, #36]	; (80038f0 <HAL_RCC_ClockConfig+0x1cc>)
 80038cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038ce:	4b09      	ldr	r3, [pc, #36]	; (80038f4 <HAL_RCC_ClockConfig+0x1d0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff f962 	bl	8002b9c <HAL_InitTick>

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40022000 	.word	0x40022000
 80038e8:	40021000 	.word	0x40021000
 80038ec:	080058f4 	.word	0x080058f4
 80038f0:	200000a0 	.word	0x200000a0
 80038f4:	200000a4 	.word	0x200000a4

080038f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b087      	sub	sp, #28
 80038fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	2300      	movs	r3, #0
 8003904:	60bb      	str	r3, [r7, #8]
 8003906:	2300      	movs	r3, #0
 8003908:	617b      	str	r3, [r7, #20]
 800390a:	2300      	movs	r3, #0
 800390c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003912:	4b1e      	ldr	r3, [pc, #120]	; (800398c <HAL_RCC_GetSysClockFreq+0x94>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f003 030c 	and.w	r3, r3, #12
 800391e:	2b04      	cmp	r3, #4
 8003920:	d002      	beq.n	8003928 <HAL_RCC_GetSysClockFreq+0x30>
 8003922:	2b08      	cmp	r3, #8
 8003924:	d003      	beq.n	800392e <HAL_RCC_GetSysClockFreq+0x36>
 8003926:	e027      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003928:	4b19      	ldr	r3, [pc, #100]	; (8003990 <HAL_RCC_GetSysClockFreq+0x98>)
 800392a:	613b      	str	r3, [r7, #16]
      break;
 800392c:	e027      	b.n	800397e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	0c9b      	lsrs	r3, r3, #18
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	4a17      	ldr	r2, [pc, #92]	; (8003994 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003938:	5cd3      	ldrb	r3, [r2, r3]
 800393a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d010      	beq.n	8003968 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003946:	4b11      	ldr	r3, [pc, #68]	; (800398c <HAL_RCC_GetSysClockFreq+0x94>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	0c5b      	lsrs	r3, r3, #17
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	4a11      	ldr	r2, [pc, #68]	; (8003998 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003952:	5cd3      	ldrb	r3, [r2, r3]
 8003954:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a0d      	ldr	r2, [pc, #52]	; (8003990 <HAL_RCC_GetSysClockFreq+0x98>)
 800395a:	fb03 f202 	mul.w	r2, r3, r2
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	fbb2 f3f3 	udiv	r3, r2, r3
 8003964:	617b      	str	r3, [r7, #20]
 8003966:	e004      	b.n	8003972 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a0c      	ldr	r2, [pc, #48]	; (800399c <HAL_RCC_GetSysClockFreq+0xa4>)
 800396c:	fb02 f303 	mul.w	r3, r2, r3
 8003970:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	613b      	str	r3, [r7, #16]
      break;
 8003976:	e002      	b.n	800397e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003978:	4b05      	ldr	r3, [pc, #20]	; (8003990 <HAL_RCC_GetSysClockFreq+0x98>)
 800397a:	613b      	str	r3, [r7, #16]
      break;
 800397c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800397e:	693b      	ldr	r3, [r7, #16]
}
 8003980:	4618      	mov	r0, r3
 8003982:	371c      	adds	r7, #28
 8003984:	46bd      	mov	sp, r7
 8003986:	bc80      	pop	{r7}
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40021000 	.word	0x40021000
 8003990:	007a1200 	.word	0x007a1200
 8003994:	0800590c 	.word	0x0800590c
 8003998:	0800591c 	.word	0x0800591c
 800399c:	003d0900 	.word	0x003d0900

080039a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039a4:	4b02      	ldr	r3, [pc, #8]	; (80039b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80039a6:	681b      	ldr	r3, [r3, #0]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bc80      	pop	{r7}
 80039ae:	4770      	bx	lr
 80039b0:	200000a0 	.word	0x200000a0

080039b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039b8:	f7ff fff2 	bl	80039a0 <HAL_RCC_GetHCLKFreq>
 80039bc:	4602      	mov	r2, r0
 80039be:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	0a1b      	lsrs	r3, r3, #8
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	4903      	ldr	r1, [pc, #12]	; (80039d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ca:	5ccb      	ldrb	r3, [r1, r3]
 80039cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40021000 	.word	0x40021000
 80039d8:	08005904 	.word	0x08005904

080039dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039e0:	f7ff ffde 	bl	80039a0 <HAL_RCC_GetHCLKFreq>
 80039e4:	4602      	mov	r2, r0
 80039e6:	4b05      	ldr	r3, [pc, #20]	; (80039fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	0adb      	lsrs	r3, r3, #11
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	4903      	ldr	r1, [pc, #12]	; (8003a00 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039f2:	5ccb      	ldrb	r3, [r1, r3]
 80039f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40021000 	.word	0x40021000
 8003a00:	08005904 	.word	0x08005904

08003a04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a0c:	4b0a      	ldr	r3, [pc, #40]	; (8003a38 <RCC_Delay+0x34>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a0a      	ldr	r2, [pc, #40]	; (8003a3c <RCC_Delay+0x38>)
 8003a12:	fba2 2303 	umull	r2, r3, r2, r3
 8003a16:	0a5b      	lsrs	r3, r3, #9
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	fb02 f303 	mul.w	r3, r2, r3
 8003a1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a20:	bf00      	nop
  }
  while (Delay --);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1e5a      	subs	r2, r3, #1
 8003a26:	60fa      	str	r2, [r7, #12]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1f9      	bne.n	8003a20 <RCC_Delay+0x1c>
}
 8003a2c:	bf00      	nop
 8003a2e:	bf00      	nop
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr
 8003a38:	200000a0 	.word	0x200000a0
 8003a3c:	10624dd3 	.word	0x10624dd3

08003a40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e041      	b.n	8003ad6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d106      	bne.n	8003a6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7fe ff30 	bl	80028cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4610      	mov	r0, r2
 8003a80:	f000 fc28 	bl	80042d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
	...

08003ae0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d001      	beq.n	8003af8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e03a      	b.n	8003b6e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a18      	ldr	r2, [pc, #96]	; (8003b78 <HAL_TIM_Base_Start_IT+0x98>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00e      	beq.n	8003b38 <HAL_TIM_Base_Start_IT+0x58>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b22:	d009      	beq.n	8003b38 <HAL_TIM_Base_Start_IT+0x58>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a14      	ldr	r2, [pc, #80]	; (8003b7c <HAL_TIM_Base_Start_IT+0x9c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d004      	beq.n	8003b38 <HAL_TIM_Base_Start_IT+0x58>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a13      	ldr	r2, [pc, #76]	; (8003b80 <HAL_TIM_Base_Start_IT+0xa0>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d111      	bne.n	8003b5c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b06      	cmp	r3, #6
 8003b48:	d010      	beq.n	8003b6c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f042 0201 	orr.w	r2, r2, #1
 8003b58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b5a:	e007      	b.n	8003b6c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0201 	orr.w	r2, r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr
 8003b78:	40012c00 	.word	0x40012c00
 8003b7c:	40000400 	.word	0x40000400
 8003b80:	40000800 	.word	0x40000800

08003b84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e041      	b.n	8003c1a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d106      	bne.n	8003bb0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7fe feb2 	bl	8002914 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3304      	adds	r3, #4
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	f000 fb86 	bl	80042d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
	...

08003c24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d109      	bne.n	8003c48 <HAL_TIM_PWM_Start+0x24>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	bf14      	ite	ne
 8003c40:	2301      	movne	r3, #1
 8003c42:	2300      	moveq	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	e022      	b.n	8003c8e <HAL_TIM_PWM_Start+0x6a>
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d109      	bne.n	8003c62 <HAL_TIM_PWM_Start+0x3e>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	bf14      	ite	ne
 8003c5a:	2301      	movne	r3, #1
 8003c5c:	2300      	moveq	r3, #0
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	e015      	b.n	8003c8e <HAL_TIM_PWM_Start+0x6a>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d109      	bne.n	8003c7c <HAL_TIM_PWM_Start+0x58>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	bf14      	ite	ne
 8003c74:	2301      	movne	r3, #1
 8003c76:	2300      	moveq	r3, #0
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	e008      	b.n	8003c8e <HAL_TIM_PWM_Start+0x6a>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	bf14      	ite	ne
 8003c88:	2301      	movne	r3, #1
 8003c8a:	2300      	moveq	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e05e      	b.n	8003d54 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d104      	bne.n	8003ca6 <HAL_TIM_PWM_Start+0x82>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ca4:	e013      	b.n	8003cce <HAL_TIM_PWM_Start+0xaa>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	2b04      	cmp	r3, #4
 8003caa:	d104      	bne.n	8003cb6 <HAL_TIM_PWM_Start+0x92>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cb4:	e00b      	b.n	8003cce <HAL_TIM_PWM_Start+0xaa>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d104      	bne.n	8003cc6 <HAL_TIM_PWM_Start+0xa2>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cc4:	e003      	b.n	8003cce <HAL_TIM_PWM_Start+0xaa>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2202      	movs	r2, #2
 8003cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	6839      	ldr	r1, [r7, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 fd7c 	bl	80047d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a1e      	ldr	r2, [pc, #120]	; (8003d5c <HAL_TIM_PWM_Start+0x138>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d107      	bne.n	8003cf6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cf4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a18      	ldr	r2, [pc, #96]	; (8003d5c <HAL_TIM_PWM_Start+0x138>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d00e      	beq.n	8003d1e <HAL_TIM_PWM_Start+0xfa>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d08:	d009      	beq.n	8003d1e <HAL_TIM_PWM_Start+0xfa>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a14      	ldr	r2, [pc, #80]	; (8003d60 <HAL_TIM_PWM_Start+0x13c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d004      	beq.n	8003d1e <HAL_TIM_PWM_Start+0xfa>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a12      	ldr	r2, [pc, #72]	; (8003d64 <HAL_TIM_PWM_Start+0x140>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d111      	bne.n	8003d42 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2b06      	cmp	r3, #6
 8003d2e:	d010      	beq.n	8003d52 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0201 	orr.w	r2, r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d40:	e007      	b.n	8003d52 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f042 0201 	orr.w	r2, r2, #1
 8003d50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40012c00 	.word	0x40012c00
 8003d60:	40000400 	.word	0x40000400
 8003d64:	40000800 	.word	0x40000800

08003d68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d122      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d11b      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f06f 0202 	mvn.w	r2, #2
 8003d94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 fa76 	bl	800429c <HAL_TIM_IC_CaptureCallback>
 8003db0:	e005      	b.n	8003dbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 fa69 	bl	800428a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 fa78 	bl	80042ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d122      	bne.n	8003e18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b04      	cmp	r3, #4
 8003dde:	d11b      	bne.n	8003e18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f06f 0204 	mvn.w	r2, #4
 8003de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2202      	movs	r2, #2
 8003dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fa4c 	bl	800429c <HAL_TIM_IC_CaptureCallback>
 8003e04:	e005      	b.n	8003e12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 fa3f 	bl	800428a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 fa4e 	bl	80042ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	d122      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f003 0308 	and.w	r3, r3, #8
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d11b      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f06f 0208 	mvn.w	r2, #8
 8003e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2204      	movs	r2, #4
 8003e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fa22 	bl	800429c <HAL_TIM_IC_CaptureCallback>
 8003e58:	e005      	b.n	8003e66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 fa15 	bl	800428a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 fa24 	bl	80042ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f003 0310 	and.w	r3, r3, #16
 8003e76:	2b10      	cmp	r3, #16
 8003e78:	d122      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f003 0310 	and.w	r3, r3, #16
 8003e84:	2b10      	cmp	r3, #16
 8003e86:	d11b      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f06f 0210 	mvn.w	r2, #16
 8003e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2208      	movs	r2, #8
 8003e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f9f8 	bl	800429c <HAL_TIM_IC_CaptureCallback>
 8003eac:	e005      	b.n	8003eba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f9eb 	bl	800428a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f9fa 	bl	80042ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d10e      	bne.n	8003eec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d107      	bne.n	8003eec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f06f 0201 	mvn.w	r2, #1
 8003ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7fe f9a2 	bl	8002230 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef6:	2b80      	cmp	r3, #128	; 0x80
 8003ef8:	d10e      	bne.n	8003f18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f04:	2b80      	cmp	r3, #128	; 0x80
 8003f06:	d107      	bne.n	8003f18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 fce9 	bl	80048ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f22:	2b40      	cmp	r3, #64	; 0x40
 8003f24:	d10e      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f30:	2b40      	cmp	r3, #64	; 0x40
 8003f32:	d107      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f9be 	bl	80042c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f003 0320 	and.w	r3, r3, #32
 8003f4e:	2b20      	cmp	r3, #32
 8003f50:	d10e      	bne.n	8003f70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f003 0320 	and.w	r3, r3, #32
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	d107      	bne.n	8003f70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f06f 0220 	mvn.w	r2, #32
 8003f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 fcb4 	bl	80048d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f70:	bf00      	nop
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f84:	2300      	movs	r3, #0
 8003f86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d101      	bne.n	8003f96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f92:	2302      	movs	r3, #2
 8003f94:	e0ae      	b.n	80040f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b0c      	cmp	r3, #12
 8003fa2:	f200 809f 	bhi.w	80040e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003fa6:	a201      	add	r2, pc, #4	; (adr r2, 8003fac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fac:	08003fe1 	.word	0x08003fe1
 8003fb0:	080040e5 	.word	0x080040e5
 8003fb4:	080040e5 	.word	0x080040e5
 8003fb8:	080040e5 	.word	0x080040e5
 8003fbc:	08004021 	.word	0x08004021
 8003fc0:	080040e5 	.word	0x080040e5
 8003fc4:	080040e5 	.word	0x080040e5
 8003fc8:	080040e5 	.word	0x080040e5
 8003fcc:	08004063 	.word	0x08004063
 8003fd0:	080040e5 	.word	0x080040e5
 8003fd4:	080040e5 	.word	0x080040e5
 8003fd8:	080040e5 	.word	0x080040e5
 8003fdc:	080040a3 	.word	0x080040a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68b9      	ldr	r1, [r7, #8]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 f9d6 	bl	8004398 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	699a      	ldr	r2, [r3, #24]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0208 	orr.w	r2, r2, #8
 8003ffa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699a      	ldr	r2, [r3, #24]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0204 	bic.w	r2, r2, #4
 800400a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6999      	ldr	r1, [r3, #24]
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	691a      	ldr	r2, [r3, #16]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	619a      	str	r2, [r3, #24]
      break;
 800401e:	e064      	b.n	80040ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68b9      	ldr	r1, [r7, #8]
 8004026:	4618      	mov	r0, r3
 8004028:	f000 fa1c 	bl	8004464 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699a      	ldr	r2, [r3, #24]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800403a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	699a      	ldr	r2, [r3, #24]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800404a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6999      	ldr	r1, [r3, #24]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	021a      	lsls	r2, r3, #8
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	430a      	orrs	r2, r1
 800405e:	619a      	str	r2, [r3, #24]
      break;
 8004060:	e043      	b.n	80040ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68b9      	ldr	r1, [r7, #8]
 8004068:	4618      	mov	r0, r3
 800406a:	f000 fa65 	bl	8004538 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	69da      	ldr	r2, [r3, #28]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f042 0208 	orr.w	r2, r2, #8
 800407c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	69da      	ldr	r2, [r3, #28]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0204 	bic.w	r2, r2, #4
 800408c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	69d9      	ldr	r1, [r3, #28]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	691a      	ldr	r2, [r3, #16]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	430a      	orrs	r2, r1
 800409e:	61da      	str	r2, [r3, #28]
      break;
 80040a0:	e023      	b.n	80040ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68b9      	ldr	r1, [r7, #8]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 faaf 	bl	800460c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	69da      	ldr	r2, [r3, #28]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	69da      	ldr	r2, [r3, #28]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69d9      	ldr	r1, [r3, #28]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	021a      	lsls	r2, r3, #8
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	61da      	str	r2, [r3, #28]
      break;
 80040e2:	e002      	b.n	80040ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	75fb      	strb	r3, [r7, #23]
      break;
 80040e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3718      	adds	r7, #24
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004110:	2b01      	cmp	r3, #1
 8004112:	d101      	bne.n	8004118 <HAL_TIM_ConfigClockSource+0x1c>
 8004114:	2302      	movs	r3, #2
 8004116:	e0b4      	b.n	8004282 <HAL_TIM_ConfigClockSource+0x186>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004136:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800413e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004150:	d03e      	beq.n	80041d0 <HAL_TIM_ConfigClockSource+0xd4>
 8004152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004156:	f200 8087 	bhi.w	8004268 <HAL_TIM_ConfigClockSource+0x16c>
 800415a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800415e:	f000 8086 	beq.w	800426e <HAL_TIM_ConfigClockSource+0x172>
 8004162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004166:	d87f      	bhi.n	8004268 <HAL_TIM_ConfigClockSource+0x16c>
 8004168:	2b70      	cmp	r3, #112	; 0x70
 800416a:	d01a      	beq.n	80041a2 <HAL_TIM_ConfigClockSource+0xa6>
 800416c:	2b70      	cmp	r3, #112	; 0x70
 800416e:	d87b      	bhi.n	8004268 <HAL_TIM_ConfigClockSource+0x16c>
 8004170:	2b60      	cmp	r3, #96	; 0x60
 8004172:	d050      	beq.n	8004216 <HAL_TIM_ConfigClockSource+0x11a>
 8004174:	2b60      	cmp	r3, #96	; 0x60
 8004176:	d877      	bhi.n	8004268 <HAL_TIM_ConfigClockSource+0x16c>
 8004178:	2b50      	cmp	r3, #80	; 0x50
 800417a:	d03c      	beq.n	80041f6 <HAL_TIM_ConfigClockSource+0xfa>
 800417c:	2b50      	cmp	r3, #80	; 0x50
 800417e:	d873      	bhi.n	8004268 <HAL_TIM_ConfigClockSource+0x16c>
 8004180:	2b40      	cmp	r3, #64	; 0x40
 8004182:	d058      	beq.n	8004236 <HAL_TIM_ConfigClockSource+0x13a>
 8004184:	2b40      	cmp	r3, #64	; 0x40
 8004186:	d86f      	bhi.n	8004268 <HAL_TIM_ConfigClockSource+0x16c>
 8004188:	2b30      	cmp	r3, #48	; 0x30
 800418a:	d064      	beq.n	8004256 <HAL_TIM_ConfigClockSource+0x15a>
 800418c:	2b30      	cmp	r3, #48	; 0x30
 800418e:	d86b      	bhi.n	8004268 <HAL_TIM_ConfigClockSource+0x16c>
 8004190:	2b20      	cmp	r3, #32
 8004192:	d060      	beq.n	8004256 <HAL_TIM_ConfigClockSource+0x15a>
 8004194:	2b20      	cmp	r3, #32
 8004196:	d867      	bhi.n	8004268 <HAL_TIM_ConfigClockSource+0x16c>
 8004198:	2b00      	cmp	r3, #0
 800419a:	d05c      	beq.n	8004256 <HAL_TIM_ConfigClockSource+0x15a>
 800419c:	2b10      	cmp	r3, #16
 800419e:	d05a      	beq.n	8004256 <HAL_TIM_ConfigClockSource+0x15a>
 80041a0:	e062      	b.n	8004268 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041b2:	f000 faf0 	bl	8004796 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	609a      	str	r2, [r3, #8]
      break;
 80041ce:	e04f      	b.n	8004270 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041e0:	f000 fad9 	bl	8004796 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689a      	ldr	r2, [r3, #8]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041f2:	609a      	str	r2, [r3, #8]
      break;
 80041f4:	e03c      	b.n	8004270 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004202:	461a      	mov	r2, r3
 8004204:	f000 fa50 	bl	80046a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2150      	movs	r1, #80	; 0x50
 800420e:	4618      	mov	r0, r3
 8004210:	f000 faa7 	bl	8004762 <TIM_ITRx_SetConfig>
      break;
 8004214:	e02c      	b.n	8004270 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004222:	461a      	mov	r2, r3
 8004224:	f000 fa6e 	bl	8004704 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2160      	movs	r1, #96	; 0x60
 800422e:	4618      	mov	r0, r3
 8004230:	f000 fa97 	bl	8004762 <TIM_ITRx_SetConfig>
      break;
 8004234:	e01c      	b.n	8004270 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004242:	461a      	mov	r2, r3
 8004244:	f000 fa30 	bl	80046a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2140      	movs	r1, #64	; 0x40
 800424e:	4618      	mov	r0, r3
 8004250:	f000 fa87 	bl	8004762 <TIM_ITRx_SetConfig>
      break;
 8004254:	e00c      	b.n	8004270 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4619      	mov	r1, r3
 8004260:	4610      	mov	r0, r2
 8004262:	f000 fa7e 	bl	8004762 <TIM_ITRx_SetConfig>
      break;
 8004266:	e003      	b.n	8004270 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	73fb      	strb	r3, [r7, #15]
      break;
 800426c:	e000      	b.n	8004270 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800426e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004280:	7bfb      	ldrb	r3, [r7, #15]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800428a:	b480      	push	{r7}
 800428c:	b083      	sub	sp, #12
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	bc80      	pop	{r7}
 800429a:	4770      	bx	lr

0800429c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bc80      	pop	{r7}
 80042ac:	4770      	bx	lr

080042ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bc80      	pop	{r7}
 80042be:	4770      	bx	lr

080042c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bc80      	pop	{r7}
 80042d0:	4770      	bx	lr
	...

080042d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a29      	ldr	r2, [pc, #164]	; (800438c <TIM_Base_SetConfig+0xb8>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d00b      	beq.n	8004304 <TIM_Base_SetConfig+0x30>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f2:	d007      	beq.n	8004304 <TIM_Base_SetConfig+0x30>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a26      	ldr	r2, [pc, #152]	; (8004390 <TIM_Base_SetConfig+0xbc>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d003      	beq.n	8004304 <TIM_Base_SetConfig+0x30>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a25      	ldr	r2, [pc, #148]	; (8004394 <TIM_Base_SetConfig+0xc0>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d108      	bne.n	8004316 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a1c      	ldr	r2, [pc, #112]	; (800438c <TIM_Base_SetConfig+0xb8>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d00b      	beq.n	8004336 <TIM_Base_SetConfig+0x62>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004324:	d007      	beq.n	8004336 <TIM_Base_SetConfig+0x62>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a19      	ldr	r2, [pc, #100]	; (8004390 <TIM_Base_SetConfig+0xbc>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d003      	beq.n	8004336 <TIM_Base_SetConfig+0x62>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a18      	ldr	r2, [pc, #96]	; (8004394 <TIM_Base_SetConfig+0xc0>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d108      	bne.n	8004348 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800433c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	4313      	orrs	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	4313      	orrs	r3, r2
 8004354:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a07      	ldr	r2, [pc, #28]	; (800438c <TIM_Base_SetConfig+0xb8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d103      	bne.n	800437c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	691a      	ldr	r2, [r3, #16]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	615a      	str	r2, [r3, #20]
}
 8004382:	bf00      	nop
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	bc80      	pop	{r7}
 800438a:	4770      	bx	lr
 800438c:	40012c00 	.word	0x40012c00
 8004390:	40000400 	.word	0x40000400
 8004394:	40000800 	.word	0x40000800

08004398 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	f023 0201 	bic.w	r2, r3, #1
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f023 0303 	bic.w	r3, r3, #3
 80043ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f023 0302 	bic.w	r3, r3, #2
 80043e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a1c      	ldr	r2, [pc, #112]	; (8004460 <TIM_OC1_SetConfig+0xc8>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d10c      	bne.n	800440e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f023 0308 	bic.w	r3, r3, #8
 80043fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	4313      	orrs	r3, r2
 8004404:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f023 0304 	bic.w	r3, r3, #4
 800440c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a13      	ldr	r2, [pc, #76]	; (8004460 <TIM_OC1_SetConfig+0xc8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d111      	bne.n	800443a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800441c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004424:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	4313      	orrs	r3, r2
 800442e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	4313      	orrs	r3, r2
 8004438:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	621a      	str	r2, [r3, #32]
}
 8004454:	bf00      	nop
 8004456:	371c      	adds	r7, #28
 8004458:	46bd      	mov	sp, r7
 800445a:	bc80      	pop	{r7}
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	40012c00 	.word	0x40012c00

08004464 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	f023 0210 	bic.w	r2, r3, #16
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800449a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	021b      	lsls	r3, r3, #8
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f023 0320 	bic.w	r3, r3, #32
 80044ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a1d      	ldr	r2, [pc, #116]	; (8004534 <TIM_OC2_SetConfig+0xd0>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d10d      	bne.n	80044e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a14      	ldr	r2, [pc, #80]	; (8004534 <TIM_OC2_SetConfig+0xd0>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d113      	bne.n	8004510 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4313      	orrs	r3, r2
 8004502:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	4313      	orrs	r3, r2
 800450e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	621a      	str	r2, [r3, #32]
}
 800452a:	bf00      	nop
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	bc80      	pop	{r7}
 8004532:	4770      	bx	lr
 8004534:	40012c00 	.word	0x40012c00

08004538 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0303 	bic.w	r3, r3, #3
 800456e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4313      	orrs	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004580:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	021b      	lsls	r3, r3, #8
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	4313      	orrs	r3, r2
 800458c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a1d      	ldr	r2, [pc, #116]	; (8004608 <TIM_OC3_SetConfig+0xd0>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d10d      	bne.n	80045b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800459c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	021b      	lsls	r3, r3, #8
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a14      	ldr	r2, [pc, #80]	; (8004608 <TIM_OC3_SetConfig+0xd0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d113      	bne.n	80045e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	011b      	lsls	r3, r3, #4
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	011b      	lsls	r3, r3, #4
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	4313      	orrs	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	621a      	str	r2, [r3, #32]
}
 80045fc:	bf00      	nop
 80045fe:	371c      	adds	r7, #28
 8004600:	46bd      	mov	sp, r7
 8004602:	bc80      	pop	{r7}
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	40012c00 	.word	0x40012c00

0800460c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800463a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	021b      	lsls	r3, r3, #8
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	4313      	orrs	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004656:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	031b      	lsls	r3, r3, #12
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	4313      	orrs	r3, r2
 8004662:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a0f      	ldr	r2, [pc, #60]	; (80046a4 <TIM_OC4_SetConfig+0x98>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d109      	bne.n	8004680 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004672:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	019b      	lsls	r3, r3, #6
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	4313      	orrs	r3, r2
 800467e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	621a      	str	r2, [r3, #32]
}
 800469a:	bf00      	nop
 800469c:	371c      	adds	r7, #28
 800469e:	46bd      	mov	sp, r7
 80046a0:	bc80      	pop	{r7}
 80046a2:	4770      	bx	lr
 80046a4:	40012c00 	.word	0x40012c00

080046a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	f023 0201 	bic.w	r2, r3, #1
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	011b      	lsls	r3, r3, #4
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	4313      	orrs	r3, r2
 80046dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f023 030a 	bic.w	r3, r3, #10
 80046e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	621a      	str	r2, [r3, #32]
}
 80046fa:	bf00      	nop
 80046fc:	371c      	adds	r7, #28
 80046fe:	46bd      	mov	sp, r7
 8004700:	bc80      	pop	{r7}
 8004702:	4770      	bx	lr

08004704 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004704:	b480      	push	{r7}
 8004706:	b087      	sub	sp, #28
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	f023 0210 	bic.w	r2, r3, #16
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800472e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	031b      	lsls	r3, r3, #12
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	4313      	orrs	r3, r2
 8004738:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004740:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	4313      	orrs	r3, r2
 800474a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	621a      	str	r2, [r3, #32]
}
 8004758:	bf00      	nop
 800475a:	371c      	adds	r7, #28
 800475c:	46bd      	mov	sp, r7
 800475e:	bc80      	pop	{r7}
 8004760:	4770      	bx	lr

08004762 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004762:	b480      	push	{r7}
 8004764:	b085      	sub	sp, #20
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
 800476a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004778:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4313      	orrs	r3, r2
 8004780:	f043 0307 	orr.w	r3, r3, #7
 8004784:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	609a      	str	r2, [r3, #8]
}
 800478c:	bf00      	nop
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	bc80      	pop	{r7}
 8004794:	4770      	bx	lr

08004796 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004796:	b480      	push	{r7}
 8004798:	b087      	sub	sp, #28
 800479a:	af00      	add	r7, sp, #0
 800479c:	60f8      	str	r0, [r7, #12]
 800479e:	60b9      	str	r1, [r7, #8]
 80047a0:	607a      	str	r2, [r7, #4]
 80047a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	021a      	lsls	r2, r3, #8
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	431a      	orrs	r2, r3
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	4313      	orrs	r3, r2
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	609a      	str	r2, [r3, #8]
}
 80047ca:	bf00      	nop
 80047cc:	371c      	adds	r7, #28
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bc80      	pop	{r7}
 80047d2:	4770      	bx	lr

080047d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f003 031f 	and.w	r3, r3, #31
 80047e6:	2201      	movs	r2, #1
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6a1a      	ldr	r2, [r3, #32]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	43db      	mvns	r3, r3
 80047f6:	401a      	ands	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a1a      	ldr	r2, [r3, #32]
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f003 031f 	and.w	r3, r3, #31
 8004806:	6879      	ldr	r1, [r7, #4]
 8004808:	fa01 f303 	lsl.w	r3, r1, r3
 800480c:	431a      	orrs	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	621a      	str	r2, [r3, #32]
}
 8004812:	bf00      	nop
 8004814:	371c      	adds	r7, #28
 8004816:	46bd      	mov	sp, r7
 8004818:	bc80      	pop	{r7}
 800481a:	4770      	bx	lr

0800481c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800482c:	2b01      	cmp	r3, #1
 800482e:	d101      	bne.n	8004834 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004830:	2302      	movs	r3, #2
 8004832:	e046      	b.n	80048c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2202      	movs	r2, #2
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800485a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	4313      	orrs	r3, r2
 8004864:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a16      	ldr	r2, [pc, #88]	; (80048cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d00e      	beq.n	8004896 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004880:	d009      	beq.n	8004896 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a12      	ldr	r2, [pc, #72]	; (80048d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d004      	beq.n	8004896 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a10      	ldr	r2, [pc, #64]	; (80048d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d10c      	bne.n	80048b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800489c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr
 80048cc:	40012c00 	.word	0x40012c00
 80048d0:	40000400 	.word	0x40000400
 80048d4:	40000800 	.word	0x40000800

080048d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bc80      	pop	{r7}
 80048e8:	4770      	bx	lr

080048ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b083      	sub	sp, #12
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048f2:	bf00      	nop
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bc80      	pop	{r7}
 80048fa:	4770      	bx	lr

080048fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e042      	b.n	8004994 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d106      	bne.n	8004928 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7fe f846 	bl	80029b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2224      	movs	r2, #36	; 0x24
 800492c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68da      	ldr	r2, [r3, #12]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800493e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f91d 	bl	8004b80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	691a      	ldr	r2, [r3, #16]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004954:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695a      	ldr	r2, [r3, #20]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004964:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004974:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2220      	movs	r2, #32
 8004980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2220      	movs	r2, #32
 8004988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3708      	adds	r7, #8
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b08a      	sub	sp, #40	; 0x28
 80049a0:	af02      	add	r7, sp, #8
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	4613      	mov	r3, r2
 80049aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b20      	cmp	r3, #32
 80049ba:	d16d      	bne.n	8004a98 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d002      	beq.n	80049c8 <HAL_UART_Transmit+0x2c>
 80049c2:	88fb      	ldrh	r3, [r7, #6]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e066      	b.n	8004a9a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2221      	movs	r2, #33	; 0x21
 80049d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049da:	f7fe f921 	bl	8002c20 <HAL_GetTick>
 80049de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	88fa      	ldrh	r2, [r7, #6]
 80049e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	88fa      	ldrh	r2, [r7, #6]
 80049ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f4:	d108      	bne.n	8004a08 <HAL_UART_Transmit+0x6c>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d104      	bne.n	8004a08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80049fe:	2300      	movs	r3, #0
 8004a00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	61bb      	str	r3, [r7, #24]
 8004a06:	e003      	b.n	8004a10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a10:	e02a      	b.n	8004a68 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	2180      	movs	r1, #128	; 0x80
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 f840 	bl	8004aa2 <UART_WaitOnFlagUntilTimeout>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e036      	b.n	8004a9a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10b      	bne.n	8004a4a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	881b      	ldrh	r3, [r3, #0]
 8004a36:	461a      	mov	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	3302      	adds	r3, #2
 8004a46:	61bb      	str	r3, [r7, #24]
 8004a48:	e007      	b.n	8004a5a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	781a      	ldrb	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	3301      	adds	r3, #1
 8004a58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	3b01      	subs	r3, #1
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1cf      	bne.n	8004a12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	2140      	movs	r1, #64	; 0x40
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 f810 	bl	8004aa2 <UART_WaitOnFlagUntilTimeout>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e006      	b.n	8004a9a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004a94:	2300      	movs	r3, #0
 8004a96:	e000      	b.n	8004a9a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004a98:	2302      	movs	r3, #2
  }
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3720      	adds	r7, #32
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b090      	sub	sp, #64	; 0x40
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	60f8      	str	r0, [r7, #12]
 8004aaa:	60b9      	str	r1, [r7, #8]
 8004aac:	603b      	str	r3, [r7, #0]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ab2:	e050      	b.n	8004b56 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aba:	d04c      	beq.n	8004b56 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004abc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d007      	beq.n	8004ad2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ac2:	f7fe f8ad 	bl	8002c20 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d241      	bcs.n	8004b56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	330c      	adds	r3, #12
 8004ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004adc:	e853 3f00 	ldrex	r3, [r3]
 8004ae0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	330c      	adds	r3, #12
 8004af0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004af2:	637a      	str	r2, [r7, #52]	; 0x34
 8004af4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004af8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004afa:	e841 2300 	strex	r3, r2, [r1]
 8004afe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1e5      	bne.n	8004ad2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	3314      	adds	r3, #20
 8004b0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	e853 3f00 	ldrex	r3, [r3]
 8004b14:	613b      	str	r3, [r7, #16]
   return(result);
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f023 0301 	bic.w	r3, r3, #1
 8004b1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3314      	adds	r3, #20
 8004b24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b26:	623a      	str	r2, [r7, #32]
 8004b28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2a:	69f9      	ldr	r1, [r7, #28]
 8004b2c:	6a3a      	ldr	r2, [r7, #32]
 8004b2e:	e841 2300 	strex	r3, r2, [r1]
 8004b32:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1e5      	bne.n	8004b06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2220      	movs	r2, #32
 8004b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e00f      	b.n	8004b76 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	bf0c      	ite	eq
 8004b66:	2301      	moveq	r3, #1
 8004b68:	2300      	movne	r3, #0
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	79fb      	ldrb	r3, [r7, #7]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d09f      	beq.n	8004ab4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3740      	adds	r7, #64	; 0x40
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
	...

08004b80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68da      	ldr	r2, [r3, #12]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689a      	ldr	r2, [r3, #8]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004bba:	f023 030c 	bic.w	r3, r3, #12
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	6812      	ldr	r2, [r2, #0]
 8004bc2:	68b9      	ldr	r1, [r7, #8]
 8004bc4:	430b      	orrs	r3, r1
 8004bc6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	699a      	ldr	r2, [r3, #24]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a2c      	ldr	r2, [pc, #176]	; (8004c94 <UART_SetConfig+0x114>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d103      	bne.n	8004bf0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004be8:	f7fe fef8 	bl	80039dc <HAL_RCC_GetPCLK2Freq>
 8004bec:	60f8      	str	r0, [r7, #12]
 8004bee:	e002      	b.n	8004bf6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004bf0:	f7fe fee0 	bl	80039b4 <HAL_RCC_GetPCLK1Freq>
 8004bf4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009a      	lsls	r2, r3, #2
 8004c00:	441a      	add	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0c:	4a22      	ldr	r2, [pc, #136]	; (8004c98 <UART_SetConfig+0x118>)
 8004c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c12:	095b      	lsrs	r3, r3, #5
 8004c14:	0119      	lsls	r1, r3, #4
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	009a      	lsls	r2, r3, #2
 8004c20:	441a      	add	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c2c:	4b1a      	ldr	r3, [pc, #104]	; (8004c98 <UART_SetConfig+0x118>)
 8004c2e:	fba3 0302 	umull	r0, r3, r3, r2
 8004c32:	095b      	lsrs	r3, r3, #5
 8004c34:	2064      	movs	r0, #100	; 0x64
 8004c36:	fb00 f303 	mul.w	r3, r0, r3
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	011b      	lsls	r3, r3, #4
 8004c3e:	3332      	adds	r3, #50	; 0x32
 8004c40:	4a15      	ldr	r2, [pc, #84]	; (8004c98 <UART_SetConfig+0x118>)
 8004c42:	fba2 2303 	umull	r2, r3, r2, r3
 8004c46:	095b      	lsrs	r3, r3, #5
 8004c48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c4c:	4419      	add	r1, r3
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	4613      	mov	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	009a      	lsls	r2, r3, #2
 8004c58:	441a      	add	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c64:	4b0c      	ldr	r3, [pc, #48]	; (8004c98 <UART_SetConfig+0x118>)
 8004c66:	fba3 0302 	umull	r0, r3, r3, r2
 8004c6a:	095b      	lsrs	r3, r3, #5
 8004c6c:	2064      	movs	r0, #100	; 0x64
 8004c6e:	fb00 f303 	mul.w	r3, r0, r3
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	011b      	lsls	r3, r3, #4
 8004c76:	3332      	adds	r3, #50	; 0x32
 8004c78:	4a07      	ldr	r2, [pc, #28]	; (8004c98 <UART_SetConfig+0x118>)
 8004c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7e:	095b      	lsrs	r3, r3, #5
 8004c80:	f003 020f 	and.w	r2, r3, #15
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	440a      	add	r2, r1
 8004c8a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004c8c:	bf00      	nop
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	40013800 	.word	0x40013800
 8004c98:	51eb851f 	.word	0x51eb851f

08004c9c <siprintf>:
 8004c9c:	b40e      	push	{r1, r2, r3}
 8004c9e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ca2:	b500      	push	{lr}
 8004ca4:	b09c      	sub	sp, #112	; 0x70
 8004ca6:	ab1d      	add	r3, sp, #116	; 0x74
 8004ca8:	9002      	str	r0, [sp, #8]
 8004caa:	9006      	str	r0, [sp, #24]
 8004cac:	9107      	str	r1, [sp, #28]
 8004cae:	9104      	str	r1, [sp, #16]
 8004cb0:	4808      	ldr	r0, [pc, #32]	; (8004cd4 <siprintf+0x38>)
 8004cb2:	4909      	ldr	r1, [pc, #36]	; (8004cd8 <siprintf+0x3c>)
 8004cb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cb8:	9105      	str	r1, [sp, #20]
 8004cba:	6800      	ldr	r0, [r0, #0]
 8004cbc:	a902      	add	r1, sp, #8
 8004cbe:	9301      	str	r3, [sp, #4]
 8004cc0:	f000 f98e 	bl	8004fe0 <_svfiprintf_r>
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	9b02      	ldr	r3, [sp, #8]
 8004cc8:	701a      	strb	r2, [r3, #0]
 8004cca:	b01c      	add	sp, #112	; 0x70
 8004ccc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cd0:	b003      	add	sp, #12
 8004cd2:	4770      	bx	lr
 8004cd4:	200000f8 	.word	0x200000f8
 8004cd8:	ffff0208 	.word	0xffff0208

08004cdc <memset>:
 8004cdc:	4603      	mov	r3, r0
 8004cde:	4402      	add	r2, r0
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d100      	bne.n	8004ce6 <memset+0xa>
 8004ce4:	4770      	bx	lr
 8004ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8004cea:	e7f9      	b.n	8004ce0 <memset+0x4>

08004cec <__errno>:
 8004cec:	4b01      	ldr	r3, [pc, #4]	; (8004cf4 <__errno+0x8>)
 8004cee:	6818      	ldr	r0, [r3, #0]
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	200000f8 	.word	0x200000f8

08004cf8 <__libc_init_array>:
 8004cf8:	b570      	push	{r4, r5, r6, lr}
 8004cfa:	2600      	movs	r6, #0
 8004cfc:	4d0c      	ldr	r5, [pc, #48]	; (8004d30 <__libc_init_array+0x38>)
 8004cfe:	4c0d      	ldr	r4, [pc, #52]	; (8004d34 <__libc_init_array+0x3c>)
 8004d00:	1b64      	subs	r4, r4, r5
 8004d02:	10a4      	asrs	r4, r4, #2
 8004d04:	42a6      	cmp	r6, r4
 8004d06:	d109      	bne.n	8004d1c <__libc_init_array+0x24>
 8004d08:	f000 fc7a 	bl	8005600 <_init>
 8004d0c:	2600      	movs	r6, #0
 8004d0e:	4d0a      	ldr	r5, [pc, #40]	; (8004d38 <__libc_init_array+0x40>)
 8004d10:	4c0a      	ldr	r4, [pc, #40]	; (8004d3c <__libc_init_array+0x44>)
 8004d12:	1b64      	subs	r4, r4, r5
 8004d14:	10a4      	asrs	r4, r4, #2
 8004d16:	42a6      	cmp	r6, r4
 8004d18:	d105      	bne.n	8004d26 <__libc_init_array+0x2e>
 8004d1a:	bd70      	pop	{r4, r5, r6, pc}
 8004d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d20:	4798      	blx	r3
 8004d22:	3601      	adds	r6, #1
 8004d24:	e7ee      	b.n	8004d04 <__libc_init_array+0xc>
 8004d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d2a:	4798      	blx	r3
 8004d2c:	3601      	adds	r6, #1
 8004d2e:	e7f2      	b.n	8004d16 <__libc_init_array+0x1e>
 8004d30:	08005954 	.word	0x08005954
 8004d34:	08005954 	.word	0x08005954
 8004d38:	08005954 	.word	0x08005954
 8004d3c:	08005958 	.word	0x08005958

08004d40 <__retarget_lock_acquire_recursive>:
 8004d40:	4770      	bx	lr

08004d42 <__retarget_lock_release_recursive>:
 8004d42:	4770      	bx	lr

08004d44 <_free_r>:
 8004d44:	b538      	push	{r3, r4, r5, lr}
 8004d46:	4605      	mov	r5, r0
 8004d48:	2900      	cmp	r1, #0
 8004d4a:	d040      	beq.n	8004dce <_free_r+0x8a>
 8004d4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d50:	1f0c      	subs	r4, r1, #4
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	bfb8      	it	lt
 8004d56:	18e4      	addlt	r4, r4, r3
 8004d58:	f000 f8dc 	bl	8004f14 <__malloc_lock>
 8004d5c:	4a1c      	ldr	r2, [pc, #112]	; (8004dd0 <_free_r+0x8c>)
 8004d5e:	6813      	ldr	r3, [r2, #0]
 8004d60:	b933      	cbnz	r3, 8004d70 <_free_r+0x2c>
 8004d62:	6063      	str	r3, [r4, #4]
 8004d64:	6014      	str	r4, [r2, #0]
 8004d66:	4628      	mov	r0, r5
 8004d68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d6c:	f000 b8d8 	b.w	8004f20 <__malloc_unlock>
 8004d70:	42a3      	cmp	r3, r4
 8004d72:	d908      	bls.n	8004d86 <_free_r+0x42>
 8004d74:	6820      	ldr	r0, [r4, #0]
 8004d76:	1821      	adds	r1, r4, r0
 8004d78:	428b      	cmp	r3, r1
 8004d7a:	bf01      	itttt	eq
 8004d7c:	6819      	ldreq	r1, [r3, #0]
 8004d7e:	685b      	ldreq	r3, [r3, #4]
 8004d80:	1809      	addeq	r1, r1, r0
 8004d82:	6021      	streq	r1, [r4, #0]
 8004d84:	e7ed      	b.n	8004d62 <_free_r+0x1e>
 8004d86:	461a      	mov	r2, r3
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	b10b      	cbz	r3, 8004d90 <_free_r+0x4c>
 8004d8c:	42a3      	cmp	r3, r4
 8004d8e:	d9fa      	bls.n	8004d86 <_free_r+0x42>
 8004d90:	6811      	ldr	r1, [r2, #0]
 8004d92:	1850      	adds	r0, r2, r1
 8004d94:	42a0      	cmp	r0, r4
 8004d96:	d10b      	bne.n	8004db0 <_free_r+0x6c>
 8004d98:	6820      	ldr	r0, [r4, #0]
 8004d9a:	4401      	add	r1, r0
 8004d9c:	1850      	adds	r0, r2, r1
 8004d9e:	4283      	cmp	r3, r0
 8004da0:	6011      	str	r1, [r2, #0]
 8004da2:	d1e0      	bne.n	8004d66 <_free_r+0x22>
 8004da4:	6818      	ldr	r0, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	4408      	add	r0, r1
 8004daa:	6010      	str	r0, [r2, #0]
 8004dac:	6053      	str	r3, [r2, #4]
 8004dae:	e7da      	b.n	8004d66 <_free_r+0x22>
 8004db0:	d902      	bls.n	8004db8 <_free_r+0x74>
 8004db2:	230c      	movs	r3, #12
 8004db4:	602b      	str	r3, [r5, #0]
 8004db6:	e7d6      	b.n	8004d66 <_free_r+0x22>
 8004db8:	6820      	ldr	r0, [r4, #0]
 8004dba:	1821      	adds	r1, r4, r0
 8004dbc:	428b      	cmp	r3, r1
 8004dbe:	bf01      	itttt	eq
 8004dc0:	6819      	ldreq	r1, [r3, #0]
 8004dc2:	685b      	ldreq	r3, [r3, #4]
 8004dc4:	1809      	addeq	r1, r1, r0
 8004dc6:	6021      	streq	r1, [r4, #0]
 8004dc8:	6063      	str	r3, [r4, #4]
 8004dca:	6054      	str	r4, [r2, #4]
 8004dcc:	e7cb      	b.n	8004d66 <_free_r+0x22>
 8004dce:	bd38      	pop	{r3, r4, r5, pc}
 8004dd0:	200004c4 	.word	0x200004c4

08004dd4 <sbrk_aligned>:
 8004dd4:	b570      	push	{r4, r5, r6, lr}
 8004dd6:	4e0e      	ldr	r6, [pc, #56]	; (8004e10 <sbrk_aligned+0x3c>)
 8004dd8:	460c      	mov	r4, r1
 8004dda:	6831      	ldr	r1, [r6, #0]
 8004ddc:	4605      	mov	r5, r0
 8004dde:	b911      	cbnz	r1, 8004de6 <sbrk_aligned+0x12>
 8004de0:	f000 fbaa 	bl	8005538 <_sbrk_r>
 8004de4:	6030      	str	r0, [r6, #0]
 8004de6:	4621      	mov	r1, r4
 8004de8:	4628      	mov	r0, r5
 8004dea:	f000 fba5 	bl	8005538 <_sbrk_r>
 8004dee:	1c43      	adds	r3, r0, #1
 8004df0:	d00a      	beq.n	8004e08 <sbrk_aligned+0x34>
 8004df2:	1cc4      	adds	r4, r0, #3
 8004df4:	f024 0403 	bic.w	r4, r4, #3
 8004df8:	42a0      	cmp	r0, r4
 8004dfa:	d007      	beq.n	8004e0c <sbrk_aligned+0x38>
 8004dfc:	1a21      	subs	r1, r4, r0
 8004dfe:	4628      	mov	r0, r5
 8004e00:	f000 fb9a 	bl	8005538 <_sbrk_r>
 8004e04:	3001      	adds	r0, #1
 8004e06:	d101      	bne.n	8004e0c <sbrk_aligned+0x38>
 8004e08:	f04f 34ff 	mov.w	r4, #4294967295
 8004e0c:	4620      	mov	r0, r4
 8004e0e:	bd70      	pop	{r4, r5, r6, pc}
 8004e10:	200004c8 	.word	0x200004c8

08004e14 <_malloc_r>:
 8004e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e18:	1ccd      	adds	r5, r1, #3
 8004e1a:	f025 0503 	bic.w	r5, r5, #3
 8004e1e:	3508      	adds	r5, #8
 8004e20:	2d0c      	cmp	r5, #12
 8004e22:	bf38      	it	cc
 8004e24:	250c      	movcc	r5, #12
 8004e26:	2d00      	cmp	r5, #0
 8004e28:	4607      	mov	r7, r0
 8004e2a:	db01      	blt.n	8004e30 <_malloc_r+0x1c>
 8004e2c:	42a9      	cmp	r1, r5
 8004e2e:	d905      	bls.n	8004e3c <_malloc_r+0x28>
 8004e30:	230c      	movs	r3, #12
 8004e32:	2600      	movs	r6, #0
 8004e34:	603b      	str	r3, [r7, #0]
 8004e36:	4630      	mov	r0, r6
 8004e38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e3c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004f10 <_malloc_r+0xfc>
 8004e40:	f000 f868 	bl	8004f14 <__malloc_lock>
 8004e44:	f8d8 3000 	ldr.w	r3, [r8]
 8004e48:	461c      	mov	r4, r3
 8004e4a:	bb5c      	cbnz	r4, 8004ea4 <_malloc_r+0x90>
 8004e4c:	4629      	mov	r1, r5
 8004e4e:	4638      	mov	r0, r7
 8004e50:	f7ff ffc0 	bl	8004dd4 <sbrk_aligned>
 8004e54:	1c43      	adds	r3, r0, #1
 8004e56:	4604      	mov	r4, r0
 8004e58:	d155      	bne.n	8004f06 <_malloc_r+0xf2>
 8004e5a:	f8d8 4000 	ldr.w	r4, [r8]
 8004e5e:	4626      	mov	r6, r4
 8004e60:	2e00      	cmp	r6, #0
 8004e62:	d145      	bne.n	8004ef0 <_malloc_r+0xdc>
 8004e64:	2c00      	cmp	r4, #0
 8004e66:	d048      	beq.n	8004efa <_malloc_r+0xe6>
 8004e68:	6823      	ldr	r3, [r4, #0]
 8004e6a:	4631      	mov	r1, r6
 8004e6c:	4638      	mov	r0, r7
 8004e6e:	eb04 0903 	add.w	r9, r4, r3
 8004e72:	f000 fb61 	bl	8005538 <_sbrk_r>
 8004e76:	4581      	cmp	r9, r0
 8004e78:	d13f      	bne.n	8004efa <_malloc_r+0xe6>
 8004e7a:	6821      	ldr	r1, [r4, #0]
 8004e7c:	4638      	mov	r0, r7
 8004e7e:	1a6d      	subs	r5, r5, r1
 8004e80:	4629      	mov	r1, r5
 8004e82:	f7ff ffa7 	bl	8004dd4 <sbrk_aligned>
 8004e86:	3001      	adds	r0, #1
 8004e88:	d037      	beq.n	8004efa <_malloc_r+0xe6>
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	442b      	add	r3, r5
 8004e8e:	6023      	str	r3, [r4, #0]
 8004e90:	f8d8 3000 	ldr.w	r3, [r8]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d038      	beq.n	8004f0a <_malloc_r+0xf6>
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	42a2      	cmp	r2, r4
 8004e9c:	d12b      	bne.n	8004ef6 <_malloc_r+0xe2>
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	605a      	str	r2, [r3, #4]
 8004ea2:	e00f      	b.n	8004ec4 <_malloc_r+0xb0>
 8004ea4:	6822      	ldr	r2, [r4, #0]
 8004ea6:	1b52      	subs	r2, r2, r5
 8004ea8:	d41f      	bmi.n	8004eea <_malloc_r+0xd6>
 8004eaa:	2a0b      	cmp	r2, #11
 8004eac:	d917      	bls.n	8004ede <_malloc_r+0xca>
 8004eae:	1961      	adds	r1, r4, r5
 8004eb0:	42a3      	cmp	r3, r4
 8004eb2:	6025      	str	r5, [r4, #0]
 8004eb4:	bf18      	it	ne
 8004eb6:	6059      	strne	r1, [r3, #4]
 8004eb8:	6863      	ldr	r3, [r4, #4]
 8004eba:	bf08      	it	eq
 8004ebc:	f8c8 1000 	streq.w	r1, [r8]
 8004ec0:	5162      	str	r2, [r4, r5]
 8004ec2:	604b      	str	r3, [r1, #4]
 8004ec4:	4638      	mov	r0, r7
 8004ec6:	f104 060b 	add.w	r6, r4, #11
 8004eca:	f000 f829 	bl	8004f20 <__malloc_unlock>
 8004ece:	f026 0607 	bic.w	r6, r6, #7
 8004ed2:	1d23      	adds	r3, r4, #4
 8004ed4:	1af2      	subs	r2, r6, r3
 8004ed6:	d0ae      	beq.n	8004e36 <_malloc_r+0x22>
 8004ed8:	1b9b      	subs	r3, r3, r6
 8004eda:	50a3      	str	r3, [r4, r2]
 8004edc:	e7ab      	b.n	8004e36 <_malloc_r+0x22>
 8004ede:	42a3      	cmp	r3, r4
 8004ee0:	6862      	ldr	r2, [r4, #4]
 8004ee2:	d1dd      	bne.n	8004ea0 <_malloc_r+0x8c>
 8004ee4:	f8c8 2000 	str.w	r2, [r8]
 8004ee8:	e7ec      	b.n	8004ec4 <_malloc_r+0xb0>
 8004eea:	4623      	mov	r3, r4
 8004eec:	6864      	ldr	r4, [r4, #4]
 8004eee:	e7ac      	b.n	8004e4a <_malloc_r+0x36>
 8004ef0:	4634      	mov	r4, r6
 8004ef2:	6876      	ldr	r6, [r6, #4]
 8004ef4:	e7b4      	b.n	8004e60 <_malloc_r+0x4c>
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	e7cc      	b.n	8004e94 <_malloc_r+0x80>
 8004efa:	230c      	movs	r3, #12
 8004efc:	4638      	mov	r0, r7
 8004efe:	603b      	str	r3, [r7, #0]
 8004f00:	f000 f80e 	bl	8004f20 <__malloc_unlock>
 8004f04:	e797      	b.n	8004e36 <_malloc_r+0x22>
 8004f06:	6025      	str	r5, [r4, #0]
 8004f08:	e7dc      	b.n	8004ec4 <_malloc_r+0xb0>
 8004f0a:	605b      	str	r3, [r3, #4]
 8004f0c:	deff      	udf	#255	; 0xff
 8004f0e:	bf00      	nop
 8004f10:	200004c4 	.word	0x200004c4

08004f14 <__malloc_lock>:
 8004f14:	4801      	ldr	r0, [pc, #4]	; (8004f1c <__malloc_lock+0x8>)
 8004f16:	f7ff bf13 	b.w	8004d40 <__retarget_lock_acquire_recursive>
 8004f1a:	bf00      	nop
 8004f1c:	200004c0 	.word	0x200004c0

08004f20 <__malloc_unlock>:
 8004f20:	4801      	ldr	r0, [pc, #4]	; (8004f28 <__malloc_unlock+0x8>)
 8004f22:	f7ff bf0e 	b.w	8004d42 <__retarget_lock_release_recursive>
 8004f26:	bf00      	nop
 8004f28:	200004c0 	.word	0x200004c0

08004f2c <__ssputs_r>:
 8004f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f30:	461f      	mov	r7, r3
 8004f32:	688e      	ldr	r6, [r1, #8]
 8004f34:	4682      	mov	sl, r0
 8004f36:	42be      	cmp	r6, r7
 8004f38:	460c      	mov	r4, r1
 8004f3a:	4690      	mov	r8, r2
 8004f3c:	680b      	ldr	r3, [r1, #0]
 8004f3e:	d82c      	bhi.n	8004f9a <__ssputs_r+0x6e>
 8004f40:	898a      	ldrh	r2, [r1, #12]
 8004f42:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f46:	d026      	beq.n	8004f96 <__ssputs_r+0x6a>
 8004f48:	6965      	ldr	r5, [r4, #20]
 8004f4a:	6909      	ldr	r1, [r1, #16]
 8004f4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f50:	eba3 0901 	sub.w	r9, r3, r1
 8004f54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f58:	1c7b      	adds	r3, r7, #1
 8004f5a:	444b      	add	r3, r9
 8004f5c:	106d      	asrs	r5, r5, #1
 8004f5e:	429d      	cmp	r5, r3
 8004f60:	bf38      	it	cc
 8004f62:	461d      	movcc	r5, r3
 8004f64:	0553      	lsls	r3, r2, #21
 8004f66:	d527      	bpl.n	8004fb8 <__ssputs_r+0x8c>
 8004f68:	4629      	mov	r1, r5
 8004f6a:	f7ff ff53 	bl	8004e14 <_malloc_r>
 8004f6e:	4606      	mov	r6, r0
 8004f70:	b360      	cbz	r0, 8004fcc <__ssputs_r+0xa0>
 8004f72:	464a      	mov	r2, r9
 8004f74:	6921      	ldr	r1, [r4, #16]
 8004f76:	f000 fafd 	bl	8005574 <memcpy>
 8004f7a:	89a3      	ldrh	r3, [r4, #12]
 8004f7c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f84:	81a3      	strh	r3, [r4, #12]
 8004f86:	6126      	str	r6, [r4, #16]
 8004f88:	444e      	add	r6, r9
 8004f8a:	6026      	str	r6, [r4, #0]
 8004f8c:	463e      	mov	r6, r7
 8004f8e:	6165      	str	r5, [r4, #20]
 8004f90:	eba5 0509 	sub.w	r5, r5, r9
 8004f94:	60a5      	str	r5, [r4, #8]
 8004f96:	42be      	cmp	r6, r7
 8004f98:	d900      	bls.n	8004f9c <__ssputs_r+0x70>
 8004f9a:	463e      	mov	r6, r7
 8004f9c:	4632      	mov	r2, r6
 8004f9e:	4641      	mov	r1, r8
 8004fa0:	6820      	ldr	r0, [r4, #0]
 8004fa2:	f000 faaf 	bl	8005504 <memmove>
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	68a3      	ldr	r3, [r4, #8]
 8004faa:	1b9b      	subs	r3, r3, r6
 8004fac:	60a3      	str	r3, [r4, #8]
 8004fae:	6823      	ldr	r3, [r4, #0]
 8004fb0:	4433      	add	r3, r6
 8004fb2:	6023      	str	r3, [r4, #0]
 8004fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fb8:	462a      	mov	r2, r5
 8004fba:	f000 fae9 	bl	8005590 <_realloc_r>
 8004fbe:	4606      	mov	r6, r0
 8004fc0:	2800      	cmp	r0, #0
 8004fc2:	d1e0      	bne.n	8004f86 <__ssputs_r+0x5a>
 8004fc4:	4650      	mov	r0, sl
 8004fc6:	6921      	ldr	r1, [r4, #16]
 8004fc8:	f7ff febc 	bl	8004d44 <_free_r>
 8004fcc:	230c      	movs	r3, #12
 8004fce:	f8ca 3000 	str.w	r3, [sl]
 8004fd2:	89a3      	ldrh	r3, [r4, #12]
 8004fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fdc:	81a3      	strh	r3, [r4, #12]
 8004fde:	e7e9      	b.n	8004fb4 <__ssputs_r+0x88>

08004fe0 <_svfiprintf_r>:
 8004fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe4:	4698      	mov	r8, r3
 8004fe6:	898b      	ldrh	r3, [r1, #12]
 8004fe8:	4607      	mov	r7, r0
 8004fea:	061b      	lsls	r3, r3, #24
 8004fec:	460d      	mov	r5, r1
 8004fee:	4614      	mov	r4, r2
 8004ff0:	b09d      	sub	sp, #116	; 0x74
 8004ff2:	d50e      	bpl.n	8005012 <_svfiprintf_r+0x32>
 8004ff4:	690b      	ldr	r3, [r1, #16]
 8004ff6:	b963      	cbnz	r3, 8005012 <_svfiprintf_r+0x32>
 8004ff8:	2140      	movs	r1, #64	; 0x40
 8004ffa:	f7ff ff0b 	bl	8004e14 <_malloc_r>
 8004ffe:	6028      	str	r0, [r5, #0]
 8005000:	6128      	str	r0, [r5, #16]
 8005002:	b920      	cbnz	r0, 800500e <_svfiprintf_r+0x2e>
 8005004:	230c      	movs	r3, #12
 8005006:	603b      	str	r3, [r7, #0]
 8005008:	f04f 30ff 	mov.w	r0, #4294967295
 800500c:	e0d0      	b.n	80051b0 <_svfiprintf_r+0x1d0>
 800500e:	2340      	movs	r3, #64	; 0x40
 8005010:	616b      	str	r3, [r5, #20]
 8005012:	2300      	movs	r3, #0
 8005014:	9309      	str	r3, [sp, #36]	; 0x24
 8005016:	2320      	movs	r3, #32
 8005018:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800501c:	2330      	movs	r3, #48	; 0x30
 800501e:	f04f 0901 	mov.w	r9, #1
 8005022:	f8cd 800c 	str.w	r8, [sp, #12]
 8005026:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80051c8 <_svfiprintf_r+0x1e8>
 800502a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800502e:	4623      	mov	r3, r4
 8005030:	469a      	mov	sl, r3
 8005032:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005036:	b10a      	cbz	r2, 800503c <_svfiprintf_r+0x5c>
 8005038:	2a25      	cmp	r2, #37	; 0x25
 800503a:	d1f9      	bne.n	8005030 <_svfiprintf_r+0x50>
 800503c:	ebba 0b04 	subs.w	fp, sl, r4
 8005040:	d00b      	beq.n	800505a <_svfiprintf_r+0x7a>
 8005042:	465b      	mov	r3, fp
 8005044:	4622      	mov	r2, r4
 8005046:	4629      	mov	r1, r5
 8005048:	4638      	mov	r0, r7
 800504a:	f7ff ff6f 	bl	8004f2c <__ssputs_r>
 800504e:	3001      	adds	r0, #1
 8005050:	f000 80a9 	beq.w	80051a6 <_svfiprintf_r+0x1c6>
 8005054:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005056:	445a      	add	r2, fp
 8005058:	9209      	str	r2, [sp, #36]	; 0x24
 800505a:	f89a 3000 	ldrb.w	r3, [sl]
 800505e:	2b00      	cmp	r3, #0
 8005060:	f000 80a1 	beq.w	80051a6 <_svfiprintf_r+0x1c6>
 8005064:	2300      	movs	r3, #0
 8005066:	f04f 32ff 	mov.w	r2, #4294967295
 800506a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800506e:	f10a 0a01 	add.w	sl, sl, #1
 8005072:	9304      	str	r3, [sp, #16]
 8005074:	9307      	str	r3, [sp, #28]
 8005076:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800507a:	931a      	str	r3, [sp, #104]	; 0x68
 800507c:	4654      	mov	r4, sl
 800507e:	2205      	movs	r2, #5
 8005080:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005084:	4850      	ldr	r0, [pc, #320]	; (80051c8 <_svfiprintf_r+0x1e8>)
 8005086:	f000 fa67 	bl	8005558 <memchr>
 800508a:	9a04      	ldr	r2, [sp, #16]
 800508c:	b9d8      	cbnz	r0, 80050c6 <_svfiprintf_r+0xe6>
 800508e:	06d0      	lsls	r0, r2, #27
 8005090:	bf44      	itt	mi
 8005092:	2320      	movmi	r3, #32
 8005094:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005098:	0711      	lsls	r1, r2, #28
 800509a:	bf44      	itt	mi
 800509c:	232b      	movmi	r3, #43	; 0x2b
 800509e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050a2:	f89a 3000 	ldrb.w	r3, [sl]
 80050a6:	2b2a      	cmp	r3, #42	; 0x2a
 80050a8:	d015      	beq.n	80050d6 <_svfiprintf_r+0xf6>
 80050aa:	4654      	mov	r4, sl
 80050ac:	2000      	movs	r0, #0
 80050ae:	f04f 0c0a 	mov.w	ip, #10
 80050b2:	9a07      	ldr	r2, [sp, #28]
 80050b4:	4621      	mov	r1, r4
 80050b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050ba:	3b30      	subs	r3, #48	; 0x30
 80050bc:	2b09      	cmp	r3, #9
 80050be:	d94d      	bls.n	800515c <_svfiprintf_r+0x17c>
 80050c0:	b1b0      	cbz	r0, 80050f0 <_svfiprintf_r+0x110>
 80050c2:	9207      	str	r2, [sp, #28]
 80050c4:	e014      	b.n	80050f0 <_svfiprintf_r+0x110>
 80050c6:	eba0 0308 	sub.w	r3, r0, r8
 80050ca:	fa09 f303 	lsl.w	r3, r9, r3
 80050ce:	4313      	orrs	r3, r2
 80050d0:	46a2      	mov	sl, r4
 80050d2:	9304      	str	r3, [sp, #16]
 80050d4:	e7d2      	b.n	800507c <_svfiprintf_r+0x9c>
 80050d6:	9b03      	ldr	r3, [sp, #12]
 80050d8:	1d19      	adds	r1, r3, #4
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	9103      	str	r1, [sp, #12]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	bfbb      	ittet	lt
 80050e2:	425b      	neglt	r3, r3
 80050e4:	f042 0202 	orrlt.w	r2, r2, #2
 80050e8:	9307      	strge	r3, [sp, #28]
 80050ea:	9307      	strlt	r3, [sp, #28]
 80050ec:	bfb8      	it	lt
 80050ee:	9204      	strlt	r2, [sp, #16]
 80050f0:	7823      	ldrb	r3, [r4, #0]
 80050f2:	2b2e      	cmp	r3, #46	; 0x2e
 80050f4:	d10c      	bne.n	8005110 <_svfiprintf_r+0x130>
 80050f6:	7863      	ldrb	r3, [r4, #1]
 80050f8:	2b2a      	cmp	r3, #42	; 0x2a
 80050fa:	d134      	bne.n	8005166 <_svfiprintf_r+0x186>
 80050fc:	9b03      	ldr	r3, [sp, #12]
 80050fe:	3402      	adds	r4, #2
 8005100:	1d1a      	adds	r2, r3, #4
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	9203      	str	r2, [sp, #12]
 8005106:	2b00      	cmp	r3, #0
 8005108:	bfb8      	it	lt
 800510a:	f04f 33ff 	movlt.w	r3, #4294967295
 800510e:	9305      	str	r3, [sp, #20]
 8005110:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80051cc <_svfiprintf_r+0x1ec>
 8005114:	2203      	movs	r2, #3
 8005116:	4650      	mov	r0, sl
 8005118:	7821      	ldrb	r1, [r4, #0]
 800511a:	f000 fa1d 	bl	8005558 <memchr>
 800511e:	b138      	cbz	r0, 8005130 <_svfiprintf_r+0x150>
 8005120:	2240      	movs	r2, #64	; 0x40
 8005122:	9b04      	ldr	r3, [sp, #16]
 8005124:	eba0 000a 	sub.w	r0, r0, sl
 8005128:	4082      	lsls	r2, r0
 800512a:	4313      	orrs	r3, r2
 800512c:	3401      	adds	r4, #1
 800512e:	9304      	str	r3, [sp, #16]
 8005130:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005134:	2206      	movs	r2, #6
 8005136:	4826      	ldr	r0, [pc, #152]	; (80051d0 <_svfiprintf_r+0x1f0>)
 8005138:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800513c:	f000 fa0c 	bl	8005558 <memchr>
 8005140:	2800      	cmp	r0, #0
 8005142:	d038      	beq.n	80051b6 <_svfiprintf_r+0x1d6>
 8005144:	4b23      	ldr	r3, [pc, #140]	; (80051d4 <_svfiprintf_r+0x1f4>)
 8005146:	bb1b      	cbnz	r3, 8005190 <_svfiprintf_r+0x1b0>
 8005148:	9b03      	ldr	r3, [sp, #12]
 800514a:	3307      	adds	r3, #7
 800514c:	f023 0307 	bic.w	r3, r3, #7
 8005150:	3308      	adds	r3, #8
 8005152:	9303      	str	r3, [sp, #12]
 8005154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005156:	4433      	add	r3, r6
 8005158:	9309      	str	r3, [sp, #36]	; 0x24
 800515a:	e768      	b.n	800502e <_svfiprintf_r+0x4e>
 800515c:	460c      	mov	r4, r1
 800515e:	2001      	movs	r0, #1
 8005160:	fb0c 3202 	mla	r2, ip, r2, r3
 8005164:	e7a6      	b.n	80050b4 <_svfiprintf_r+0xd4>
 8005166:	2300      	movs	r3, #0
 8005168:	f04f 0c0a 	mov.w	ip, #10
 800516c:	4619      	mov	r1, r3
 800516e:	3401      	adds	r4, #1
 8005170:	9305      	str	r3, [sp, #20]
 8005172:	4620      	mov	r0, r4
 8005174:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005178:	3a30      	subs	r2, #48	; 0x30
 800517a:	2a09      	cmp	r2, #9
 800517c:	d903      	bls.n	8005186 <_svfiprintf_r+0x1a6>
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0c6      	beq.n	8005110 <_svfiprintf_r+0x130>
 8005182:	9105      	str	r1, [sp, #20]
 8005184:	e7c4      	b.n	8005110 <_svfiprintf_r+0x130>
 8005186:	4604      	mov	r4, r0
 8005188:	2301      	movs	r3, #1
 800518a:	fb0c 2101 	mla	r1, ip, r1, r2
 800518e:	e7f0      	b.n	8005172 <_svfiprintf_r+0x192>
 8005190:	ab03      	add	r3, sp, #12
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	462a      	mov	r2, r5
 8005196:	4638      	mov	r0, r7
 8005198:	4b0f      	ldr	r3, [pc, #60]	; (80051d8 <_svfiprintf_r+0x1f8>)
 800519a:	a904      	add	r1, sp, #16
 800519c:	f3af 8000 	nop.w
 80051a0:	1c42      	adds	r2, r0, #1
 80051a2:	4606      	mov	r6, r0
 80051a4:	d1d6      	bne.n	8005154 <_svfiprintf_r+0x174>
 80051a6:	89ab      	ldrh	r3, [r5, #12]
 80051a8:	065b      	lsls	r3, r3, #25
 80051aa:	f53f af2d 	bmi.w	8005008 <_svfiprintf_r+0x28>
 80051ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051b0:	b01d      	add	sp, #116	; 0x74
 80051b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051b6:	ab03      	add	r3, sp, #12
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	462a      	mov	r2, r5
 80051bc:	4638      	mov	r0, r7
 80051be:	4b06      	ldr	r3, [pc, #24]	; (80051d8 <_svfiprintf_r+0x1f8>)
 80051c0:	a904      	add	r1, sp, #16
 80051c2:	f000 f87d 	bl	80052c0 <_printf_i>
 80051c6:	e7eb      	b.n	80051a0 <_svfiprintf_r+0x1c0>
 80051c8:	0800591e 	.word	0x0800591e
 80051cc:	08005924 	.word	0x08005924
 80051d0:	08005928 	.word	0x08005928
 80051d4:	00000000 	.word	0x00000000
 80051d8:	08004f2d 	.word	0x08004f2d

080051dc <_printf_common>:
 80051dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051e0:	4616      	mov	r6, r2
 80051e2:	4699      	mov	r9, r3
 80051e4:	688a      	ldr	r2, [r1, #8]
 80051e6:	690b      	ldr	r3, [r1, #16]
 80051e8:	4607      	mov	r7, r0
 80051ea:	4293      	cmp	r3, r2
 80051ec:	bfb8      	it	lt
 80051ee:	4613      	movlt	r3, r2
 80051f0:	6033      	str	r3, [r6, #0]
 80051f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051f6:	460c      	mov	r4, r1
 80051f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051fc:	b10a      	cbz	r2, 8005202 <_printf_common+0x26>
 80051fe:	3301      	adds	r3, #1
 8005200:	6033      	str	r3, [r6, #0]
 8005202:	6823      	ldr	r3, [r4, #0]
 8005204:	0699      	lsls	r1, r3, #26
 8005206:	bf42      	ittt	mi
 8005208:	6833      	ldrmi	r3, [r6, #0]
 800520a:	3302      	addmi	r3, #2
 800520c:	6033      	strmi	r3, [r6, #0]
 800520e:	6825      	ldr	r5, [r4, #0]
 8005210:	f015 0506 	ands.w	r5, r5, #6
 8005214:	d106      	bne.n	8005224 <_printf_common+0x48>
 8005216:	f104 0a19 	add.w	sl, r4, #25
 800521a:	68e3      	ldr	r3, [r4, #12]
 800521c:	6832      	ldr	r2, [r6, #0]
 800521e:	1a9b      	subs	r3, r3, r2
 8005220:	42ab      	cmp	r3, r5
 8005222:	dc2b      	bgt.n	800527c <_printf_common+0xa0>
 8005224:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005228:	1e13      	subs	r3, r2, #0
 800522a:	6822      	ldr	r2, [r4, #0]
 800522c:	bf18      	it	ne
 800522e:	2301      	movne	r3, #1
 8005230:	0692      	lsls	r2, r2, #26
 8005232:	d430      	bmi.n	8005296 <_printf_common+0xba>
 8005234:	4649      	mov	r1, r9
 8005236:	4638      	mov	r0, r7
 8005238:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800523c:	47c0      	blx	r8
 800523e:	3001      	adds	r0, #1
 8005240:	d023      	beq.n	800528a <_printf_common+0xae>
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	6922      	ldr	r2, [r4, #16]
 8005246:	f003 0306 	and.w	r3, r3, #6
 800524a:	2b04      	cmp	r3, #4
 800524c:	bf14      	ite	ne
 800524e:	2500      	movne	r5, #0
 8005250:	6833      	ldreq	r3, [r6, #0]
 8005252:	f04f 0600 	mov.w	r6, #0
 8005256:	bf08      	it	eq
 8005258:	68e5      	ldreq	r5, [r4, #12]
 800525a:	f104 041a 	add.w	r4, r4, #26
 800525e:	bf08      	it	eq
 8005260:	1aed      	subeq	r5, r5, r3
 8005262:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005266:	bf08      	it	eq
 8005268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800526c:	4293      	cmp	r3, r2
 800526e:	bfc4      	itt	gt
 8005270:	1a9b      	subgt	r3, r3, r2
 8005272:	18ed      	addgt	r5, r5, r3
 8005274:	42b5      	cmp	r5, r6
 8005276:	d11a      	bne.n	80052ae <_printf_common+0xd2>
 8005278:	2000      	movs	r0, #0
 800527a:	e008      	b.n	800528e <_printf_common+0xb2>
 800527c:	2301      	movs	r3, #1
 800527e:	4652      	mov	r2, sl
 8005280:	4649      	mov	r1, r9
 8005282:	4638      	mov	r0, r7
 8005284:	47c0      	blx	r8
 8005286:	3001      	adds	r0, #1
 8005288:	d103      	bne.n	8005292 <_printf_common+0xb6>
 800528a:	f04f 30ff 	mov.w	r0, #4294967295
 800528e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005292:	3501      	adds	r5, #1
 8005294:	e7c1      	b.n	800521a <_printf_common+0x3e>
 8005296:	2030      	movs	r0, #48	; 0x30
 8005298:	18e1      	adds	r1, r4, r3
 800529a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800529e:	1c5a      	adds	r2, r3, #1
 80052a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052a4:	4422      	add	r2, r4
 80052a6:	3302      	adds	r3, #2
 80052a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052ac:	e7c2      	b.n	8005234 <_printf_common+0x58>
 80052ae:	2301      	movs	r3, #1
 80052b0:	4622      	mov	r2, r4
 80052b2:	4649      	mov	r1, r9
 80052b4:	4638      	mov	r0, r7
 80052b6:	47c0      	blx	r8
 80052b8:	3001      	adds	r0, #1
 80052ba:	d0e6      	beq.n	800528a <_printf_common+0xae>
 80052bc:	3601      	adds	r6, #1
 80052be:	e7d9      	b.n	8005274 <_printf_common+0x98>

080052c0 <_printf_i>:
 80052c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052c4:	7e0f      	ldrb	r7, [r1, #24]
 80052c6:	4691      	mov	r9, r2
 80052c8:	2f78      	cmp	r7, #120	; 0x78
 80052ca:	4680      	mov	r8, r0
 80052cc:	460c      	mov	r4, r1
 80052ce:	469a      	mov	sl, r3
 80052d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80052d6:	d807      	bhi.n	80052e8 <_printf_i+0x28>
 80052d8:	2f62      	cmp	r7, #98	; 0x62
 80052da:	d80a      	bhi.n	80052f2 <_printf_i+0x32>
 80052dc:	2f00      	cmp	r7, #0
 80052de:	f000 80d5 	beq.w	800548c <_printf_i+0x1cc>
 80052e2:	2f58      	cmp	r7, #88	; 0x58
 80052e4:	f000 80c1 	beq.w	800546a <_printf_i+0x1aa>
 80052e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052f0:	e03a      	b.n	8005368 <_printf_i+0xa8>
 80052f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052f6:	2b15      	cmp	r3, #21
 80052f8:	d8f6      	bhi.n	80052e8 <_printf_i+0x28>
 80052fa:	a101      	add	r1, pc, #4	; (adr r1, 8005300 <_printf_i+0x40>)
 80052fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005300:	08005359 	.word	0x08005359
 8005304:	0800536d 	.word	0x0800536d
 8005308:	080052e9 	.word	0x080052e9
 800530c:	080052e9 	.word	0x080052e9
 8005310:	080052e9 	.word	0x080052e9
 8005314:	080052e9 	.word	0x080052e9
 8005318:	0800536d 	.word	0x0800536d
 800531c:	080052e9 	.word	0x080052e9
 8005320:	080052e9 	.word	0x080052e9
 8005324:	080052e9 	.word	0x080052e9
 8005328:	080052e9 	.word	0x080052e9
 800532c:	08005473 	.word	0x08005473
 8005330:	08005399 	.word	0x08005399
 8005334:	0800542d 	.word	0x0800542d
 8005338:	080052e9 	.word	0x080052e9
 800533c:	080052e9 	.word	0x080052e9
 8005340:	08005495 	.word	0x08005495
 8005344:	080052e9 	.word	0x080052e9
 8005348:	08005399 	.word	0x08005399
 800534c:	080052e9 	.word	0x080052e9
 8005350:	080052e9 	.word	0x080052e9
 8005354:	08005435 	.word	0x08005435
 8005358:	682b      	ldr	r3, [r5, #0]
 800535a:	1d1a      	adds	r2, r3, #4
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	602a      	str	r2, [r5, #0]
 8005360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005364:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005368:	2301      	movs	r3, #1
 800536a:	e0a0      	b.n	80054ae <_printf_i+0x1ee>
 800536c:	6820      	ldr	r0, [r4, #0]
 800536e:	682b      	ldr	r3, [r5, #0]
 8005370:	0607      	lsls	r7, r0, #24
 8005372:	f103 0104 	add.w	r1, r3, #4
 8005376:	6029      	str	r1, [r5, #0]
 8005378:	d501      	bpl.n	800537e <_printf_i+0xbe>
 800537a:	681e      	ldr	r6, [r3, #0]
 800537c:	e003      	b.n	8005386 <_printf_i+0xc6>
 800537e:	0646      	lsls	r6, r0, #25
 8005380:	d5fb      	bpl.n	800537a <_printf_i+0xba>
 8005382:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005386:	2e00      	cmp	r6, #0
 8005388:	da03      	bge.n	8005392 <_printf_i+0xd2>
 800538a:	232d      	movs	r3, #45	; 0x2d
 800538c:	4276      	negs	r6, r6
 800538e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005392:	230a      	movs	r3, #10
 8005394:	4859      	ldr	r0, [pc, #356]	; (80054fc <_printf_i+0x23c>)
 8005396:	e012      	b.n	80053be <_printf_i+0xfe>
 8005398:	682b      	ldr	r3, [r5, #0]
 800539a:	6820      	ldr	r0, [r4, #0]
 800539c:	1d19      	adds	r1, r3, #4
 800539e:	6029      	str	r1, [r5, #0]
 80053a0:	0605      	lsls	r5, r0, #24
 80053a2:	d501      	bpl.n	80053a8 <_printf_i+0xe8>
 80053a4:	681e      	ldr	r6, [r3, #0]
 80053a6:	e002      	b.n	80053ae <_printf_i+0xee>
 80053a8:	0641      	lsls	r1, r0, #25
 80053aa:	d5fb      	bpl.n	80053a4 <_printf_i+0xe4>
 80053ac:	881e      	ldrh	r6, [r3, #0]
 80053ae:	2f6f      	cmp	r7, #111	; 0x6f
 80053b0:	bf0c      	ite	eq
 80053b2:	2308      	moveq	r3, #8
 80053b4:	230a      	movne	r3, #10
 80053b6:	4851      	ldr	r0, [pc, #324]	; (80054fc <_printf_i+0x23c>)
 80053b8:	2100      	movs	r1, #0
 80053ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053be:	6865      	ldr	r5, [r4, #4]
 80053c0:	2d00      	cmp	r5, #0
 80053c2:	bfa8      	it	ge
 80053c4:	6821      	ldrge	r1, [r4, #0]
 80053c6:	60a5      	str	r5, [r4, #8]
 80053c8:	bfa4      	itt	ge
 80053ca:	f021 0104 	bicge.w	r1, r1, #4
 80053ce:	6021      	strge	r1, [r4, #0]
 80053d0:	b90e      	cbnz	r6, 80053d6 <_printf_i+0x116>
 80053d2:	2d00      	cmp	r5, #0
 80053d4:	d04b      	beq.n	800546e <_printf_i+0x1ae>
 80053d6:	4615      	mov	r5, r2
 80053d8:	fbb6 f1f3 	udiv	r1, r6, r3
 80053dc:	fb03 6711 	mls	r7, r3, r1, r6
 80053e0:	5dc7      	ldrb	r7, [r0, r7]
 80053e2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80053e6:	4637      	mov	r7, r6
 80053e8:	42bb      	cmp	r3, r7
 80053ea:	460e      	mov	r6, r1
 80053ec:	d9f4      	bls.n	80053d8 <_printf_i+0x118>
 80053ee:	2b08      	cmp	r3, #8
 80053f0:	d10b      	bne.n	800540a <_printf_i+0x14a>
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	07de      	lsls	r6, r3, #31
 80053f6:	d508      	bpl.n	800540a <_printf_i+0x14a>
 80053f8:	6923      	ldr	r3, [r4, #16]
 80053fa:	6861      	ldr	r1, [r4, #4]
 80053fc:	4299      	cmp	r1, r3
 80053fe:	bfde      	ittt	le
 8005400:	2330      	movle	r3, #48	; 0x30
 8005402:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005406:	f105 35ff 	addle.w	r5, r5, #4294967295
 800540a:	1b52      	subs	r2, r2, r5
 800540c:	6122      	str	r2, [r4, #16]
 800540e:	464b      	mov	r3, r9
 8005410:	4621      	mov	r1, r4
 8005412:	4640      	mov	r0, r8
 8005414:	f8cd a000 	str.w	sl, [sp]
 8005418:	aa03      	add	r2, sp, #12
 800541a:	f7ff fedf 	bl	80051dc <_printf_common>
 800541e:	3001      	adds	r0, #1
 8005420:	d14a      	bne.n	80054b8 <_printf_i+0x1f8>
 8005422:	f04f 30ff 	mov.w	r0, #4294967295
 8005426:	b004      	add	sp, #16
 8005428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800542c:	6823      	ldr	r3, [r4, #0]
 800542e:	f043 0320 	orr.w	r3, r3, #32
 8005432:	6023      	str	r3, [r4, #0]
 8005434:	2778      	movs	r7, #120	; 0x78
 8005436:	4832      	ldr	r0, [pc, #200]	; (8005500 <_printf_i+0x240>)
 8005438:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800543c:	6823      	ldr	r3, [r4, #0]
 800543e:	6829      	ldr	r1, [r5, #0]
 8005440:	061f      	lsls	r7, r3, #24
 8005442:	f851 6b04 	ldr.w	r6, [r1], #4
 8005446:	d402      	bmi.n	800544e <_printf_i+0x18e>
 8005448:	065f      	lsls	r7, r3, #25
 800544a:	bf48      	it	mi
 800544c:	b2b6      	uxthmi	r6, r6
 800544e:	07df      	lsls	r7, r3, #31
 8005450:	bf48      	it	mi
 8005452:	f043 0320 	orrmi.w	r3, r3, #32
 8005456:	6029      	str	r1, [r5, #0]
 8005458:	bf48      	it	mi
 800545a:	6023      	strmi	r3, [r4, #0]
 800545c:	b91e      	cbnz	r6, 8005466 <_printf_i+0x1a6>
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	f023 0320 	bic.w	r3, r3, #32
 8005464:	6023      	str	r3, [r4, #0]
 8005466:	2310      	movs	r3, #16
 8005468:	e7a6      	b.n	80053b8 <_printf_i+0xf8>
 800546a:	4824      	ldr	r0, [pc, #144]	; (80054fc <_printf_i+0x23c>)
 800546c:	e7e4      	b.n	8005438 <_printf_i+0x178>
 800546e:	4615      	mov	r5, r2
 8005470:	e7bd      	b.n	80053ee <_printf_i+0x12e>
 8005472:	682b      	ldr	r3, [r5, #0]
 8005474:	6826      	ldr	r6, [r4, #0]
 8005476:	1d18      	adds	r0, r3, #4
 8005478:	6961      	ldr	r1, [r4, #20]
 800547a:	6028      	str	r0, [r5, #0]
 800547c:	0635      	lsls	r5, r6, #24
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	d501      	bpl.n	8005486 <_printf_i+0x1c6>
 8005482:	6019      	str	r1, [r3, #0]
 8005484:	e002      	b.n	800548c <_printf_i+0x1cc>
 8005486:	0670      	lsls	r0, r6, #25
 8005488:	d5fb      	bpl.n	8005482 <_printf_i+0x1c2>
 800548a:	8019      	strh	r1, [r3, #0]
 800548c:	2300      	movs	r3, #0
 800548e:	4615      	mov	r5, r2
 8005490:	6123      	str	r3, [r4, #16]
 8005492:	e7bc      	b.n	800540e <_printf_i+0x14e>
 8005494:	682b      	ldr	r3, [r5, #0]
 8005496:	2100      	movs	r1, #0
 8005498:	1d1a      	adds	r2, r3, #4
 800549a:	602a      	str	r2, [r5, #0]
 800549c:	681d      	ldr	r5, [r3, #0]
 800549e:	6862      	ldr	r2, [r4, #4]
 80054a0:	4628      	mov	r0, r5
 80054a2:	f000 f859 	bl	8005558 <memchr>
 80054a6:	b108      	cbz	r0, 80054ac <_printf_i+0x1ec>
 80054a8:	1b40      	subs	r0, r0, r5
 80054aa:	6060      	str	r0, [r4, #4]
 80054ac:	6863      	ldr	r3, [r4, #4]
 80054ae:	6123      	str	r3, [r4, #16]
 80054b0:	2300      	movs	r3, #0
 80054b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054b6:	e7aa      	b.n	800540e <_printf_i+0x14e>
 80054b8:	462a      	mov	r2, r5
 80054ba:	4649      	mov	r1, r9
 80054bc:	4640      	mov	r0, r8
 80054be:	6923      	ldr	r3, [r4, #16]
 80054c0:	47d0      	blx	sl
 80054c2:	3001      	adds	r0, #1
 80054c4:	d0ad      	beq.n	8005422 <_printf_i+0x162>
 80054c6:	6823      	ldr	r3, [r4, #0]
 80054c8:	079b      	lsls	r3, r3, #30
 80054ca:	d413      	bmi.n	80054f4 <_printf_i+0x234>
 80054cc:	68e0      	ldr	r0, [r4, #12]
 80054ce:	9b03      	ldr	r3, [sp, #12]
 80054d0:	4298      	cmp	r0, r3
 80054d2:	bfb8      	it	lt
 80054d4:	4618      	movlt	r0, r3
 80054d6:	e7a6      	b.n	8005426 <_printf_i+0x166>
 80054d8:	2301      	movs	r3, #1
 80054da:	4632      	mov	r2, r6
 80054dc:	4649      	mov	r1, r9
 80054de:	4640      	mov	r0, r8
 80054e0:	47d0      	blx	sl
 80054e2:	3001      	adds	r0, #1
 80054e4:	d09d      	beq.n	8005422 <_printf_i+0x162>
 80054e6:	3501      	adds	r5, #1
 80054e8:	68e3      	ldr	r3, [r4, #12]
 80054ea:	9903      	ldr	r1, [sp, #12]
 80054ec:	1a5b      	subs	r3, r3, r1
 80054ee:	42ab      	cmp	r3, r5
 80054f0:	dcf2      	bgt.n	80054d8 <_printf_i+0x218>
 80054f2:	e7eb      	b.n	80054cc <_printf_i+0x20c>
 80054f4:	2500      	movs	r5, #0
 80054f6:	f104 0619 	add.w	r6, r4, #25
 80054fa:	e7f5      	b.n	80054e8 <_printf_i+0x228>
 80054fc:	0800592f 	.word	0x0800592f
 8005500:	08005940 	.word	0x08005940

08005504 <memmove>:
 8005504:	4288      	cmp	r0, r1
 8005506:	b510      	push	{r4, lr}
 8005508:	eb01 0402 	add.w	r4, r1, r2
 800550c:	d902      	bls.n	8005514 <memmove+0x10>
 800550e:	4284      	cmp	r4, r0
 8005510:	4623      	mov	r3, r4
 8005512:	d807      	bhi.n	8005524 <memmove+0x20>
 8005514:	1e43      	subs	r3, r0, #1
 8005516:	42a1      	cmp	r1, r4
 8005518:	d008      	beq.n	800552c <memmove+0x28>
 800551a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800551e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005522:	e7f8      	b.n	8005516 <memmove+0x12>
 8005524:	4601      	mov	r1, r0
 8005526:	4402      	add	r2, r0
 8005528:	428a      	cmp	r2, r1
 800552a:	d100      	bne.n	800552e <memmove+0x2a>
 800552c:	bd10      	pop	{r4, pc}
 800552e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005532:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005536:	e7f7      	b.n	8005528 <memmove+0x24>

08005538 <_sbrk_r>:
 8005538:	b538      	push	{r3, r4, r5, lr}
 800553a:	2300      	movs	r3, #0
 800553c:	4d05      	ldr	r5, [pc, #20]	; (8005554 <_sbrk_r+0x1c>)
 800553e:	4604      	mov	r4, r0
 8005540:	4608      	mov	r0, r1
 8005542:	602b      	str	r3, [r5, #0]
 8005544:	f7fd fab2 	bl	8002aac <_sbrk>
 8005548:	1c43      	adds	r3, r0, #1
 800554a:	d102      	bne.n	8005552 <_sbrk_r+0x1a>
 800554c:	682b      	ldr	r3, [r5, #0]
 800554e:	b103      	cbz	r3, 8005552 <_sbrk_r+0x1a>
 8005550:	6023      	str	r3, [r4, #0]
 8005552:	bd38      	pop	{r3, r4, r5, pc}
 8005554:	200004bc 	.word	0x200004bc

08005558 <memchr>:
 8005558:	4603      	mov	r3, r0
 800555a:	b510      	push	{r4, lr}
 800555c:	b2c9      	uxtb	r1, r1
 800555e:	4402      	add	r2, r0
 8005560:	4293      	cmp	r3, r2
 8005562:	4618      	mov	r0, r3
 8005564:	d101      	bne.n	800556a <memchr+0x12>
 8005566:	2000      	movs	r0, #0
 8005568:	e003      	b.n	8005572 <memchr+0x1a>
 800556a:	7804      	ldrb	r4, [r0, #0]
 800556c:	3301      	adds	r3, #1
 800556e:	428c      	cmp	r4, r1
 8005570:	d1f6      	bne.n	8005560 <memchr+0x8>
 8005572:	bd10      	pop	{r4, pc}

08005574 <memcpy>:
 8005574:	440a      	add	r2, r1
 8005576:	4291      	cmp	r1, r2
 8005578:	f100 33ff 	add.w	r3, r0, #4294967295
 800557c:	d100      	bne.n	8005580 <memcpy+0xc>
 800557e:	4770      	bx	lr
 8005580:	b510      	push	{r4, lr}
 8005582:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005586:	4291      	cmp	r1, r2
 8005588:	f803 4f01 	strb.w	r4, [r3, #1]!
 800558c:	d1f9      	bne.n	8005582 <memcpy+0xe>
 800558e:	bd10      	pop	{r4, pc}

08005590 <_realloc_r>:
 8005590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005594:	4680      	mov	r8, r0
 8005596:	4614      	mov	r4, r2
 8005598:	460e      	mov	r6, r1
 800559a:	b921      	cbnz	r1, 80055a6 <_realloc_r+0x16>
 800559c:	4611      	mov	r1, r2
 800559e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055a2:	f7ff bc37 	b.w	8004e14 <_malloc_r>
 80055a6:	b92a      	cbnz	r2, 80055b4 <_realloc_r+0x24>
 80055a8:	f7ff fbcc 	bl	8004d44 <_free_r>
 80055ac:	4625      	mov	r5, r4
 80055ae:	4628      	mov	r0, r5
 80055b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055b4:	f000 f81b 	bl	80055ee <_malloc_usable_size_r>
 80055b8:	4284      	cmp	r4, r0
 80055ba:	4607      	mov	r7, r0
 80055bc:	d802      	bhi.n	80055c4 <_realloc_r+0x34>
 80055be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80055c2:	d812      	bhi.n	80055ea <_realloc_r+0x5a>
 80055c4:	4621      	mov	r1, r4
 80055c6:	4640      	mov	r0, r8
 80055c8:	f7ff fc24 	bl	8004e14 <_malloc_r>
 80055cc:	4605      	mov	r5, r0
 80055ce:	2800      	cmp	r0, #0
 80055d0:	d0ed      	beq.n	80055ae <_realloc_r+0x1e>
 80055d2:	42bc      	cmp	r4, r7
 80055d4:	4622      	mov	r2, r4
 80055d6:	4631      	mov	r1, r6
 80055d8:	bf28      	it	cs
 80055da:	463a      	movcs	r2, r7
 80055dc:	f7ff ffca 	bl	8005574 <memcpy>
 80055e0:	4631      	mov	r1, r6
 80055e2:	4640      	mov	r0, r8
 80055e4:	f7ff fbae 	bl	8004d44 <_free_r>
 80055e8:	e7e1      	b.n	80055ae <_realloc_r+0x1e>
 80055ea:	4635      	mov	r5, r6
 80055ec:	e7df      	b.n	80055ae <_realloc_r+0x1e>

080055ee <_malloc_usable_size_r>:
 80055ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055f2:	1f18      	subs	r0, r3, #4
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	bfbc      	itt	lt
 80055f8:	580b      	ldrlt	r3, [r1, r0]
 80055fa:	18c0      	addlt	r0, r0, r3
 80055fc:	4770      	bx	lr
	...

08005600 <_init>:
 8005600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005602:	bf00      	nop
 8005604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005606:	bc08      	pop	{r3}
 8005608:	469e      	mov	lr, r3
 800560a:	4770      	bx	lr

0800560c <_fini>:
 800560c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560e:	bf00      	nop
 8005610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005612:	bc08      	pop	{r3}
 8005614:	469e      	mov	lr, r3
 8005616:	4770      	bx	lr
